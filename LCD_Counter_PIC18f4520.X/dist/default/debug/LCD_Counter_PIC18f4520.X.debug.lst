

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Apr 12 13:00:14 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33  0000                     
    34                           ; Version 2.40
    35                           ; Generated 17/11/2021 GMT
    36                           ; 
    37                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _TRISC	set	3988
    70  0000                     _TRISD	set	3989
    71  0000                     _PORTB	set	3969
    72  0000                     _PORTDbits	set	3971
    73  0000                     _TRISA	set	3986
    74  0000                     _TRISB	set	3987
    75  0000                     _CCP1CON	set	4029
    76  0000                     _ADCON2	set	4032
    77  0000                     _ADCON1	set	4033
    78  0000                     _OSCCON	set	4051
    79                           
    80                           	psect	smallconst
    81  000600                     __psmallconst:
    82                           	callstack 0
    83  000600  00                 	db	0
    84  000601                     STR_1:
    85  000601  43                 	db	67	;'C'
    86  000602  6F                 	db	111	;'o'
    87  000603  75                 	db	117	;'u'
    88  000604  6E                 	db	110	;'n'
    89  000605  74                 	db	116	;'t'
    90  000606  65                 	db	101	;'e'
    91  000607  72                 	db	114	;'r'
    92  000608  00                 	db	0
    93  000609                     STR_2:
    94  000609  25                 	db	37
    95  00060A  64                 	db	100	;'d'
    96  00060B  00                 	db	0
    97  00060C  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102  00124C                     __pcinit:
   103                           	callstack 0
   104  00124C                     start_initialization:
   105                           	callstack 0
   106  00124C                     __initialization:
   107                           	callstack 0
   108                           
   109                           ; Clear objects allocated to BANK0 (36 bytes)
   110  00124C  EE00  F080         	lfsr	0,__pbssBANK0
   111  001250  0E24               	movlw	36
   112  001252                     clear_0:
   113  001252  6AEE               	clrf	postinc0,c
   114  001254  06E8               	decf	wreg,f,c
   115  001256  E1FD               	bnz	clear_0
   116                           
   117                           ; Clear objects allocated to COMRAM (4 bytes)
   118  001258  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   119  00125A  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   120  00125C  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   121  00125E  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   122  001260                     end_of_initialization:
   123                           	callstack 0
   124  001260                     __end_of__initialization:
   125                           	callstack 0
   126  001260  0E00               	movlw	low (__Lmediumconst shr (0+16))
   127  001262  6EF8               	movwf	tblptru,c
   128  001264  0100               	movlb	0
   129  001266  EFC6  F006         	goto	_main	;jump to C main() function
   130                           
   131                           	psect	bssCOMRAM
   132  00007B                     __pbssCOMRAM:
   133                           	callstack 0
   134  00007B                     _prec:
   135                           	callstack 0
   136  00007B                     	ds	2
   137  00007D                     _flags:
   138                           	callstack 0
   139  00007D                     	ds	2
   140                           
   141                           	psect	bssBANK0
   142  000080                     __pbssBANK0:
   143                           	callstack 0
   144  000080                     _nout:
   145                           	callstack 0
   146  000080                     	ds	2
   147  000082                     _width:
   148                           	callstack 0
   149  000082                     	ds	2
   150  000084                     _dbuf:
   151                           	callstack 0
   152  000084                     	ds	32
   153                           
   154                           	psect	cstackCOMRAM
   155  000001                     __pcstackCOMRAM:
   156                           	callstack 0
   157  000001                     ??_LCD_Char:
   158  000001                     ??_LCD_Command:
   159  000001                     ?_strlen:
   160                           	callstack 0
   161  000001                     ?___aodiv:
   162                           	callstack 0
   163  000001                     ?___aomod:
   164                           	callstack 0
   165  000001                     fputc@c:
   166                           	callstack 0
   167  000001                     strlen@s:
   168                           	callstack 0
   169  000001                     ___aodiv@dividend:
   170                           	callstack 0
   171  000001                     ___aomod@dividend:
   172                           	callstack 0
   173                           
   174                           ; 8 bytes @ 0x0
   175  000001                     	ds	1
   176  000002                     LCD_Command@cmd:
   177                           	callstack 0
   178  000002                     LCD_Char@dat:
   179                           	callstack 0
   180                           
   181                           ; 1 bytes @ 0x1
   182  000002                     	ds	1
   183  000003                     LCD_String@msg:
   184                           	callstack 0
   185  000003                     fputc@fp:
   186                           	callstack 0
   187  000003                     strlen@a:
   188                           	callstack 0
   189                           
   190                           ; 2 bytes @ 0x2
   191  000003                     	ds	2
   192  000005                     ??_fputc:
   193  000005                     LCD_String_xy@pos:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x4
   197  000005                     	ds	1
   198  000006                     LCD_String_xy@msg:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x5
   202  000006                     	ds	2
   203  000008                     LCD_String_xy@row:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x7
   207  000008                     	ds	1
   208  000009                     LCD_String_xy@location:
   209                           	callstack 0
   210  000009                     ___aodiv@divisor:
   211                           	callstack 0
   212  000009                     ___aomod@divisor:
   213                           	callstack 0
   214                           
   215                           ; 8 bytes @ 0x8
   216  000009                     	ds	1
   217  00000A                     fputs@s:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x9
   221  00000A                     	ds	2
   222  00000C                     fputs@fp:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0xB
   226  00000C                     	ds	2
   227  00000E                     fputs@c:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0xD
   231  00000E                     	ds	1
   232  00000F                     fputs@i:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xE
   236  00000F                     	ds	2
   237  000011                     ?_pad:
   238                           	callstack 0
   239  000011                     ___aodiv@counter:
   240                           	callstack 0
   241  000011                     ___aomod@counter:
   242                           	callstack 0
   243  000011                     pad@fp:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0x10
   247  000011                     	ds	1
   248  000012                     ___aodiv@sign:
   249                           	callstack 0
   250  000012                     ___aomod@sign:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x11
   254  000012                     	ds	1
   255  000013                     ?_abs:
   256                           	callstack 0
   257  000013                     pad@buf:
   258                           	callstack 0
   259  000013                     abs@a:
   260                           	callstack 0
   261  000013                     ___aodiv@quotient:
   262                           	callstack 0
   263                           
   264                           ; 8 bytes @ 0x12
   265  000013                     	ds	2
   266  000015                     ??_abs:
   267  000015                     pad@p:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x14
   271  000015                     	ds	2
   272  000017                     ??_pad:
   273                           
   274                           ; 1 bytes @ 0x16
   275  000017                     	ds	1
   276  000018                     pad@i:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x17
   280  000018                     	ds	2
   281  00001A                     pad@w:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x19
   285  00001A                     	ds	2
   286  00001C                     ?_dtoa:
   287                           	callstack 0
   288  00001C                     dtoa@fp:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x1B
   292  00001C                     	ds	2
   293  00001E                     dtoa@d:
   294                           	callstack 0
   295                           
   296                           ; 8 bytes @ 0x1D
   297  00001E                     	ds	8
   298  000026                     ??_dtoa:
   299                           
   300                           ; 1 bytes @ 0x25
   301  000026                     	ds	8
   302  00002E                     _dtoa$683:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x2D
   306  00002E                     	ds	2
   307  000030                     dtoa@p:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x2F
   311  000030                     	ds	2
   312  000032                     dtoa@w:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x31
   316  000032                     	ds	2
   317  000034                     dtoa@s:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x33
   321  000034                     	ds	2
   322  000036                     dtoa@n:
   323                           	callstack 0
   324                           
   325                           ; 8 bytes @ 0x35
   326  000036                     	ds	8
   327  00003E                     dtoa@i:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x3D
   331  00003E                     	ds	2
   332  000040                     ?_vfpfcnvrt:
   333                           	callstack 0
   334  000040                     vfpfcnvrt@fp:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x3F
   338  000040                     	ds	2
   339  000042                     vfpfcnvrt@fmt:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x41
   343  000042                     	ds	2
   344  000044                     vfpfcnvrt@ap:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x43
   348  000044                     	ds	2
   349  000046                     ??_vfpfcnvrt:
   350                           
   351                           ; 1 bytes @ 0x45
   352  000046                     	ds	2
   353  000048                     vfpfcnvrt@ll:
   354                           	callstack 0
   355                           
   356                           ; 8 bytes @ 0x47
   357  000048                     	ds	8
   358  000050                     ?_vfprintf:
   359                           	callstack 0
   360  000050                     vfprintf@fp:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x4F
   364  000050                     	ds	2
   365  000052                     vfprintf@fmt:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x51
   369  000052                     	ds	2
   370  000054                     vfprintf@ap:
   371                           	callstack 0
   372                           
   373                           ; 2 bytes @ 0x53
   374  000054                     	ds	2
   375  000056                     vfprintf@cfmt:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x55
   379  000056                     	ds	2
   380  000058                     ?_sprintf:
   381                           	callstack 0
   382  000058                     sprintf@s:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x57
   386  000058                     	ds	2
   387  00005A                     sprintf@fmt:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x59
   391  00005A                     	ds	4
   392  00005E                     sprintf@ap:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x5D
   396  00005E                     	ds	2
   397  000060                     sprintf@f:
   398                           	callstack 0
   399                           
   400                           ; 11 bytes @ 0x5F
   401  000060                     	ds	11
   402  00006B                     ??_main:
   403                           
   404                           ; 1 bytes @ 0x6A
   405  00006B                     	ds	2
   406  00006D                     main@buffer:
   407                           	callstack 0
   408                           
   409                           ; 10 bytes @ 0x6C
   410  00006D                     	ds	10
   411  000077                     main@count:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x76
   415  000077                     	ds	2
   416  000079                     main@DispCount:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x78
   420  000079                     	ds	2
   421                           
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 86 in file "newmain.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  buffer         10  108[COMRAM] unsigned char [10]
   432 ;;  DispCount       2  120[COMRAM] unsigned short 
   433 ;;  count           2  118[COMRAM] unsigned short 
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   443 ;;      Params:         0       0       0       0       0       0       0
   444 ;;      Locals:        14       0       0       0       0       0       0
   445 ;;      Temps:          2       0       0       0       0       0       0
   446 ;;      Totals:        16       0       0       0       0       0       0
   447 ;;Total ram usage:       16 bytes
   448 ;; Hardware stack levels required when called: 8
   449 ;; This function calls:
   450 ;;		_LCD_Char
   451 ;;		_LCD_Clear
   452 ;;		_LCD_Init
   453 ;;		_LCD_String_xy
   454 ;;		_sprintf
   455 ;; This function is called by:
   456 ;;		Startup code after reset
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text0
   461  000D8C                     __ptext0:
   462                           	callstack 0
   463  000D8C                     _main:
   464                           	callstack 23
   465  000D8C                     
   466                           ;newmain.c: 88:     OSCCON=0x72;
   467  000D8C  0E72               	movlw	114
   468  000D8E  6ED3               	movwf	211,c	;volatile
   469  000D90                     
   470                           ;newmain.c: 89:     LCD_Init();
   471  000D90  EC15  F009         	call	_LCD_Init	;wreg free
   472  000D94                     
   473                           ;newmain.c: 90:     LCD_Clear();
   474  000D94  EC53  F009         	call	_LCD_Clear	;wreg free
   475                           
   476                           ;newmain.c: 91:     ADCON1=0x00;
   477  000D98  0E00               	movlw	0
   478  000D9A  6EC1               	movwf	193,c	;volatile
   479                           
   480                           ;newmain.c: 92:     ADCON2=0x00;
   481  000D9C  0E00               	movlw	0
   482  000D9E  6EC0               	movwf	192,c	;volatile
   483                           
   484                           ;newmain.c: 93:     CCP1CON=0x00;
   485  000DA0  0E00               	movlw	0
   486  000DA2  6EBD               	movwf	189,c	;volatile
   487                           
   488                           ;newmain.c: 94:     TRISB=0x00;
   489  000DA4  0E00               	movlw	0
   490  000DA6  6E93               	movwf	147,c	;volatile
   491                           
   492                           ;newmain.c: 95:     TRISD=0x00;
   493  000DA8  0E00               	movlw	0
   494  000DAA  6E95               	movwf	149,c	;volatile
   495                           
   496                           ;newmain.c: 96:     TRISA=0x00;
   497  000DAC  0E00               	movlw	0
   498  000DAE  6E92               	movwf	146,c	;volatile
   499                           
   500                           ;newmain.c: 97:     TRISC=0x00;
   501  000DB0  0E00               	movlw	0
   502  000DB2  6E94               	movwf	148,c	;volatile
   503  000DB4                     
   504                           ;newmain.c: 98:      _delay((unsigned long)((100)*(8000000/4000.0)));
   505  000DB4  0E02               	movlw	2
   506  000DB6  6E6C               	movwf	(??_main+1)^0,c
   507  000DB8  0E04               	movlw	4
   508  000DBA  6E6B               	movwf	??_main^0,c
   509  000DBC  0EBA               	movlw	186
   510  000DBE                     u1017:
   511  000DBE  2EE8               	decfsz	wreg,f,c
   512  000DC0  D7FE               	bra	u1017
   513  000DC2  2E6B               	decfsz	??_main^0,f,c
   514  000DC4  D7FC               	bra	u1017
   515  000DC6  2E6C               	decfsz	(??_main+1)^0,f,c
   516  000DC8  D7FA               	bra	u1017
   517  000DCA  D000               	nop2	
   518  000DCC                     
   519                           ;newmain.c: 99:     LCD_Char('Y');
   520  000DCC  0E59               	movlw	89
   521  000DCE  EC35  F009         	call	_LCD_Char
   522  000DD2                     
   523                           ;newmain.c: 100:     _delay((unsigned long)((100)*(8000000/4000.0)));
   524  000DD2  0E02               	movlw	2
   525  000DD4  6E6C               	movwf	(??_main+1)^0,c
   526  000DD6  0E04               	movlw	4
   527  000DD8  6E6B               	movwf	??_main^0,c
   528  000DDA  0EBA               	movlw	186
   529  000DDC                     u1027:
   530  000DDC  2EE8               	decfsz	wreg,f,c
   531  000DDE  D7FE               	bra	u1027
   532  000DE0  2E6B               	decfsz	??_main^0,f,c
   533  000DE2  D7FC               	bra	u1027
   534  000DE4  2E6C               	decfsz	(??_main+1)^0,f,c
   535  000DE6  D7FA               	bra	u1027
   536  000DE8  D000               	nop2	
   537  000DEA                     
   538                           ;newmain.c: 101:     LCD_String_xy(1,5,"Counter");
   539  000DEA  0E05               	movlw	5
   540  000DEC  6E05               	movwf	LCD_String_xy@pos^0,c
   541  000DEE  0E01               	movlw	low STR_1
   542  000DF0  6E06               	movwf	LCD_String_xy@msg^0,c
   543  000DF2  0E06               	movlw	high STR_1
   544  000DF4  6E07               	movwf	(LCD_String_xy@msg+1)^0,c
   545  000DF6  0E01               	movlw	1
   546  000DF8  ECDA  F008         	call	_LCD_String_xy
   547  000DFC                     
   548                           ;newmain.c: 102:      uint16_t count =5000UL;
   549  000DFC  0E13               	movlw	19
   550  000DFE  6E78               	movwf	(main@count+1)^0,c
   551  000E00  0E88               	movlw	136
   552  000E02  6E77               	movwf	main@count^0,c
   553  000E04                     l1535:
   554                           
   555                           ;newmain.c: 103:    uint16_t DispCount =0UL;
   556  000E04  0E00               	movlw	0
   557  000E06  6E7A               	movwf	(main@DispCount+1)^0,c
   558  000E08  0E00               	movlw	0
   559  000E0A  6E79               	movwf	main@DispCount^0,c
   560  000E0C  EF3E  F007         	goto	l1551
   561  000E10                     l1537:
   562                           
   563                           ;newmain.c: 107:         {;newmain.c: 108:             count--;
   564  000E10  0677               	decf	main@count^0,f,c
   565  000E12  A0D8               	btfss	status,0,c
   566  000E14  0678               	decf	(main@count+1)^0,f,c
   567                           
   568                           ;newmain.c: 109:             DispCount++;
   569  000E16  4A79               	infsnz	main@DispCount^0,f,c
   570  000E18  2A7A               	incf	(main@DispCount+1)^0,f,c
   571  000E1A                     
   572                           ;newmain.c: 110:             sprintf(buffer,"%d",DispCount);
   573  000E1A  0E6D               	movlw	low main@buffer
   574  000E1C  6E58               	movwf	sprintf@s^0,c
   575  000E1E  0E00               	movlw	high main@buffer
   576  000E20  6E59               	movwf	(sprintf@s+1)^0,c
   577  000E22  0E09               	movlw	low STR_2
   578  000E24  6E5A               	movwf	sprintf@fmt^0,c
   579  000E26  0E06               	movlw	high STR_2
   580  000E28  6E5B               	movwf	(sprintf@fmt+1)^0,c
   581  000E2A  C079  F05C         	movff	main@DispCount,?_sprintf+4
   582  000E2E  C07A  F05D         	movff	main@DispCount+1,?_sprintf+5
   583  000E32  EC71  F008         	call	_sprintf	;wreg free
   584  000E36                     
   585                           ;newmain.c: 111:             LCD_String_xy(2,5,buffer);
   586  000E36  0E05               	movlw	5
   587  000E38  6E05               	movwf	LCD_String_xy@pos^0,c
   588  000E3A  0E6D               	movlw	low main@buffer
   589  000E3C  6E06               	movwf	LCD_String_xy@msg^0,c
   590  000E3E  0E00               	movlw	high main@buffer
   591  000E40  6E07               	movwf	(LCD_String_xy@msg+1)^0,c
   592  000E42  0E02               	movlw	2
   593  000E44  ECDA  F008         	call	_LCD_String_xy
   594  000E48                     
   595                           ;newmain.c: 112:             PORTDbits.RD2=1;
   596  000E48  8483               	bsf	131,2,c	;volatile
   597  000E4A                     
   598                           ;newmain.c: 113:             _delay((unsigned long)((100)*(8000000/4000.0)));
   599  000E4A  0E02               	movlw	2
   600  000E4C  6E6C               	movwf	(??_main+1)^0,c
   601  000E4E  0E04               	movlw	4
   602  000E50  6E6B               	movwf	??_main^0,c
   603  000E52  0EBA               	movlw	186
   604  000E54                     u1037:
   605  000E54  2EE8               	decfsz	wreg,f,c
   606  000E56  D7FE               	bra	u1037
   607  000E58  2E6B               	decfsz	??_main^0,f,c
   608  000E5A  D7FC               	bra	u1037
   609  000E5C  2E6C               	decfsz	(??_main+1)^0,f,c
   610  000E5E  D7FA               	bra	u1037
   611  000E60  D000               	nop2	
   612  000E62                     
   613                           ;newmain.c: 114:             PORTDbits.RD2=0;
   614  000E62  9483               	bcf	131,2,c	;volatile
   615  000E64                     
   616                           ;newmain.c: 115:             _delay((unsigned long)((100)*(8000000/4000.0)));
   617  000E64  0E02               	movlw	2
   618  000E66  6E6C               	movwf	(??_main+1)^0,c
   619  000E68  0E04               	movlw	4
   620  000E6A  6E6B               	movwf	??_main^0,c
   621  000E6C  0EBA               	movlw	186
   622  000E6E                     u1047:
   623  000E6E  2EE8               	decfsz	wreg,f,c
   624  000E70  D7FE               	bra	u1047
   625  000E72  2E6B               	decfsz	??_main^0,f,c
   626  000E74  D7FC               	bra	u1047
   627  000E76  2E6C               	decfsz	(??_main+1)^0,f,c
   628  000E78  D7FA               	bra	u1047
   629  000E7A  D000               	nop2	
   630  000E7C                     l1551:
   631                           
   632                           ;newmain.c: 106:       while(count>0)
   633  000E7C  5077               	movf	main@count^0,w,c
   634  000E7E  1078               	iorwf	(main@count+1)^0,w,c
   635  000E80  A4D8               	btfss	status,2,c
   636  000E82  EF45  F007         	goto	u1001
   637  000E86  EF47  F007         	goto	u1000
   638  000E8A                     u1001:
   639  000E8A  EF08  F007         	goto	l1537
   640  000E8E                     u1000:
   641  000E8E  EF02  F007         	goto	l1535
   642  000E92  EF01  F000         	goto	start
   643  000E96                     __end_of_main:
   644                           	callstack 0
   645                           
   646 ;; *************** function _sprintf *****************
   647 ;; Defined at:
   648 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_sprintf.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;  s               2   87[COMRAM] PTR unsigned char 
   651 ;;		 -> main@buffer(10), 
   652 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   653 ;;		 -> STR_2(3), 
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  f              11   95[COMRAM] struct _IO_FILE
   656 ;;  ap              2   93[COMRAM] PTR void [1]
   657 ;;		 -> ?_sprintf(2), 
   658 ;;  ret             2    0        int 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  2   87[COMRAM] int 
   661 ;; Registers used:
   662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   668 ;;      Params:         6       0       0       0       0       0       0
   669 ;;      Locals:        13       0       0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0       0       0
   671 ;;      Totals:        19       0       0       0       0       0       0
   672 ;;Total ram usage:       19 bytes
   673 ;; Hardware stack levels used: 1
   674 ;; Hardware stack levels required when called: 7
   675 ;; This function calls:
   676 ;;		_vfprintf
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text1
   683  0010E2                     __ptext1:
   684                           	callstack 0
   685  0010E2                     _sprintf:
   686                           	callstack 23
   687  0010E2  0E5C               	movlw	low (?_sprintf+4)
   688  0010E4  6E5E               	movwf	sprintf@ap^0,c
   689  0010E6  0E00               	movlw	high (?_sprintf+4)
   690  0010E8  6E5F               	movwf	(sprintf@ap+1)^0,c
   691  0010EA  C058  F060         	movff	sprintf@s,sprintf@f
   692  0010EE  C059  F061         	movff	sprintf@s+1,sprintf@f+1
   693  0010F2  0E00               	movlw	0
   694  0010F4  6E64               	movwf	(sprintf@f+4)^0,c
   695  0010F6  0E00               	movlw	0
   696  0010F8  6E63               	movwf	(sprintf@f+3)^0,c
   697  0010FA  0E00               	movlw	0
   698  0010FC  6E6A               	movwf	(sprintf@f+10)^0,c
   699  0010FE  0E00               	movlw	0
   700  001100  6E69               	movwf	(sprintf@f+9)^0,c
   701  001102  0E60               	movlw	low sprintf@f
   702  001104  6E50               	movwf	vfprintf@fp^0,c
   703  001106  0E00               	movlw	high sprintf@f
   704  001108  6E51               	movwf	(vfprintf@fp+1)^0,c
   705  00110A  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   706  00110E  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   707  001112  0E5E               	movlw	low sprintf@ap
   708  001114  6E54               	movwf	vfprintf@ap^0,c
   709  001116  0E00               	movlw	high sprintf@ap
   710  001118  6E55               	movwf	(vfprintf@ap+1)^0,c
   711  00111A  EC11  F008         	call	_vfprintf	;wreg free
   712  00111E  5063               	movf	(sprintf@f+3)^0,w,c
   713  001120  2458               	addwf	sprintf@s^0,w,c
   714  001122  6ED9               	movwf	fsr2l,c
   715  001124  5064               	movf	(sprintf@f+4)^0,w,c
   716  001126  2059               	addwfc	(sprintf@s+1)^0,w,c
   717  001128  6EDA               	movwf	fsr2h,c
   718  00112A  0E00               	movlw	0
   719  00112C  6EDF               	movwf	indf2,c
   720  00112E  0012               	return		;funcret
   721  001130                     __end_of_sprintf:
   722                           	callstack 0
   723                           
   724 ;; *************** function _vfprintf *****************
   725 ;; Defined at:
   726 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   729 ;;		 -> sprintf@f(11), 
   730 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   731 ;;		 -> STR_2(3), 
   732 ;;  ap              2   83[COMRAM] PTR PTR void 
   733 ;;		 -> sprintf@ap(2), 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   736 ;;		 -> STR_2(3), 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  2   79[COMRAM] int 
   739 ;; Registers used:
   740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   746 ;;      Params:         6       0       0       0       0       0       0
   747 ;;      Locals:         2       0       0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0
   749 ;;      Totals:         8       0       0       0       0       0       0
   750 ;;Total ram usage:        8 bytes
   751 ;; Hardware stack levels used: 1
   752 ;; Hardware stack levels required when called: 6
   753 ;; This function calls:
   754 ;;		_vfpfcnvrt
   755 ;; This function is called by:
   756 ;;		_sprintf
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text2
   761  001022                     __ptext2:
   762                           	callstack 0
   763  001022                     _vfprintf:
   764                           	callstack 23
   765  001022                     
   766                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   767  001022  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   768  001026  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   769  00102A                     
   770                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   771  00102A  0E00               	movlw	0
   772  00102C  0100               	movlb	0	; () banked
   773  00102E  6F81               	movwf	(_nout+1)& (0+255),b
   774  001030  0E00               	movlw	0
   775  001032  6F80               	movwf	_nout& (0+255),b
   776                           
   777                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   778  001034  EF2F  F008         	goto	l1491
   779  001038                     l1489:
   780                           
   781                           ; BSR set to: 0
   782                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   783  001038  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   784  00103C  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   785  001040  0E56               	movlw	low vfprintf@cfmt
   786  001042  6E42               	movwf	vfpfcnvrt@fmt^0,c
   787  001044  0E00               	movlw	high vfprintf@cfmt
   788  001046  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   789  001048  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   790  00104C  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   791  001050  EC76  F004         	call	_vfpfcnvrt	;wreg free
   792  001054  5040               	movf	?_vfpfcnvrt^0,w,c
   793  001056  0100               	movlb	0	; () banked
   794  001058  2780               	addwf	_nout& (0+255),f,b
   795  00105A  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   796  00105C  2381               	addwfc	(_nout+1)& (0+255),f,b
   797  00105E                     l1491:
   798                           
   799                           ; BSR set to: 0
   800                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   801  00105E  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   802  001062  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   803  001066                     	if	0	;tblptru may be non-zero
   804  001066                     	endif
   805  001066                     	if	0	;tblptru may be non-zero
   806  001066                     	endif
   807  001066  0008               	tblrd		*
   808  001068  50F5               	movf	tablat,w,c
   809  00106A  0900               	iorlw	0
   810  00106C  A4D8               	btfss	status,2,c
   811  00106E  EF3B  F008         	goto	u981
   812  001072  EF3D  F008         	goto	u980
   813  001076                     u981:
   814  001076  EF1C  F008         	goto	l1489
   815  00107A                     u980:
   816  00107A                     
   817                           ; BSR set to: 0
   818                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   819  00107A  C080  F050         	movff	_nout,?_vfprintf
   820  00107E  C081  F051         	movff	_nout+1,?_vfprintf+1
   821  001082                     
   822                           ; BSR set to: 0
   823  001082  0012               	return		;funcret
   824  001084                     __end_of_vfprintf:
   825                           	callstack 0
   826                           
   827 ;; *************** function _vfpfcnvrt *****************
   828 ;; Defined at:
   829 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   832 ;;		 -> sprintf@f(11), 
   833 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   834 ;;		 -> vfprintf@cfmt(2), 
   835 ;;  ap              2   67[COMRAM] PTR PTR void 
   836 ;;		 -> sprintf@ap(2), 
   837 ;; Auto vars:     Size  Location     Type
   838 ;;  ll              8   71[COMRAM] long long 
   839 ;;  llu             8    0        unsigned long long 
   840 ;;  f               4    0        unsigned long long 
   841 ;;  vp              3    0        PTR void 
   842 ;;  ct              3    0        unsigned char [3]
   843 ;;  cp              3    0        PTR unsigned char 
   844 ;;  i               2    0        int 
   845 ;;  done            2    0        int 
   846 ;;  c               1    0        unsigned char 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  2   63[COMRAM] int 
   849 ;; Registers used:
   850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   856 ;;      Params:         6       0       0       0       0       0       0
   857 ;;      Locals:         8       0       0       0       0       0       0
   858 ;;      Temps:          2       0       0       0       0       0       0
   859 ;;      Totals:        16       0       0       0       0       0       0
   860 ;;Total ram usage:       16 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; Hardware stack levels required when called: 5
   863 ;; This function calls:
   864 ;;		_dtoa
   865 ;;		_fputc
   866 ;; This function is called by:
   867 ;;		_vfprintf
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text3
   872  0008EC                     __ptext3:
   873                           	callstack 0
   874  0008EC                     _vfpfcnvrt:
   875                           	callstack 23
   876  0008EC                     
   877                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.35\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          5\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   878  0008EC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   879  0008F0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   880  0008F4  CFDE FFF6          	movff	postinc2,tblptrl
   881  0008F8  CFDD FFF7          	movff	postdec2,tblptrh
   882  0008FC                     	if	0	;tblptru may be non-zero
   883  0008FC                     	endif
   884  0008FC                     	if	0	;tblptru may be non-zero
   885  0008FC                     	endif
   886  0008FC  0008               	tblrd		*
   887  0008FE  50F5               	movf	tablat,w,c
   888  000900  0A25               	xorlw	37
   889  000902  A4D8               	btfss	status,2,c
   890  000904  EF86  F004         	goto	u911
   891  000908  EF88  F004         	goto	u910
   892  00090C                     u911:
   893  00090C  EF34  F005         	goto	l1469
   894  000910                     u910:
   895  000910                     
   896                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   897  000910  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   898  000914  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   899  000918  2ADE               	incf	postinc2,f,c
   900  00091A  0E00               	movlw	0
   901  00091C  22DD               	addwfc	postdec2,f,c
   902  00091E                     
   903                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   904  00091E  0E00               	movlw	0
   905  000920  0100               	movlb	0	; () banked
   906  000922  6F83               	movwf	(_width+1)& (0+255),b
   907  000924  0E00               	movlw	0
   908  000926  6F82               	movwf	_width& (0+255),b
   909  000928  C082  F07D         	movff	_width,_flags
   910  00092C  C083  F07E         	movff	_width+1,_flags+1
   911  000930                     
   912                           ; BSR set to: 0
   913                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   914  000930  687B               	setf	_prec^0,c
   915  000932  687C               	setf	(_prec+1)^0,c
   916  000934                     
   917                           ; BSR set to: 0
   918                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   919  000934  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   920  000938  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   921  00093C  CFDE FFF6          	movff	postinc2,tblptrl
   922  000940  CFDD FFF7          	movff	postdec2,tblptrh
   923  000944                     	if	0	;tblptru may be non-zero
   924  000944                     	endif
   925  000944                     	if	0	;tblptru may be non-zero
   926  000944                     	endif
   927  000944  0008               	tblrd		*
   928  000946  50F5               	movf	tablat,w,c
   929  000948  0A64               	xorlw	100
   930  00094A  B4D8               	btfsc	status,2,c
   931  00094C  EFAA  F004         	goto	u921
   932  000950  EFAC  F004         	goto	u920
   933  000954                     u921:
   934  000954  EFBE  F004         	goto	l1447
   935  000958                     u920:
   936  000958                     
   937                           ; BSR set to: 0
   938  000958  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   939  00095C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   940  000960  CFDE FFF6          	movff	postinc2,tblptrl
   941  000964  CFDD FFF7          	movff	postdec2,tblptrh
   942  000968                     	if	0	;tblptru may be non-zero
   943  000968                     	endif
   944  000968                     	if	0	;tblptru may be non-zero
   945  000968                     	endif
   946  000968  0008               	tblrd		*
   947  00096A  50F5               	movf	tablat,w,c
   948  00096C  0A69               	xorlw	105
   949  00096E  A4D8               	btfss	status,2,c
   950  000970  EFBC  F004         	goto	u931
   951  000974  EFBE  F004         	goto	u930
   952  000978                     u931:
   953  000978  EFFE  F004         	goto	l1453
   954  00097C                     u930:
   955  00097C                     l1447:
   956                           
   957                           ; BSR set to: 0
   958                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
   959  00097C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   960  000980  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   961  000984  2ADE               	incf	postinc2,f,c
   962  000986  0E00               	movlw	0
   963  000988  22DD               	addwfc	postdec2,f,c
   964                           
   965                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   966  00098A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   967  00098E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   968  000992  CFDF F046          	movff	indf2,??_vfpfcnvrt
   969  000996  0E02               	movlw	2
   970  000998  26DE               	addwf	postinc2,f,c
   971  00099A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   972  00099E  0E00               	movlw	0
   973  0009A0  22DD               	addwfc	postdec2,f,c
   974  0009A2  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   975  0009A6  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   976  0009AA  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   977  0009AE  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   978  0009B2  0E00               	movlw	0
   979  0009B4  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   980  0009B6  0EFF               	movlw	-1
   981  0009B8  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
   982  0009BA  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
   983  0009BC  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
   984  0009BE  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
   985  0009C0  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
   986  0009C2  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
   987  0009C4                     
   988                           ; BSR set to: 0
   989                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
   990  0009C4  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   991  0009C8  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   992  0009CC  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   993  0009D0  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   994  0009D4  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   995  0009D8  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   996  0009DC  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   997  0009E0  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   998  0009E4  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   999  0009E8  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1000  0009EC  EC07  F003         	call	_dtoa	;wreg free
  1001  0009F0  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1002  0009F4  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1003  0009F8  EF4F  F005         	goto	l822
  1004  0009FC                     l1453:
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1008  0009FC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1009  000A00  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1010  000A04  CFDE FFF6          	movff	postinc2,tblptrl
  1011  000A08  CFDD FFF7          	movff	postdec2,tblptrh
  1012  000A0C                     	if	0	;tblptru may be non-zero
  1013  000A0C                     	endif
  1014  000A0C                     	if	0	;tblptru may be non-zero
  1015  000A0C                     	endif
  1016  000A0C  0008               	tblrd		*
  1017  000A0E  50F5               	movf	tablat,w,c
  1018  000A10  0A25               	xorlw	37
  1019  000A12  A4D8               	btfss	status,2,c
  1020  000A14  EF0E  F005         	goto	u941
  1021  000A18  EF10  F005         	goto	u940
  1022  000A1C                     u941:
  1023  000A1C  EF27  F005         	goto	l1463
  1024  000A20                     u940:
  1025  000A20                     
  1026                           ; BSR set to: 0
  1027                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1028  000A20  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1029  000A24  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1030  000A28  2ADE               	incf	postinc2,f,c
  1031  000A2A  0E00               	movlw	0
  1032  000A2C  22DD               	addwfc	postdec2,f,c
  1033  000A2E                     
  1034                           ; BSR set to: 0
  1035                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1036  000A2E  0E00               	movlw	0
  1037  000A30  6E02               	movwf	(fputc@c+1)^0,c
  1038  000A32  0E25               	movlw	37
  1039  000A34  6E01               	movwf	fputc@c^0,c
  1040  000A36  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1041  000A3A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1042  000A3E  EC4B  F007         	call	_fputc	;wreg free
  1043  000A42                     l1459:
  1044                           
  1045                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1046  000A42  0E00               	movlw	0
  1047  000A44  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1048  000A46  0E01               	movlw	1
  1049  000A48  6E40               	movwf	?_vfpfcnvrt^0,c
  1050  000A4A  EF4F  F005         	goto	l822
  1051  000A4E                     l1463:
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1055  000A4E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1056  000A52  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1057  000A56  2ADE               	incf	postinc2,f,c
  1058  000A58  0E00               	movlw	0
  1059  000A5A  22DD               	addwfc	postdec2,f,c
  1060  000A5C                     
  1061                           ; BSR set to: 0
  1062                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1063  000A5C  0E00               	movlw	0
  1064  000A5E  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1065  000A60  0E00               	movlw	0
  1066  000A62  6E40               	movwf	?_vfpfcnvrt^0,c
  1067  000A64  EF4F  F005         	goto	l822
  1068  000A68                     l1469:
  1069                           
  1070                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1071  000A68  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1072  000A6C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1073  000A70  CFDE FFF6          	movff	postinc2,tblptrl
  1074  000A74  CFDD FFF7          	movff	postdec2,tblptrh
  1075  000A78                     	if	0	;tblptru may be non-zero
  1076  000A78                     	endif
  1077  000A78                     	if	0	;tblptru may be non-zero
  1078  000A78                     	endif
  1079  000A78  0008               	tblrd		*
  1080  000A7A  50F5               	movf	tablat,w,c
  1081  000A7C  6E01               	movwf	fputc@c^0,c
  1082  000A7E  6A02               	clrf	(fputc@c+1)^0,c
  1083  000A80  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1084  000A84  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1085  000A88  EC4B  F007         	call	_fputc	;wreg free
  1086  000A8C                     
  1087                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1088  000A8C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1089  000A90  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1090  000A94  2ADE               	incf	postinc2,f,c
  1091  000A96  0E00               	movlw	0
  1092  000A98  22DD               	addwfc	postdec2,f,c
  1093  000A9A  EF21  F005         	goto	l1459
  1094  000A9E                     l822:
  1095  000A9E  0012               	return		;funcret
  1096  000AA0                     __end_of_vfpfcnvrt:
  1097                           	callstack 0
  1098                           
  1099 ;; *************** function _dtoa *****************
  1100 ;; Defined at:
  1101 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1104 ;;		 -> sprintf@f(11), 
  1105 ;;  d               8   29[COMRAM] long long 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  n               8   53[COMRAM] long long 
  1108 ;;  i               2   61[COMRAM] int 
  1109 ;;  s               2   51[COMRAM] int 
  1110 ;;  w               2   49[COMRAM] int 
  1111 ;;  p               2   47[COMRAM] int 
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  2   27[COMRAM] int 
  1114 ;; Registers used:
  1115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1121 ;;      Params:        10       0       0       0       0       0       0
  1122 ;;      Locals:        18       0       0       0       0       0       0
  1123 ;;      Temps:          8       0       0       0       0       0       0
  1124 ;;      Totals:        36       0       0       0       0       0       0
  1125 ;;Total ram usage:       36 bytes
  1126 ;; Hardware stack levels used: 1
  1127 ;; Hardware stack levels required when called: 4
  1128 ;; This function calls:
  1129 ;;		___aodiv
  1130 ;;		___aomod
  1131 ;;		_abs
  1132 ;;		_pad
  1133 ;; This function is called by:
  1134 ;;		_vfpfcnvrt
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text4
  1139  00060E                     __ptext4:
  1140                           	callstack 0
  1141  00060E                     _dtoa:
  1142                           	callstack 23
  1143  00060E                     
  1144                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1145  00060E  C01E  F036         	movff	dtoa@d,dtoa@n
  1146  000612  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1147  000616  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1148  00061A  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1149  00061E  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1150  000622  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1151  000626  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1152  00062A  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1153  00062E                     
  1154                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1155  00062E  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1156  000630  EF1C  F003         	goto	u761
  1157  000634  EF1F  F003         	goto	u760
  1158  000638                     u761:
  1159  000638  0E01               	movlw	1
  1160  00063A  EF20  F003         	goto	u770
  1161  00063E                     u760:
  1162  00063E  0E00               	movlw	0
  1163  000640                     u770:
  1164  000640  6E34               	movwf	dtoa@s^0,c
  1165  000642  6A35               	clrf	(dtoa@s+1)^0,c
  1166                           
  1167                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1168  000644  5034               	movf	dtoa@s^0,w,c
  1169  000646  1035               	iorwf	(dtoa@s+1)^0,w,c
  1170  000648  B4D8               	btfsc	status,2,c
  1171  00064A  EF29  F003         	goto	u781
  1172  00064E  EF2B  F003         	goto	u780
  1173  000652                     u781:
  1174  000652  EF3B  F003         	goto	l1379
  1175  000656                     u780:
  1176  000656                     
  1177                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1178  000656  1E3D               	comf	(dtoa@n+7)^0,f,c
  1179  000658  1E3C               	comf	(dtoa@n+6)^0,f,c
  1180  00065A  1E3B               	comf	(dtoa@n+5)^0,f,c
  1181  00065C  1E3A               	comf	(dtoa@n+4)^0,f,c
  1182  00065E  1E39               	comf	(dtoa@n+3)^0,f,c
  1183  000660  1E38               	comf	(dtoa@n+2)^0,f,c
  1184  000662  1E37               	comf	(dtoa@n+1)^0,f,c
  1185  000664  6C36               	negf	dtoa@n^0,c
  1186  000666  0E00               	movlw	0
  1187  000668  2237               	addwfc	(dtoa@n+1)^0,f,c
  1188  00066A  2238               	addwfc	(dtoa@n+2)^0,f,c
  1189  00066C  2239               	addwfc	(dtoa@n+3)^0,f,c
  1190  00066E  223A               	addwfc	(dtoa@n+4)^0,f,c
  1191  000670  223B               	addwfc	(dtoa@n+5)^0,f,c
  1192  000672  223C               	addwfc	(dtoa@n+6)^0,f,c
  1193  000674  223D               	addwfc	(dtoa@n+7)^0,f,c
  1194  000676                     l1379:
  1195                           
  1196                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1197  000676  BE7C               	btfsc	(_prec+1)^0,7,c
  1198  000678  EF40  F003         	goto	u791
  1199  00067C  EF42  F003         	goto	u790
  1200  000680                     u791:
  1201  000680  EF43  F003         	goto	l1383
  1202  000684                     u790:
  1203  000684                     
  1204                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1205  000684  927D               	bcf	_flags^0,1,c
  1206  000686                     l1383:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1209  000686  BE7C               	btfsc	(_prec+1)^0,7,c
  1210  000688  EF50  F003         	goto	u800
  1211  00068C  507C               	movf	(_prec+1)^0,w,c
  1212  00068E  E106               	bnz	u801
  1213  000690  047B               	decf	_prec^0,w,c
  1214  000692  B0D8               	btfsc	status,0,c
  1215  000694  EF4E  F003         	goto	u801
  1216  000698  EF50  F003         	goto	u800
  1217  00069C                     u801:
  1218  00069C  EF56  F003         	goto	l795
  1219  0006A0                     u800:
  1220  0006A0  0E00               	movlw	0
  1221  0006A2  6E31               	movwf	(dtoa@p+1)^0,c
  1222  0006A4  0E01               	movlw	1
  1223  0006A6  6E30               	movwf	dtoa@p^0,c
  1224  0006A8  EF5A  F003         	goto	l797
  1225  0006AC                     l795:
  1226  0006AC  C07B  F030         	movff	_prec,dtoa@p
  1227  0006B0  C07C  F031         	movff	_prec+1,dtoa@p+1
  1228  0006B4                     l797:
  1229                           
  1230                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1231  0006B4  C082  F032         	movff	_width,dtoa@w
  1232  0006B8  C083  F033         	movff	_width+1,dtoa@w+1
  1233  0006BC                     
  1234                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1235  0006BC  5034               	movf	dtoa@s^0,w,c
  1236  0006BE  1035               	iorwf	(dtoa@s+1)^0,w,c
  1237  0006C0  A4D8               	btfss	status,2,c
  1238  0006C2  EF65  F003         	goto	u811
  1239  0006C6  EF67  F003         	goto	u810
  1240  0006CA                     u811:
  1241  0006CA  EF6E  F003         	goto	l1391
  1242  0006CE                     u810:
  1243  0006CE  A47D               	btfss	_flags^0,2,c
  1244  0006D0  EF6C  F003         	goto	u821
  1245  0006D4  EF6E  F003         	goto	u820
  1246  0006D8                     u821:
  1247  0006D8  EF71  F003         	goto	l1393
  1248  0006DC                     u820:
  1249  0006DC                     l1391:
  1250                           
  1251                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 306:         --w;
  1252  0006DC  0632               	decf	dtoa@w^0,f,c
  1253  0006DE  A0D8               	btfss	status,0,c
  1254  0006E0  0633               	decf	(dtoa@w+1)^0,f,c
  1255  0006E2                     l1393:
  1256                           
  1257                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1258  0006E2  0E00               	movlw	0
  1259  0006E4  6E3F               	movwf	(dtoa@i+1)^0,c
  1260  0006E6  0E1F               	movlw	31
  1261  0006E8  6E3E               	movwf	dtoa@i^0,c
  1262  0006EA                     
  1263                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1264  0006EA  0E00               	movlw	0
  1265  0006EC  0100               	movlb	0	; () banked
  1266  0006EE  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1267                           
  1268                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1269  0006F0  EFF6  F003         	goto	l1407
  1270  0006F4                     l1397:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 313:         --i;
  1273  0006F4  063E               	decf	dtoa@i^0,f,c
  1274  0006F6  A0D8               	btfss	status,0,c
  1275  0006F8  063F               	decf	(dtoa@i+1)^0,f,c
  1276  0006FA                     
  1277                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1278  0006FA  0E84               	movlw	low _dbuf
  1279  0006FC  243E               	addwf	dtoa@i^0,w,c
  1280  0006FE  6ED9               	movwf	fsr2l,c
  1281  000700  0E00               	movlw	high _dbuf
  1282  000702  203F               	addwfc	(dtoa@i+1)^0,w,c
  1283  000704  6EDA               	movwf	fsr2h,c
  1284  000706  C036  F001         	movff	dtoa@n,___aomod@dividend
  1285  00070A  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1286  00070E  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1287  000712  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1288  000716  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1289  00071A  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1290  00071E  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1291  000722  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1292  000726  0E0A               	movlw	10
  1293  000728  6E09               	movwf	___aomod@divisor^0,c
  1294  00072A  0E00               	movlw	0
  1295  00072C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1296  00072E  0E00               	movlw	0
  1297  000730  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1298  000732  0E00               	movlw	0
  1299  000734  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1300  000736  0E00               	movlw	0
  1301  000738  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1302  00073A  0E00               	movlw	0
  1303  00073C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1304  00073E  0E00               	movlw	0
  1305  000740  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1306  000742  0E00               	movlw	0
  1307  000744  6E10               	movwf	(___aomod@divisor+7)^0,c
  1308  000746  EC14  F006         	call	___aomod	;wreg free
  1309  00074A  C001  F026         	movff	?___aomod,??_dtoa
  1310  00074E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1311  000752  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1312  000756  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1313  00075A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1314  00075E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1315  000762  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1316  000766  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1317  00076A  C026  F013         	movff	??_dtoa,abs@a
  1318  00076E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1319  000772  ECBA  F008         	call	_abs	;wreg free
  1320  000776  5013               	movf	?_abs^0,w,c
  1321  000778  0F30               	addlw	48
  1322  00077A  6EDF               	movwf	indf2,c
  1323  00077C                     
  1324                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 315:         --p;
  1325  00077C  0630               	decf	dtoa@p^0,f,c
  1326  00077E  A0D8               	btfss	status,0,c
  1327  000780  0631               	decf	(dtoa@p+1)^0,f,c
  1328  000782                     
  1329                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 316:         --w;
  1330  000782  0632               	decf	dtoa@w^0,f,c
  1331  000784  A0D8               	btfss	status,0,c
  1332  000786  0633               	decf	(dtoa@w+1)^0,f,c
  1333  000788                     
  1334                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1335  000788  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1336  00078C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1337  000790  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1338  000794  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1339  000798  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1340  00079C  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1341  0007A0  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1342  0007A4  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1343  0007A8  0E0A               	movlw	10
  1344  0007AA  6E09               	movwf	___aodiv@divisor^0,c
  1345  0007AC  0E00               	movlw	0
  1346  0007AE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1347  0007B0  0E00               	movlw	0
  1348  0007B2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1349  0007B4  0E00               	movlw	0
  1350  0007B6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1351  0007B8  0E00               	movlw	0
  1352  0007BA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1353  0007BC  0E00               	movlw	0
  1354  0007BE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1355  0007C0  0E00               	movlw	0
  1356  0007C2  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1357  0007C4  0E00               	movlw	0
  1358  0007C6  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1359  0007C8  EC50  F005         	call	___aodiv	;wreg free
  1360  0007CC  C001  F036         	movff	?___aodiv,dtoa@n
  1361  0007D0  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1362  0007D4  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1363  0007D8  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1364  0007DC  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1365  0007E0  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1366  0007E4  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1367  0007E8  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1368  0007EC                     l1407:
  1369                           
  1370                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1371  0007EC  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1372  0007EE  EF01  F004         	goto	u831
  1373  0007F2  503F               	movf	(dtoa@i+1)^0,w,c
  1374  0007F4  E108               	bnz	u830
  1375  0007F6  043E               	decf	dtoa@i^0,w,c
  1376  0007F8  A0D8               	btfss	status,0,c
  1377  0007FA  EF01  F004         	goto	u831
  1378  0007FE  EF03  F004         	goto	u830
  1379  000802                     u831:
  1380  000802  EF33  F004         	goto	l1417
  1381  000806                     u830:
  1382  000806  5036               	movf	dtoa@n^0,w,c
  1383  000808  1037               	iorwf	(dtoa@n+1)^0,w,c
  1384  00080A  1038               	iorwf	(dtoa@n+2)^0,w,c
  1385  00080C  1039               	iorwf	(dtoa@n+3)^0,w,c
  1386  00080E  103A               	iorwf	(dtoa@n+4)^0,w,c
  1387  000810  103B               	iorwf	(dtoa@n+5)^0,w,c
  1388  000812  103C               	iorwf	(dtoa@n+6)^0,w,c
  1389  000814  103D               	iorwf	(dtoa@n+7)^0,w,c
  1390  000816  A4D8               	btfss	status,2,c
  1391  000818  EF10  F004         	goto	u841
  1392  00081C  EF12  F004         	goto	u840
  1393  000820                     u841:
  1394  000820  EF7A  F003         	goto	l1397
  1395  000824                     u840:
  1396  000824  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1397  000826  EF1F  F004         	goto	u850
  1398  00082A  5031               	movf	(dtoa@p+1)^0,w,c
  1399  00082C  E106               	bnz	u851
  1400  00082E  0430               	decf	dtoa@p^0,w,c
  1401  000830  B0D8               	btfsc	status,0,c
  1402  000832  EF1D  F004         	goto	u851
  1403  000836  EF1F  F004         	goto	u850
  1404  00083A                     u851:
  1405  00083A  EF7A  F003         	goto	l1397
  1406  00083E                     u850:
  1407  00083E  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1408  000840  EF2A  F004         	goto	u861
  1409  000844  5033               	movf	(dtoa@w+1)^0,w,c
  1410  000846  E108               	bnz	u860
  1411  000848  0432               	decf	dtoa@w^0,w,c
  1412  00084A  A0D8               	btfss	status,0,c
  1413  00084C  EF2A  F004         	goto	u861
  1414  000850  EF2C  F004         	goto	u860
  1415  000854                     u861:
  1416  000854  EF33  F004         	goto	l1417
  1417  000858                     u860:
  1418  000858  B27D               	btfsc	_flags^0,1,c
  1419  00085A  EF31  F004         	goto	u871
  1420  00085E  EF33  F004         	goto	u870
  1421  000862                     u871:
  1422  000862  EF7A  F003         	goto	l1397
  1423  000866                     u870:
  1424  000866                     l1417:
  1425                           
  1426                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1427  000866  5034               	movf	dtoa@s^0,w,c
  1428  000868  1035               	iorwf	(dtoa@s+1)^0,w,c
  1429  00086A  A4D8               	btfss	status,2,c
  1430  00086C  EF3A  F004         	goto	u881
  1431  000870  EF3C  F004         	goto	u880
  1432  000874                     u881:
  1433  000874  EF43  F004         	goto	l1421
  1434  000878                     u880:
  1435  000878  A47D               	btfss	_flags^0,2,c
  1436  00087A  EF41  F004         	goto	u891
  1437  00087E  EF43  F004         	goto	u890
  1438  000882                     u891:
  1439  000882  EF61  F004         	goto	l1431
  1440  000886                     u890:
  1441  000886                     l1421:
  1442                           
  1443                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 322:         --i;
  1444  000886  063E               	decf	dtoa@i^0,f,c
  1445  000888  A0D8               	btfss	status,0,c
  1446  00088A  063F               	decf	(dtoa@i+1)^0,f,c
  1447  00088C                     
  1448                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1449  00088C  5034               	movf	dtoa@s^0,w,c
  1450  00088E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1451  000890  A4D8               	btfss	status,2,c
  1452  000892  EF4D  F004         	goto	u901
  1453  000896  EF4F  F004         	goto	u900
  1454  00089A                     u901:
  1455  00089A  EF55  F004         	goto	l1427
  1456  00089E                     u900:
  1457  00089E  0E00               	movlw	0
  1458  0008A0  6E2F               	movwf	(_dtoa$683+1)^0,c
  1459  0008A2  0E2B               	movlw	43
  1460  0008A4  6E2E               	movwf	_dtoa$683^0,c
  1461  0008A6  EF59  F004         	goto	l1429
  1462  0008AA                     l1427:
  1463  0008AA  0E00               	movlw	0
  1464  0008AC  6E2F               	movwf	(_dtoa$683+1)^0,c
  1465  0008AE  0E2D               	movlw	45
  1466  0008B0  6E2E               	movwf	_dtoa$683^0,c
  1467  0008B2                     l1429:
  1468  0008B2  0E84               	movlw	low _dbuf
  1469  0008B4  243E               	addwf	dtoa@i^0,w,c
  1470  0008B6  6ED9               	movwf	fsr2l,c
  1471  0008B8  0E00               	movlw	high _dbuf
  1472  0008BA  203F               	addwfc	(dtoa@i+1)^0,w,c
  1473  0008BC  6EDA               	movwf	fsr2h,c
  1474  0008BE  C02E  FFDF         	movff	_dtoa$683,indf2
  1475  0008C2                     l1431:
  1476                           
  1477                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1478  0008C2  C01C  F011         	movff	dtoa@fp,pad@fp
  1479  0008C6  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1480  0008CA  0E84               	movlw	low _dbuf
  1481  0008CC  243E               	addwf	dtoa@i^0,w,c
  1482  0008CE  6E13               	movwf	pad@buf^0,c
  1483  0008D0  0E00               	movlw	high _dbuf
  1484  0008D2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1485  0008D4  6E14               	movwf	(pad@buf+1)^0,c
  1486  0008D6  C032  F015         	movff	dtoa@w,pad@p
  1487  0008DA  C033  F016         	movff	dtoa@w+1,pad@p+1
  1488  0008DE  ECB0  F007         	call	_pad	;wreg free
  1489  0008E2  C011  F01C         	movff	?_pad,?_dtoa
  1490  0008E6  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1491  0008EA  0012               	return		;funcret
  1492  0008EC                     __end_of_dtoa:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _pad *****************
  1496 ;; Defined at:
  1497 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1500 ;;		 -> sprintf@f(11), 
  1501 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1502 ;;		 -> dbuf(32), 
  1503 ;;  p               2   20[COMRAM] int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;  w               2   25[COMRAM] int 
  1506 ;;  i               2   23[COMRAM] int 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  2   16[COMRAM] int 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1516 ;;      Params:         6       0       0       0       0       0       0
  1517 ;;      Locals:         4       0       0       0       0       0       0
  1518 ;;      Temps:          1       0       0       0       0       0       0
  1519 ;;      Totals:        11       0       0       0       0       0       0
  1520 ;;Total ram usage:       11 bytes
  1521 ;; Hardware stack levels used: 1
  1522 ;; Hardware stack levels required when called: 3
  1523 ;; This function calls:
  1524 ;;		_fputc
  1525 ;;		_fputs
  1526 ;;		_strlen
  1527 ;; This function is called by:
  1528 ;;		_dtoa
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text5
  1533  000F60                     __ptext5:
  1534                           	callstack 0
  1535  000F60                     _pad:
  1536                           	callstack 23
  1537  000F60                     
  1538                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1539  000F60  A07D               	btfss	_flags^0,0,c
  1540  000F62  EFB5  F007         	goto	u711
  1541  000F66  EFB7  F007         	goto	u710
  1542  000F6A                     u711:
  1543  000F6A  EFC1  F007         	goto	l1351
  1544  000F6E                     u710:
  1545  000F6E                     
  1546                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1547  000F6E  C013  F00A         	movff	pad@buf,fputs@s
  1548  000F72  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1549  000F76  C011  F00C         	movff	pad@fp,fputs@fp
  1550  000F7A  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1551  000F7E  EC98  F008         	call	_fputs	;wreg free
  1552  000F82                     l1351:
  1553                           
  1554                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1555  000F82  BE16               	btfsc	(pad@p+1)^0,7,c
  1556  000F84  EFC6  F007         	goto	u721
  1557  000F88  EFC8  F007         	goto	u720
  1558  000F8C                     u721:
  1559  000F8C  EFCE  F007         	goto	l1355
  1560  000F90                     u720:
  1561  000F90  C015  F01A         	movff	pad@p,pad@w
  1562  000F94  C016  F01B         	movff	pad@p+1,pad@w+1
  1563  000F98  EFD2  F007         	goto	l784
  1564  000F9C                     l1355:
  1565  000F9C  0E00               	movlw	0
  1566  000F9E  6E1B               	movwf	(pad@w+1)^0,c
  1567  000FA0  0E00               	movlw	0
  1568  000FA2  6E1A               	movwf	pad@w^0,c
  1569  000FA4                     l784:
  1570                           
  1571                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1572  000FA4  0E00               	movlw	0
  1573  000FA6  6E19               	movwf	(pad@i+1)^0,c
  1574  000FA8  0E00               	movlw	0
  1575  000FAA  6E18               	movwf	pad@i^0,c
  1576                           
  1577                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1578  000FAC  EFE4  F007         	goto	l1361
  1579  000FB0                     l1357:
  1580                           
  1581                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1582  000FB0  0E00               	movlw	0
  1583  000FB2  6E02               	movwf	(fputc@c+1)^0,c
  1584  000FB4  0E20               	movlw	32
  1585  000FB6  6E01               	movwf	fputc@c^0,c
  1586  000FB8  C011  F003         	movff	pad@fp,fputc@fp
  1587  000FBC  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1588  000FC0  EC4B  F007         	call	_fputc	;wreg free
  1589  000FC4                     
  1590                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1591  000FC4  4A18               	infsnz	pad@i^0,f,c
  1592  000FC6  2A19               	incf	(pad@i+1)^0,f,c
  1593  000FC8                     l1361:
  1594                           
  1595                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1596  000FC8  501A               	movf	pad@w^0,w,c
  1597  000FCA  5C18               	subwf	pad@i^0,w,c
  1598  000FCC  5019               	movf	(pad@i+1)^0,w,c
  1599  000FCE  0A80               	xorlw	128
  1600  000FD0  6E17               	movwf	??_pad^0,c
  1601  000FD2  501B               	movf	(pad@w+1)^0,w,c
  1602  000FD4  0A80               	xorlw	128
  1603  000FD6  5817               	subwfb	??_pad^0,w,c
  1604  000FD8  A0D8               	btfss	status,0,c
  1605  000FDA  EFF1  F007         	goto	u731
  1606  000FDE  EFF3  F007         	goto	u730
  1607  000FE2                     u731:
  1608  000FE2  EFD8  F007         	goto	l1357
  1609  000FE6                     u730:
  1610  000FE6                     
  1611                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1612  000FE6  B07D               	btfsc	_flags^0,0,c
  1613  000FE8  EFF8  F007         	goto	u741
  1614  000FEC  EFFA  F007         	goto	u740
  1615  000FF0                     u741:
  1616  000FF0  EF04  F008         	goto	l1365
  1617  000FF4                     u740:
  1618  000FF4                     
  1619                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1620  000FF4  C013  F00A         	movff	pad@buf,fputs@s
  1621  000FF8  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1622  000FFC  C011  F00C         	movff	pad@fp,fputs@fp
  1623  001000  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1624  001004  EC98  F008         	call	_fputs	;wreg free
  1625  001008                     l1365:
  1626                           
  1627                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1628  001008  C013  F001         	movff	pad@buf,strlen@s
  1629  00100C  C014  F002         	movff	pad@buf+1,strlen@s+1
  1630  001010  ECFA  F008         	call	_strlen	;wreg free
  1631  001014  501A               	movf	pad@w^0,w,c
  1632  001016  2401               	addwf	?_strlen^0,w,c
  1633  001018  6E11               	movwf	?_pad^0,c
  1634  00101A  501B               	movf	(pad@w+1)^0,w,c
  1635  00101C  2002               	addwfc	(?_strlen+1)^0,w,c
  1636  00101E  6E12               	movwf	(?_pad+1)^0,c
  1637  001020  0012               	return		;funcret
  1638  001022                     __end_of_pad:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _strlen *****************
  1642 ;; Defined at:
  1643 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\strlen.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1646 ;;		 -> dbuf(32), 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1649 ;;		 -> dbuf(32), 
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  2    0[COMRAM] unsigned int 
  1652 ;; Registers used:
  1653 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1659 ;;      Params:         2       0       0       0       0       0       0
  1660 ;;      Locals:         2       0       0       0       0       0       0
  1661 ;;      Temps:          0       0       0       0       0       0       0
  1662 ;;      Totals:         4       0       0       0       0       0       0
  1663 ;;Total ram usage:        4 bytes
  1664 ;; Hardware stack levels used: 1
  1665 ;; This function calls:
  1666 ;;		Nothing
  1667 ;; This function is called by:
  1668 ;;		_pad
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text6
  1673  0011F4                     __ptext6:
  1674                           	callstack 0
  1675  0011F4                     _strlen:
  1676                           	callstack 25
  1677  0011F4  C001  F003         	movff	strlen@s,strlen@a
  1678  0011F8  C002  F004         	movff	strlen@s+1,strlen@a+1
  1679  0011FC  EF02  F009         	goto	l1261
  1680  001200                     l1259:
  1681  001200  4A01               	infsnz	strlen@s^0,f,c
  1682  001202  2A02               	incf	(strlen@s+1)^0,f,c
  1683  001204                     l1261:
  1684  001204  C001  FFD9         	movff	strlen@s,fsr2l
  1685  001208  C002  FFDA         	movff	strlen@s+1,fsr2h
  1686  00120C  50DF               	movf	indf2,w,c
  1687  00120E  A4D8               	btfss	status,2,c
  1688  001210  EF0C  F009         	goto	u571
  1689  001214  EF0E  F009         	goto	u570
  1690  001218                     u571:
  1691  001218  EF00  F009         	goto	l1259
  1692  00121C                     u570:
  1693  00121C  5003               	movf	strlen@a^0,w,c
  1694  00121E  5C01               	subwf	strlen@s^0,w,c
  1695  001220  6E01               	movwf	?_strlen^0,c
  1696  001222  5004               	movf	(strlen@a+1)^0,w,c
  1697  001224  5802               	subwfb	(strlen@s+1)^0,w,c
  1698  001226  6E02               	movwf	(?_strlen+1)^0,c
  1699  001228  0012               	return		;funcret
  1700  00122A                     __end_of_strlen:
  1701                           	callstack 0
  1702                           
  1703 ;; *************** function _fputs *****************
  1704 ;; Defined at:
  1705 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputs.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1708 ;;		 -> dbuf(32), 
  1709 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1710 ;;		 -> sprintf@f(11), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  i               2   14[COMRAM] int 
  1713 ;;  c               1   13[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2    9[COMRAM] int 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1723 ;;      Params:         4       0       0       0       0       0       0
  1724 ;;      Locals:         3       0       0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0
  1726 ;;      Totals:         7       0       0       0       0       0       0
  1727 ;;Total ram usage:        7 bytes
  1728 ;; Hardware stack levels used: 1
  1729 ;; Hardware stack levels required when called: 2
  1730 ;; This function calls:
  1731 ;;		_fputc
  1732 ;; This function is called by:
  1733 ;;		_pad
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text7
  1738  001130                     __ptext7:
  1739                           	callstack 0
  1740  001130                     _fputs:
  1741                           	callstack 23
  1742  001130  0E00               	movlw	0
  1743  001132  6E10               	movwf	(fputs@i+1)^0,c
  1744  001134  0E00               	movlw	0
  1745  001136  6E0F               	movwf	fputs@i^0,c
  1746  001138  EFA9  F008         	goto	l1255
  1747  00113C                     l1251:
  1748  00113C  C00E  F001         	movff	fputs@c,fputc@c
  1749  001140  6A02               	clrf	(fputc@c+1)^0,c
  1750  001142  C00C  F003         	movff	fputs@fp,fputc@fp
  1751  001146  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1752  00114A  EC4B  F007         	call	_fputc	;wreg free
  1753  00114E  4A0F               	infsnz	fputs@i^0,f,c
  1754  001150  2A10               	incf	(fputs@i+1)^0,f,c
  1755  001152                     l1255:
  1756  001152  500F               	movf	fputs@i^0,w,c
  1757  001154  240A               	addwf	fputs@s^0,w,c
  1758  001156  6ED9               	movwf	fsr2l,c
  1759  001158  5010               	movf	(fputs@i+1)^0,w,c
  1760  00115A  200B               	addwfc	(fputs@s+1)^0,w,c
  1761  00115C  6EDA               	movwf	fsr2h,c
  1762  00115E  50DF               	movf	indf2,w,c
  1763  001160  6E0E               	movwf	fputs@c^0,c
  1764  001162  500E               	movf	fputs@c^0,w,c
  1765  001164  A4D8               	btfss	status,2,c
  1766  001166  EFB7  F008         	goto	u561
  1767  00116A  EFB9  F008         	goto	u560
  1768  00116E                     u561:
  1769  00116E  EF9E  F008         	goto	l1251
  1770  001172                     u560:
  1771  001172  0012               	return		;funcret
  1772  001174                     __end_of_fputs:
  1773                           	callstack 0
  1774                           
  1775 ;; *************** function _fputc *****************
  1776 ;; Defined at:
  1777 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputc.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  c               2    0[COMRAM] int 
  1780 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1781 ;;		 -> sprintf@f(11), 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  2    0[COMRAM] int 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1793 ;;      Params:         4       0       0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0
  1795 ;;      Temps:          5       0       0       0       0       0       0
  1796 ;;      Totals:         9       0       0       0       0       0       0
  1797 ;;Total ram usage:        9 bytes
  1798 ;; Hardware stack levels used: 1
  1799 ;; Hardware stack levels required when called: 1
  1800 ;; This function calls:
  1801 ;;		_putch
  1802 ;; This function is called by:
  1803 ;;		_pad
  1804 ;;		_vfpfcnvrt
  1805 ;;		_fputs
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text8
  1810  000E96                     __ptext8:
  1811                           	callstack 0
  1812  000E96                     _fputc:
  1813                           	callstack 26
  1814  000E96  5003               	movf	fputc@fp^0,w,c
  1815  000E98  1004               	iorwf	(fputc@fp+1)^0,w,c
  1816  000E9A  B4D8               	btfsc	status,2,c
  1817  000E9C  EF52  F007         	goto	u521
  1818  000EA0  EF54  F007         	goto	u520
  1819  000EA4                     u521:
  1820  000EA4  EF5D  F007         	goto	l1239
  1821  000EA8                     u520:
  1822  000EA8  5003               	movf	fputc@fp^0,w,c
  1823  000EAA  1004               	iorwf	(fputc@fp+1)^0,w,c
  1824  000EAC  A4D8               	btfss	status,2,c
  1825  000EAE  EF5B  F007         	goto	u531
  1826  000EB2  EF5D  F007         	goto	u530
  1827  000EB6                     u531:
  1828  000EB6  EF62  F007         	goto	l1241
  1829  000EBA                     u530:
  1830  000EBA                     l1239:
  1831  000EBA  5001               	movf	fputc@c^0,w,c
  1832  000EBC  EC57  F009         	call	_putch
  1833  000EC0  EFAF  F007         	goto	l848
  1834  000EC4                     l1241:
  1835  000EC4  EE20 F009          	lfsr	2,9
  1836  000EC8  5003               	movf	fputc@fp^0,w,c
  1837  000ECA  26D9               	addwf	fsr2l,f,c
  1838  000ECC  5004               	movf	(fputc@fp+1)^0,w,c
  1839  000ECE  22DA               	addwfc	fsr2h,f,c
  1840  000ED0  50DE               	movf	postinc2,w,c
  1841  000ED2  10DE               	iorwf	postinc2,w,c
  1842  000ED4  B4D8               	btfsc	status,2,c
  1843  000ED6  EF6F  F007         	goto	u541
  1844  000EDA  EF71  F007         	goto	u540
  1845  000EDE                     u541:
  1846  000EDE  EF8C  F007         	goto	l1245
  1847  000EE2                     u540:
  1848  000EE2  EE20 F009          	lfsr	2,9
  1849  000EE6  5003               	movf	fputc@fp^0,w,c
  1850  000EE8  26D9               	addwf	fsr2l,f,c
  1851  000EEA  5004               	movf	(fputc@fp+1)^0,w,c
  1852  000EEC  22DA               	addwfc	fsr2h,f,c
  1853  000EEE  EE10 F003          	lfsr	1,3
  1854  000EF2  5003               	movf	fputc@fp^0,w,c
  1855  000EF4  26E1               	addwf	fsr1l,f,c
  1856  000EF6  5004               	movf	(fputc@fp+1)^0,w,c
  1857  000EF8  22E2               	addwfc	fsr1h,f,c
  1858  000EFA  50DE               	movf	postinc2,w,c
  1859  000EFC  5CE6               	subwf	postinc1,w,c
  1860  000EFE  50E6               	movf	postinc1,w,c
  1861  000F00  0A80               	xorlw	128
  1862  000F02  6E09               	movwf	(??_fputc+4)^0,c
  1863  000F04  50DE               	movf	postinc2,w,c
  1864  000F06  0A80               	xorlw	128
  1865  000F08  5809               	subwfb	(??_fputc+4)^0,w,c
  1866  000F0A  B0D8               	btfsc	status,0,c
  1867  000F0C  EF8A  F007         	goto	u551
  1868  000F10  EF8C  F007         	goto	u550
  1869  000F14                     u551:
  1870  000F14  EFAF  F007         	goto	l848
  1871  000F18                     u550:
  1872  000F18                     l1245:
  1873  000F18  EE20 F003          	lfsr	2,3
  1874  000F1C  5003               	movf	fputc@fp^0,w,c
  1875  000F1E  26D9               	addwf	fsr2l,f,c
  1876  000F20  5004               	movf	(fputc@fp+1)^0,w,c
  1877  000F22  22DA               	addwfc	fsr2h,f,c
  1878  000F24  CFDE F005          	movff	postinc2,??_fputc
  1879  000F28  CFDD F006          	movff	postdec2,??_fputc+1
  1880  000F2C  C003  FFD9         	movff	fputc@fp,fsr2l
  1881  000F30  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1882  000F34  CFDE F007          	movff	postinc2,??_fputc+2
  1883  000F38  CFDD F008          	movff	postdec2,??_fputc+3
  1884  000F3C  5005               	movf	??_fputc^0,w,c
  1885  000F3E  2407               	addwf	(??_fputc+2)^0,w,c
  1886  000F40  6ED9               	movwf	fsr2l,c
  1887  000F42  5006               	movf	(??_fputc+1)^0,w,c
  1888  000F44  2008               	addwfc	(??_fputc+3)^0,w,c
  1889  000F46  6EDA               	movwf	fsr2h,c
  1890  000F48  C001  FFDF         	movff	fputc@c,indf2
  1891  000F4C  EE20 F003          	lfsr	2,3
  1892  000F50  5003               	movf	fputc@fp^0,w,c
  1893  000F52  26D9               	addwf	fsr2l,f,c
  1894  000F54  5004               	movf	(fputc@fp+1)^0,w,c
  1895  000F56  22DA               	addwfc	fsr2h,f,c
  1896  000F58  2ADE               	incf	postinc2,f,c
  1897  000F5A  0E00               	movlw	0
  1898  000F5C  22DD               	addwfc	postdec2,f,c
  1899  000F5E                     l848:
  1900  000F5E  0012               	return		;funcret
  1901  000F60                     __end_of_fputc:
  1902                           	callstack 0
  1903                           
  1904 ;; *************** function _putch *****************
  1905 ;; Defined at:
  1906 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\putch.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  c               1    wreg     unsigned char 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  c               1    0[COMRAM] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1920 ;;      Params:         0       0       0       0       0       0       0
  1921 ;;      Locals:         0       0       0       0       0       0       0
  1922 ;;      Temps:          0       0       0       0       0       0       0
  1923 ;;      Totals:         0       0       0       0       0       0       0
  1924 ;;Total ram usage:        0 bytes
  1925 ;; Hardware stack levels used: 1
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_fputc
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text9
  1934  0012AE                     __ptext9:
  1935                           	callstack 0
  1936  0012AE                     _putch:
  1937                           	callstack 26
  1938  0012AE  0012               	return		;funcret
  1939  0012B0                     __end_of_putch:
  1940                           	callstack 0
  1941                           
  1942 ;; *************** function _abs *****************
  1943 ;; Defined at:
  1944 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\abs.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  a               2   18[COMRAM] int 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2   18[COMRAM] int 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1958 ;;      Params:         2       0       0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0
  1960 ;;      Temps:          2       0       0       0       0       0       0
  1961 ;;      Totals:         4       0       0       0       0       0       0
  1962 ;;Total ram usage:        4 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; This function calls:
  1965 ;;		Nothing
  1966 ;; This function is called by:
  1967 ;;		_dtoa
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text10
  1972  001174                     __ptext10:
  1973                           	callstack 0
  1974  001174                     _abs:
  1975                           	callstack 26
  1976  001174  BE14               	btfsc	(abs@a+1)^0,7,c
  1977  001176  EFC7  F008         	goto	u750
  1978  00117A  5014               	movf	(abs@a+1)^0,w,c
  1979  00117C  E106               	bnz	u751
  1980  00117E  0413               	decf	abs@a^0,w,c
  1981  001180  B0D8               	btfsc	status,0,c
  1982  001182  EFC5  F008         	goto	u751
  1983  001186  EFC7  F008         	goto	u750
  1984  00118A                     u751:
  1985  00118A  EFD5  F008         	goto	l833
  1986  00118E                     u750:
  1987  00118E  C013  F015         	movff	abs@a,??_abs
  1988  001192  C014  F016         	movff	abs@a+1,??_abs+1
  1989  001196  1E15               	comf	??_abs^0,f,c
  1990  001198  1E16               	comf	(??_abs+1)^0,f,c
  1991  00119A  4A15               	infsnz	??_abs^0,f,c
  1992  00119C  2A16               	incf	(??_abs+1)^0,f,c
  1993  00119E  C015  F013         	movff	??_abs,?_abs
  1994  0011A2  C016  F014         	movff	??_abs+1,?_abs+1
  1995  0011A6  EFD9  F008         	goto	l836
  1996  0011AA                     l833:
  1997  0011AA  C013  F013         	movff	abs@a,?_abs
  1998  0011AE  C014  F014         	movff	abs@a+1,?_abs+1
  1999  0011B2                     l836:
  2000  0011B2  0012               	return		;funcret
  2001  0011B4                     __end_of_abs:
  2002                           	callstack 0
  2003                           
  2004 ;; *************** function ___aomod *****************
  2005 ;; Defined at:
  2006 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aomod.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  dividend        8    0[COMRAM] long long 
  2009 ;;  divisor         8    8[COMRAM] long long 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  sign            1   17[COMRAM] unsigned char 
  2012 ;;  counter         1   16[COMRAM] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  8    0[COMRAM] long long 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:        16       0       0       0       0       0       0
  2023 ;;      Locals:         2       0       0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0
  2025 ;;      Totals:        18       0       0       0       0       0       0
  2026 ;;Total ram usage:       18 bytes
  2027 ;; Hardware stack levels used: 1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_dtoa
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text11
  2036  000C28                     __ptext11:
  2037                           	callstack 0
  2038  000C28                     ___aomod:
  2039                           	callstack 26
  2040  000C28  0E00               	movlw	0
  2041  000C2A  6E12               	movwf	___aomod@sign^0,c
  2042  000C2C  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2043  000C2E  EF1D  F006         	goto	u650
  2044  000C32  EF1B  F006         	goto	u651
  2045  000C36                     u651:
  2046  000C36  EF2F  F006         	goto	l1319
  2047  000C3A                     u650:
  2048  000C3A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2049  000C3C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2050  000C3E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2051  000C40  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2052  000C42  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2053  000C44  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2054  000C46  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2055  000C48  6C01               	negf	___aomod@dividend^0,c
  2056  000C4A  0E00               	movlw	0
  2057  000C4C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2058  000C4E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2059  000C50  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2060  000C52  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2061  000C54  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2062  000C56  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2063  000C58  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2064  000C5A  0E01               	movlw	1
  2065  000C5C  6E12               	movwf	___aomod@sign^0,c
  2066  000C5E                     l1319:
  2067  000C5E  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2068  000C60  EF36  F006         	goto	u660
  2069  000C64  EF34  F006         	goto	u661
  2070  000C68                     u661:
  2071  000C68  EF46  F006         	goto	l1323
  2072  000C6C                     u660:
  2073  000C6C  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2074  000C6E  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2075  000C70  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2076  000C72  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2077  000C74  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2078  000C76  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2079  000C78  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2080  000C7A  6C09               	negf	___aomod@divisor^0,c
  2081  000C7C  0E00               	movlw	0
  2082  000C7E  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2083  000C80  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2084  000C82  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2085  000C84  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2086  000C86  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2087  000C88  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2088  000C8A  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2089  000C8C                     l1323:
  2090  000C8C  5009               	movf	___aomod@divisor^0,w,c
  2091  000C8E  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2092  000C90  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2093  000C92  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2094  000C94  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2095  000C96  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2096  000C98  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2097  000C9A  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2098  000C9C  B4D8               	btfsc	status,2,c
  2099  000C9E  EF53  F006         	goto	u671
  2100  000CA2  EF55  F006         	goto	u670
  2101  000CA6                     u671:
  2102  000CA6  EF9D  F006         	goto	l1339
  2103  000CAA                     u670:
  2104  000CAA  0E01               	movlw	1
  2105  000CAC  6E11               	movwf	___aomod@counter^0,c
  2106  000CAE  EF63  F006         	goto	l1329
  2107  000CB2                     l1327:
  2108  000CB2  90D8               	bcf	status,0,c
  2109  000CB4  3609               	rlcf	___aomod@divisor^0,f,c
  2110  000CB6  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2111  000CB8  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2112  000CBA  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2113  000CBC  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2114  000CBE  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2115  000CC0  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2116  000CC2  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2117  000CC4  2A11               	incf	___aomod@counter^0,f,c
  2118  000CC6                     l1329:
  2119  000CC6  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2120  000CC8  EF68  F006         	goto	u681
  2121  000CCC  EF6A  F006         	goto	u680
  2122  000CD0                     u681:
  2123  000CD0  EF59  F006         	goto	l1327
  2124  000CD4                     u680:
  2125  000CD4                     l1331:
  2126  000CD4  5009               	movf	___aomod@divisor^0,w,c
  2127  000CD6  5C01               	subwf	___aomod@dividend^0,w,c
  2128  000CD8  500A               	movf	(___aomod@divisor+1)^0,w,c
  2129  000CDA  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2130  000CDC  500B               	movf	(___aomod@divisor+2)^0,w,c
  2131  000CDE  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2132  000CE0  500C               	movf	(___aomod@divisor+3)^0,w,c
  2133  000CE2  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2134  000CE4  500D               	movf	(___aomod@divisor+4)^0,w,c
  2135  000CE6  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2136  000CE8  500E               	movf	(___aomod@divisor+5)^0,w,c
  2137  000CEA  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2138  000CEC  500F               	movf	(___aomod@divisor+6)^0,w,c
  2139  000CEE  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2140  000CF0  5010               	movf	(___aomod@divisor+7)^0,w,c
  2141  000CF2  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2142  000CF4  A0D8               	btfss	status,0,c
  2143  000CF6  EF7F  F006         	goto	u691
  2144  000CFA  EF81  F006         	goto	u690
  2145  000CFE                     u691:
  2146  000CFE  EF91  F006         	goto	l1335
  2147  000D02                     u690:
  2148  000D02  5009               	movf	___aomod@divisor^0,w,c
  2149  000D04  5E01               	subwf	___aomod@dividend^0,f,c
  2150  000D06  500A               	movf	(___aomod@divisor+1)^0,w,c
  2151  000D08  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2152  000D0A  500B               	movf	(___aomod@divisor+2)^0,w,c
  2153  000D0C  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2154  000D0E  500C               	movf	(___aomod@divisor+3)^0,w,c
  2155  000D10  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2156  000D12  500D               	movf	(___aomod@divisor+4)^0,w,c
  2157  000D14  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2158  000D16  500E               	movf	(___aomod@divisor+5)^0,w,c
  2159  000D18  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2160  000D1A  500F               	movf	(___aomod@divisor+6)^0,w,c
  2161  000D1C  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2162  000D1E  5010               	movf	(___aomod@divisor+7)^0,w,c
  2163  000D20  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2164  000D22                     l1335:
  2165  000D22  90D8               	bcf	status,0,c
  2166  000D24  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2167  000D26  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2168  000D28  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2169  000D2A  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2170  000D2C  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2171  000D2E  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2172  000D30  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2173  000D32  3209               	rrcf	___aomod@divisor^0,f,c
  2174  000D34  2E11               	decfsz	___aomod@counter^0,f,c
  2175  000D36  EF6A  F006         	goto	l1331
  2176  000D3A                     l1339:
  2177  000D3A  5012               	movf	___aomod@sign^0,w,c
  2178  000D3C  B4D8               	btfsc	status,2,c
  2179  000D3E  EFA3  F006         	goto	u701
  2180  000D42  EFA5  F006         	goto	u700
  2181  000D46                     u701:
  2182  000D46  EFB5  F006         	goto	l1343
  2183  000D4A                     u700:
  2184  000D4A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2185  000D4C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2186  000D4E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2187  000D50  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2188  000D52  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2189  000D54  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2190  000D56  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2191  000D58  6C01               	negf	___aomod@dividend^0,c
  2192  000D5A  0E00               	movlw	0
  2193  000D5C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2194  000D5E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2195  000D60  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2196  000D62  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2197  000D64  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2198  000D66  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2199  000D68  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2200  000D6A                     l1343:
  2201  000D6A  C001  F001         	movff	___aomod@dividend,?___aomod
  2202  000D6E  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2203  000D72  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2204  000D76  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2205  000D7A  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2206  000D7E  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2207  000D82  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2208  000D86  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2209  000D8A  0012               	return		;funcret
  2210  000D8C                     __end_of___aomod:
  2211                           	callstack 0
  2212                           
  2213 ;; *************** function ___aodiv *****************
  2214 ;; Defined at:
  2215 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aodiv.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  dividend        8    0[COMRAM] long long 
  2218 ;;  divisor         8    8[COMRAM] long long 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  quotient        8   18[COMRAM] long long 
  2221 ;;  sign            1   17[COMRAM] unsigned char 
  2222 ;;  counter         1   16[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  8    0[COMRAM] long long 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:        16       0       0       0       0       0       0
  2233 ;;      Locals:        10       0       0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0
  2235 ;;      Totals:        26       0       0       0       0       0       0
  2236 ;;Total ram usage:       26 bytes
  2237 ;; Hardware stack levels used: 1
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_dtoa
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text12
  2246  000AA0                     __ptext12:
  2247                           	callstack 0
  2248  000AA0                     ___aodiv:
  2249                           	callstack 26
  2250  000AA0  0E00               	movlw	0
  2251  000AA2  6E12               	movwf	___aodiv@sign^0,c
  2252  000AA4  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2253  000AA6  EF59  F005         	goto	u580
  2254  000AAA  EF57  F005         	goto	u581
  2255  000AAE                     u581:
  2256  000AAE  EF6B  F005         	goto	l1275
  2257  000AB2                     u580:
  2258  000AB2  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2259  000AB4  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2260  000AB6  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2261  000AB8  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2262  000ABA  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2263  000ABC  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2264  000ABE  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2265  000AC0  6C09               	negf	___aodiv@divisor^0,c
  2266  000AC2  0E00               	movlw	0
  2267  000AC4  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2268  000AC6  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2269  000AC8  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2270  000ACA  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2271  000ACC  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2272  000ACE  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2273  000AD0  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2274  000AD2  0E01               	movlw	1
  2275  000AD4  6E12               	movwf	___aodiv@sign^0,c
  2276  000AD6                     l1275:
  2277  000AD6  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2278  000AD8  EF72  F005         	goto	u590
  2279  000ADC  EF70  F005         	goto	u591
  2280  000AE0                     u591:
  2281  000AE0  EF84  F005         	goto	l1281
  2282  000AE4                     u590:
  2283  000AE4  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2284  000AE6  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2285  000AE8  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2286  000AEA  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2287  000AEC  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2288  000AEE  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2289  000AF0  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2290  000AF2  6C01               	negf	___aodiv@dividend^0,c
  2291  000AF4  0E00               	movlw	0
  2292  000AF6  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2293  000AF8  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2294  000AFA  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2295  000AFC  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2296  000AFE  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2297  000B00  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2298  000B02  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2299  000B04  0E01               	movlw	1
  2300  000B06  1A12               	xorwf	___aodiv@sign^0,f,c
  2301  000B08                     l1281:
  2302  000B08  EE20  F013         	lfsr	2,___aodiv@quotient
  2303  000B0C  0E07               	movlw	7
  2304  000B0E                     u601:
  2305  000B0E  6ADE               	clrf	postinc2,c
  2306  000B10  06E8               	decf	wreg,f,c
  2307  000B12  E2FD               	bc	u601
  2308  000B14  5009               	movf	___aodiv@divisor^0,w,c
  2309  000B16  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2310  000B18  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2311  000B1A  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2312  000B1C  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2313  000B1E  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2314  000B20  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2315  000B22  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2316  000B24  B4D8               	btfsc	status,2,c
  2317  000B26  EF97  F005         	goto	u611
  2318  000B2A  EF99  F005         	goto	u610
  2319  000B2E                     u611:
  2320  000B2E  EFEB  F005         	goto	l1303
  2321  000B32                     u610:
  2322  000B32  0E01               	movlw	1
  2323  000B34  6E11               	movwf	___aodiv@counter^0,c
  2324  000B36  EFA7  F005         	goto	l1289
  2325  000B3A                     l1287:
  2326  000B3A  90D8               	bcf	status,0,c
  2327  000B3C  3609               	rlcf	___aodiv@divisor^0,f,c
  2328  000B3E  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2329  000B40  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2330  000B42  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2331  000B44  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2332  000B46  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2333  000B48  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2334  000B4A  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2335  000B4C  2A11               	incf	___aodiv@counter^0,f,c
  2336  000B4E                     l1289:
  2337  000B4E  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2338  000B50  EFAC  F005         	goto	u621
  2339  000B54  EFAE  F005         	goto	u620
  2340  000B58                     u621:
  2341  000B58  EF9D  F005         	goto	l1287
  2342  000B5C                     u620:
  2343  000B5C                     l1291:
  2344  000B5C  90D8               	bcf	status,0,c
  2345  000B5E  3613               	rlcf	___aodiv@quotient^0,f,c
  2346  000B60  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2347  000B62  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2348  000B64  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2349  000B66  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2350  000B68  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2351  000B6A  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2352  000B6C  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2353  000B6E  5009               	movf	___aodiv@divisor^0,w,c
  2354  000B70  5C01               	subwf	___aodiv@dividend^0,w,c
  2355  000B72  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2356  000B74  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2357  000B76  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2358  000B78  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2359  000B7A  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2360  000B7C  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2361  000B7E  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2362  000B80  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2363  000B82  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2364  000B84  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2365  000B86  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2366  000B88  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2367  000B8A  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2368  000B8C  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2369  000B8E  A0D8               	btfss	status,0,c
  2370  000B90  EFCC  F005         	goto	u631
  2371  000B94  EFCE  F005         	goto	u630
  2372  000B98                     u631:
  2373  000B98  EFDF  F005         	goto	l1299
  2374  000B9C                     u630:
  2375  000B9C  5009               	movf	___aodiv@divisor^0,w,c
  2376  000B9E  5E01               	subwf	___aodiv@dividend^0,f,c
  2377  000BA0  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2378  000BA2  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2379  000BA4  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2380  000BA6  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2381  000BA8  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2382  000BAA  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2383  000BAC  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2384  000BAE  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2385  000BB0  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2386  000BB2  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2387  000BB4  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2388  000BB6  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2389  000BB8  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2390  000BBA  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2391  000BBC  8013               	bsf	___aodiv@quotient^0,0,c
  2392  000BBE                     l1299:
  2393  000BBE  90D8               	bcf	status,0,c
  2394  000BC0  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2395  000BC2  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2396  000BC4  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2397  000BC6  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2398  000BC8  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2399  000BCA  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2400  000BCC  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2401  000BCE  3209               	rrcf	___aodiv@divisor^0,f,c
  2402  000BD0  2E11               	decfsz	___aodiv@counter^0,f,c
  2403  000BD2  EFAE  F005         	goto	l1291
  2404  000BD6                     l1303:
  2405  000BD6  5012               	movf	___aodiv@sign^0,w,c
  2406  000BD8  B4D8               	btfsc	status,2,c
  2407  000BDA  EFF1  F005         	goto	u641
  2408  000BDE  EFF3  F005         	goto	u640
  2409  000BE2                     u641:
  2410  000BE2  EF03  F006         	goto	l1307
  2411  000BE6                     u640:
  2412  000BE6  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2413  000BE8  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2414  000BEA  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2415  000BEC  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2416  000BEE  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2417  000BF0  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2418  000BF2  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2419  000BF4  6C13               	negf	___aodiv@quotient^0,c
  2420  000BF6  0E00               	movlw	0
  2421  000BF8  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2422  000BFA  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2423  000BFC  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2424  000BFE  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2425  000C00  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2426  000C02  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2427  000C04  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2428  000C06                     l1307:
  2429  000C06  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2430  000C0A  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2431  000C0E  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2432  000C12  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2433  000C16  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2434  000C1A  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2435  000C1E  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2436  000C22  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2437  000C26  0012               	return		;funcret
  2438  000C28                     __end_of___aodiv:
  2439                           	callstack 0
  2440                           
  2441 ;; *************** function _LCD_String_xy *****************
  2442 ;; Defined at:
  2443 ;;		line 169 in file "newmain.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;  row             1    wreg     unsigned char 
  2446 ;;  pos             1    4[COMRAM] unsigned char 
  2447 ;;  msg             2    5[COMRAM] PTR const unsigned char 
  2448 ;;		 -> main@buffer(10), STR_1(8), 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  row             1    7[COMRAM] unsigned char 
  2451 ;;  location        1    8[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      void 
  2454 ;; Registers used:
  2455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2461 ;;      Params:         3       0       0       0       0       0       0
  2462 ;;      Locals:         2       0       0       0       0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0
  2464 ;;      Totals:         5       0       0       0       0       0       0
  2465 ;;Total ram usage:        5 bytes
  2466 ;; Hardware stack levels used: 1
  2467 ;; Hardware stack levels required when called: 2
  2468 ;; This function calls:
  2469 ;;		_LCD_Command
  2470 ;;		_LCD_String
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text13
  2477  0011B4                     __ptext13:
  2478                           	callstack 0
  2479  0011B4                     _LCD_String_xy:
  2480                           	callstack 28
  2481                           
  2482                           ;incstack = 0
  2483                           ;LCD_String_xy@row stored from wreg
  2484  0011B4  6E08               	movwf	LCD_String_xy@row^0,c
  2485  0011B6                     
  2486                           ;newmain.c: 172:     if(row<=1)
  2487  0011B6  0E02               	movlw	2
  2488  0011B8  6008               	cpfslt	LCD_String_xy@row^0,c
  2489  0011BA  EFE1  F008         	goto	u991
  2490  0011BE  EFE3  F008         	goto	u990
  2491  0011C2                     u991:
  2492  0011C2  EFEC  F008         	goto	l1501
  2493  0011C6                     u990:
  2494  0011C6                     
  2495                           ;newmain.c: 173:     {;newmain.c: 174:         location=(0x80) | ((pos) & 0x0f);
  2496  0011C6  5005               	movf	LCD_String_xy@pos^0,w,c
  2497  0011C8  0B0F               	andlw	15
  2498  0011CA  0980               	iorlw	128
  2499  0011CC  6E09               	movwf	LCD_String_xy@location^0,c
  2500  0011CE                     
  2501                           ;newmain.c: 175:         LCD_Command(location);
  2502  0011CE  5009               	movf	LCD_String_xy@location^0,w,c
  2503  0011D0  EC44  F009         	call	_LCD_Command
  2504                           
  2505                           ;newmain.c: 176:     }
  2506  0011D4  EFF3  F008         	goto	l1505
  2507  0011D8                     l1501:
  2508                           
  2509                           ;newmain.c: 178:     {;newmain.c: 179:         location=(0xC0) | ((pos) & 0x0f);
  2510  0011D8  5005               	movf	LCD_String_xy@pos^0,w,c
  2511  0011DA  0B0F               	andlw	15
  2512  0011DC  09C0               	iorlw	192
  2513  0011DE  6E09               	movwf	LCD_String_xy@location^0,c
  2514  0011E0                     
  2515                           ;newmain.c: 180:         LCD_Command(location);
  2516  0011E0  5009               	movf	LCD_String_xy@location^0,w,c
  2517  0011E2  EC44  F009         	call	_LCD_Command
  2518  0011E6                     l1505:
  2519                           
  2520                           ;newmain.c: 182:     LCD_String(msg);
  2521  0011E6  C006  F003         	movff	LCD_String_xy@msg,LCD_String@msg
  2522  0011EA  C007  F004         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
  2523  0011EE  EC42  F008         	call	_LCD_String	;wreg free
  2524  0011F2  0012               	return		;funcret
  2525  0011F4                     __end_of_LCD_String_xy:
  2526                           	callstack 0
  2527                           
  2528 ;; *************** function _LCD_String *****************
  2529 ;; Defined at:
  2530 ;;		line 159 in file "newmain.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  msg             2    2[COMRAM] PTR const unsigned char 
  2533 ;;		 -> main@buffer(10), STR_1(8), 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         2       0       0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0
  2548 ;;      Totals:         2       0       0       0       0       0       0
  2549 ;;Total ram usage:        2 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 1
  2552 ;; This function calls:
  2553 ;;		_LCD_Char
  2554 ;; This function is called by:
  2555 ;;		_LCD_String_xy
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text14
  2560  001084                     __ptext14:
  2561                           	callstack 0
  2562  001084                     _LCD_String:
  2563                           	callstack 28
  2564  001084                     
  2565                           ;newmain.c: 159: void LCD_String(const char *msg);newmain.c: 160: {;newmain.c: 161:  whi
      +                          le((*msg)!=0)
  2566  001084  EF58  F008         	goto	l1483
  2567  001088                     l1479:
  2568                           
  2569                           ;newmain.c: 162:  {;newmain.c: 163:    LCD_Char(*msg);
  2570  001088  C003  FFF6         	movff	LCD_String@msg,tblptrl
  2571  00108C  C004  FFF7         	movff	LCD_String@msg+1,tblptrh
  2572  001090  6AF8               	clrf	tblptru,c
  2573  001092  0E05               	movlw	(high __ramtop+-1)
  2574  001094  64F7               	cpfsgt	tblptrh,c
  2575  001096  D003               	bra	u957
  2576  001098  0008               	tblrd		*
  2577  00109A  50F5               	movf	tablat,w,c
  2578  00109C  D005               	bra	u950
  2579  00109E                     u957:
  2580  00109E  CFF6 FFE1          	movff	tblptrl,fsr1l
  2581  0010A2  CFF7 FFE2          	movff	tblptrh,fsr1h
  2582  0010A6  50E7               	movf	indf1,w,c
  2583  0010A8                     u950:
  2584  0010A8  EC35  F009         	call	_LCD_Char
  2585  0010AC                     
  2586                           ;newmain.c: 164:    msg++;
  2587  0010AC  4A03               	infsnz	LCD_String@msg^0,f,c
  2588  0010AE  2A04               	incf	(LCD_String@msg+1)^0,f,c
  2589  0010B0                     l1483:
  2590                           
  2591                           ;newmain.c: 161:  while((*msg)!=0)
  2592  0010B0  C003  FFF6         	movff	LCD_String@msg,tblptrl
  2593  0010B4  C004  FFF7         	movff	LCD_String@msg+1,tblptrh
  2594  0010B8  6AF8               	clrf	tblptru,c
  2595  0010BA  0E05               	movlw	(high __ramtop+-1)
  2596  0010BC  64F7               	cpfsgt	tblptrh,c
  2597  0010BE  D003               	bra	u967
  2598  0010C0  0008               	tblrd		*
  2599  0010C2  50F5               	movf	tablat,w,c
  2600  0010C4  D005               	bra	u960
  2601  0010C6                     u967:
  2602  0010C6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2603  0010CA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2604  0010CE  50E7               	movf	indf1,w,c
  2605  0010D0                     u960:
  2606  0010D0  0900               	iorlw	0
  2607  0010D2  A4D8               	btfss	status,2,c
  2608  0010D4  EF6E  F008         	goto	u971
  2609  0010D8  EF70  F008         	goto	u970
  2610  0010DC                     u971:
  2611  0010DC  EF44  F008         	goto	l1479
  2612  0010E0                     u970:
  2613  0010E0  0012               	return		;funcret
  2614  0010E2                     __end_of_LCD_String:
  2615                           	callstack 0
  2616                           
  2617 ;; *************** function _LCD_Char *****************
  2618 ;; Defined at:
  2619 ;;		line 148 in file "newmain.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  dat             1    wreg     unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  dat             1    1[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2633 ;;      Params:         0       0       0       0       0       0       0
  2634 ;;      Locals:         1       0       0       0       0       0       0
  2635 ;;      Temps:          1       0       0       0       0       0       0
  2636 ;;      Totals:         2       0       0       0       0       0       0
  2637 ;;Total ram usage:        2 bytes
  2638 ;; Hardware stack levels used: 1
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;;		_LCD_String
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text15
  2648  00126A                     __ptext15:
  2649                           	callstack 0
  2650  00126A                     _LCD_Char:
  2651                           	callstack 28
  2652                           
  2653                           ;incstack = 0
  2654                           ;LCD_Char@dat stored from wreg
  2655  00126A  6E02               	movwf	LCD_Char@dat^0,c
  2656  00126C                     
  2657                           ;newmain.c: 148: void LCD_Char(char dat);newmain.c: 149: {;newmain.c: 150:  PORTB= dat;
  2658  00126C  C002  FF81         	movff	LCD_Char@dat,3969	;volatile
  2659  001270                     
  2660                           ;newmain.c: 151:  PORTDbits.RD0 = 1;
  2661  001270  8083               	bsf	131,0,c	;volatile
  2662  001272                     
  2663                           ;newmain.c: 152:  PORTDbits.RD1=1;
  2664  001272  8283               	bsf	131,1,c	;volatile
  2665  001274                     
  2666                           ;newmain.c: 153:   _delay((unsigned long)((6)*(8000000/4000.0)));
  2667  001274  0E10               	movlw	16
  2668  001276  6E01               	movwf	??_LCD_Char^0,c
  2669  001278  0E94               	movlw	148
  2670  00127A                     u1057:
  2671  00127A  2EE8               	decfsz	wreg,f,c
  2672  00127C  D7FE               	bra	u1057
  2673  00127E  2E01               	decfsz	??_LCD_Char^0,f,c
  2674  001280  D7FC               	bra	u1057
  2675  001282  D000               	nop2	
  2676  001284                     
  2677                           ;newmain.c: 154:  PORTDbits.RD1=0;
  2678  001284  9283               	bcf	131,1,c	;volatile
  2679  001286  0012               	return		;funcret
  2680  001288                     __end_of_LCD_Char:
  2681                           	callstack 0
  2682                           
  2683 ;; *************** function _LCD_Init *****************
  2684 ;; Defined at:
  2685 ;;		line 123 in file "newmain.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2699 ;;      Params:         0       0       0       0       0       0       0
  2700 ;;      Locals:         0       0       0       0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0
  2702 ;;      Totals:         0       0       0       0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used: 1
  2705 ;; Hardware stack levels required when called: 1
  2706 ;; This function calls:
  2707 ;;		_LCD_Command
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text16
  2714  00122A                     __ptext16:
  2715                           	callstack 0
  2716  00122A                     _LCD_Init:
  2717                           	callstack 29
  2718  00122A                     
  2719                           ;newmain.c: 125:     TRISB = 0x00;
  2720  00122A  0E00               	movlw	0
  2721  00122C  6E93               	movwf	147,c	;volatile
  2722                           
  2723                           ;newmain.c: 126:     TRISD = 0x00;
  2724  00122E  0E00               	movlw	0
  2725  001230  6E95               	movwf	149,c	;volatile
  2726  001232                     
  2727                           ;newmain.c: 127:     LCD_Command(0x38);
  2728  001232  0E38               	movlw	56
  2729  001234  EC44  F009         	call	_LCD_Command
  2730  001238                     
  2731                           ;newmain.c: 128:     LCD_Command(0x01);
  2732  001238  0E01               	movlw	1
  2733  00123A  EC44  F009         	call	_LCD_Command
  2734  00123E                     
  2735                           ;newmain.c: 129:     LCD_Command(0x0c);
  2736  00123E  0E0C               	movlw	12
  2737  001240  EC44  F009         	call	_LCD_Command
  2738  001244                     
  2739                           ;newmain.c: 130:     LCD_Command(0x06);
  2740  001244  0E06               	movlw	6
  2741  001246  EC44  F009         	call	_LCD_Command
  2742  00124A  0012               	return		;funcret
  2743  00124C                     __end_of_LCD_Init:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function _LCD_Clear *****************
  2747 ;; Defined at:
  2748 ;;		line 133 in file "newmain.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         0       0       0       0       0       0       0
  2763 ;;      Locals:         0       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:         0       0       0       0       0       0       0
  2766 ;;Total ram usage:        0 bytes
  2767 ;; Hardware stack levels used: 1
  2768 ;; Hardware stack levels required when called: 1
  2769 ;; This function calls:
  2770 ;;		_LCD_Command
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text17
  2777  0012A6                     __ptext17:
  2778                           	callstack 0
  2779  0012A6                     _LCD_Clear:
  2780                           	callstack 29
  2781  0012A6                     
  2782                           ;newmain.c: 135:      LCD_Command(0x01);
  2783  0012A6  0E01               	movlw	1
  2784  0012A8  EC44  F009         	call	_LCD_Command
  2785  0012AC  0012               	return		;funcret
  2786  0012AE                     __end_of_LCD_Clear:
  2787                           	callstack 0
  2788                           
  2789 ;; *************** function _LCD_Command *****************
  2790 ;; Defined at:
  2791 ;;		line 138 in file "newmain.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  cmd             1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  cmd             1    1[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, status,2, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2805 ;;      Params:         0       0       0       0       0       0       0
  2806 ;;      Locals:         1       0       0       0       0       0       0
  2807 ;;      Temps:          1       0       0       0       0       0       0
  2808 ;;      Totals:         2       0       0       0       0       0       0
  2809 ;;Total ram usage:        2 bytes
  2810 ;; Hardware stack levels used: 1
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_LCD_Init
  2815 ;;		_LCD_Clear
  2816 ;;		_LCD_String_xy
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text18
  2821  001288                     __ptext18:
  2822                           	callstack 0
  2823  001288                     _LCD_Command:
  2824                           	callstack 29
  2825                           
  2826                           ;incstack = 0
  2827                           ;LCD_Command@cmd stored from wreg
  2828  001288  6E02               	movwf	LCD_Command@cmd^0,c
  2829  00128A                     
  2830                           ;newmain.c: 138: void LCD_Command(char cmd );newmain.c: 139: {;newmain.c: 140:  PORTB= c
      +                          md;
  2831  00128A  C002  FF81         	movff	LCD_Command@cmd,3969	;volatile
  2832  00128E                     
  2833                           ;newmain.c: 141:  PORTDbits.RD0 = 0;
  2834  00128E  9083               	bcf	131,0,c	;volatile
  2835  001290                     
  2836                           ;newmain.c: 142:  PORTDbits.RD1 = 1;
  2837  001290  8283               	bsf	131,1,c	;volatile
  2838  001292                     
  2839                           ;newmain.c: 143:   _delay((unsigned long)((6)*(8000000/4000.0)));
  2840  001292  0E10               	movlw	16
  2841  001294  6E01               	movwf	??_LCD_Command^0,c
  2842  001296  0E94               	movlw	148
  2843  001298                     u1067:
  2844  001298  2EE8               	decfsz	wreg,f,c
  2845  00129A  D7FE               	bra	u1067
  2846  00129C  2E01               	decfsz	??_LCD_Command^0,f,c
  2847  00129E  D7FC               	bra	u1067
  2848  0012A0  D000               	nop2	
  2849  0012A2                     
  2850                           ;newmain.c: 144:  PORTDbits.RD1 = 0;
  2851  0012A2  9283               	bcf	131,1,c	;volatile
  2852  0012A4  0012               	return		;funcret
  2853  0012A6                     __end_of_LCD_Command:
  2854                           	callstack 0
  2855                           
  2856                           	psect	rparam
  2857  0000                     
  2858                           	psect	idloc
  2859                           
  2860                           ;Config register IDLOC0 @ 0x200000
  2861                           ;	unspecified, using default values
  2862  200000                     	org	2097152
  2863  200000  FF                 	db	255
  2864                           
  2865                           ;Config register IDLOC1 @ 0x200001
  2866                           ;	unspecified, using default values
  2867  200001                     	org	2097153
  2868  200001  FF                 	db	255
  2869                           
  2870                           ;Config register IDLOC2 @ 0x200002
  2871                           ;	unspecified, using default values
  2872  200002                     	org	2097154
  2873  200002  FF                 	db	255
  2874                           
  2875                           ;Config register IDLOC3 @ 0x200003
  2876                           ;	unspecified, using default values
  2877  200003                     	org	2097155
  2878  200003  FF                 	db	255
  2879                           
  2880                           ;Config register IDLOC4 @ 0x200004
  2881                           ;	unspecified, using default values
  2882  200004                     	org	2097156
  2883  200004  FF                 	db	255
  2884                           
  2885                           ;Config register IDLOC5 @ 0x200005
  2886                           ;	unspecified, using default values
  2887  200005                     	org	2097157
  2888  200005  FF                 	db	255
  2889                           
  2890                           ;Config register IDLOC6 @ 0x200006
  2891                           ;	unspecified, using default values
  2892  200006                     	org	2097158
  2893  200006  FF                 	db	255
  2894                           
  2895                           ;Config register IDLOC7 @ 0x200007
  2896                           ;	unspecified, using default values
  2897  200007                     	org	2097159
  2898  200007  FF                 	db	255
  2899                           
  2900                           	psect	config
  2901                           
  2902                           ; Padding undefined space
  2903  300000                     	org	3145728
  2904  300000  FF                 	db	255
  2905                           
  2906                           ;Config register CONFIG1H @ 0x300001
  2907                           ;	Oscillator Selection bits
  2908                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  2909                           ;	Fail-Safe Clock Monitor Enable bit
  2910                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2911                           ;	Internal/External Oscillator Switchover bit
  2912                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2913  300001                     	org	3145729
  2914  300001  08                 	db	8
  2915                           
  2916                           ;Config register CONFIG2L @ 0x300002
  2917                           ;	Power-up Timer Enable bit
  2918                           ;	PWRT = OFF, PWRT disabled
  2919                           ;	Brown-out Reset Enable bits
  2920                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2921                           ;	Brown Out Reset Voltage bits
  2922                           ;	BORV = 3, Minimum setting
  2923  300002                     	org	3145730
  2924  300002  1F                 	db	31
  2925                           
  2926                           ;Config register CONFIG2H @ 0x300003
  2927                           ;	Watchdog Timer Enable bit
  2928                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2929                           ;	Watchdog Timer Postscale Select bits
  2930                           ;	WDTPS = 32768, 1:32768
  2931  300003                     	org	3145731
  2932  300003  1E                 	db	30
  2933                           
  2934                           ; Padding undefined space
  2935  300004                     	org	3145732
  2936  300004  FF                 	db	255
  2937                           
  2938                           ;Config register CONFIG3H @ 0x300005
  2939                           ;	CCP2 MUX bit
  2940                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2941                           ;	PORTB A/D Enable bit
  2942                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2943                           ;	Low-Power Timer1 Oscillator Enable bit
  2944                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2945                           ;	MCLR Pin Enable bit
  2946                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  2947  300005                     	org	3145733
  2948  300005  01                 	db	1
  2949                           
  2950                           ;Config register CONFIG4L @ 0x300006
  2951                           ;	Stack Full/Underflow Reset Enable bit
  2952                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  2953                           ;	Single-Supply ICSP Enable bit
  2954                           ;	LVP = OFF, Single-Supply ICSP disabled
  2955                           ;	Extended Instruction Set Enable bit
  2956                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2957                           ;	Background Debugger Enable bit
  2958                           ;	DEBUG = 0x1, unprogrammed default
  2959  300006                     	org	3145734
  2960  300006  80                 	db	128
  2961                           
  2962                           ; Padding undefined space
  2963  300007                     	org	3145735
  2964  300007  FF                 	db	255
  2965                           
  2966                           ;Config register CONFIG5L @ 0x300008
  2967                           ;	Code Protection bit
  2968                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2969                           ;	Code Protection bit
  2970                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2971                           ;	Code Protection bit
  2972                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2973                           ;	Code Protection bit
  2974                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2975  300008                     	org	3145736
  2976  300008  0F                 	db	15
  2977                           
  2978                           ;Config register CONFIG5H @ 0x300009
  2979                           ;	Boot Block Code Protection bit
  2980                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2981                           ;	Data EEPROM Code Protection bit
  2982                           ;	CPD = OFF, Data EEPROM not code-protected
  2983  300009                     	org	3145737
  2984  300009  C0                 	db	192
  2985                           
  2986                           ;Config register CONFIG6L @ 0x30000A
  2987                           ;	Write Protection bit
  2988                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  2989                           ;	Write Protection bit
  2990                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  2991                           ;	Write Protection bit
  2992                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  2993                           ;	Write Protection bit
  2994                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  2995  30000A                     	org	3145738
  2996  30000A  0F                 	db	15
  2997                           
  2998                           ;Config register CONFIG6H @ 0x30000B
  2999                           ;	Configuration Register Write Protection bit
  3000                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3001                           ;	Boot Block Write Protection bit
  3002                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3003                           ;	Data EEPROM Write Protection bit
  3004                           ;	WRTD = OFF, Data EEPROM not write-protected
  3005  30000B                     	org	3145739
  3006  30000B  E0                 	db	224
  3007                           
  3008                           ;Config register CONFIG7L @ 0x30000C
  3009                           ;	Table Read Protection bit
  3010                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3011                           ;	Table Read Protection bit
  3012                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3013                           ;	Table Read Protection bit
  3014                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3015                           ;	Table Read Protection bit
  3016                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3017  30000C                     	org	3145740
  3018  30000C  0F                 	db	15
  3019                           
  3020                           ;Config register CONFIG7H @ 0x30000D
  3021                           ;	Boot Block Table Read Protection bit
  3022                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3023  30000D                     	org	3145741
  3024  30000D  40                 	db	64
  3025                           tosu	equ	0xFFF
  3026                           tosh	equ	0xFFE
  3027                           tosl	equ	0xFFD
  3028                           stkptr	equ	0xFFC
  3029                           pclatu	equ	0xFFB
  3030                           pclath	equ	0xFFA
  3031                           pcl	equ	0xFF9
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           indf0	equ	0xFEF
  3039                           postinc0	equ	0xFEE
  3040                           postdec0	equ	0xFED
  3041                           preinc0	equ	0xFEC
  3042                           plusw0	equ	0xFEB
  3043                           fsr0h	equ	0xFEA
  3044                           fsr0l	equ	0xFE9
  3045                           wreg	equ	0xFE8
  3046                           indf1	equ	0xFE7
  3047                           postinc1	equ	0xFE6
  3048                           postdec1	equ	0xFE5
  3049                           preinc1	equ	0xFE4
  3050                           plusw1	equ	0xFE3
  3051                           fsr1h	equ	0xFE2
  3052                           fsr1l	equ	0xFE1
  3053                           bsr	equ	0xFE0
  3054                           indf2	equ	0xFDF
  3055                           postinc2	equ	0xFDE
  3056                           postdec2	equ	0xFDD
  3057                           preinc2	equ	0xFDC
  3058                           plusw2	equ	0xFDB
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8

Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     126
    BANK0           128      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@buffer(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S601$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S601$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> main@buffer(COMRAM[10]), STR_1(CODE[8]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> main@buffer(COMRAM[10]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    7190
                                            106 COMRAM    16    16      0
                           _LCD_Char
                          _LCD_Clear
                           _LCD_Init
                      _LCD_String_xy
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    6456
                                             87 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3     590
                                              4 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2     136
                                              2 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      15
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      15
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Char
   _LCD_Clear
     _LCD_Command
   _LCD_Init
     _LCD_Command
   _LCD_String_xy
     _LCD_Command
     _LCD_String
       _LCD_Char
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      24       4       28.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7E       1       99.2%
BITBIGSFR_1ll       20      0       0      21        0.0%
BITBIGSFR_1h        11      0       0      19        0.0%
BITBIGSFRlh          E      0       0      23        0.0%
BITBIGSFR_5          C      0       0      15        0.0%
BITBIGSFRhh          6      0       0      22        0.0%
BITBIGSFR_2          6      0       0      18        0.0%
BITBIGSFR_4          3      0       0      16        0.0%
BITBIGSFR_3          3      0       0      17        0.0%
BITBIGSFR_1lh        2      0       0      20        0.0%
BITBIGSFRllh         1      0       0      24        0.0%
BITBIGSFRlll         1      0       0      25        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      26        0.0%
DATA                 0      0      A2      28        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Apr 12 13:00:14 2022

           ?_LCD_Command 0001                       l51 12AC                       l54 12A4  
                     l63 10E0                       l48 124A                       l57 1286  
                     l68 11F2              ?_LCD_String 0003                      l206 0D8A  
                    l193 0C26                      l822 0A9E                      l815 08EA  
                    l833 11AA                      l836 11B2                      l828 107A  
                    l829 1082                      l757 112E                      l848 0F5E  
                    l856 1172                      l784 0FA4                      l865 1228  
                    l859 12AE                      l787 0FE6                      l795 06AC  
                    l789 1020                      l797 06B4                      u520 0EA8  
                    u601 0B0E                      u521 0EA4                      u610 0B32  
                    u530 0EBA                      u611 0B2E                      u531 0EB6  
                    u620 0B5C                      u700 0D4A                      u540 0EE2  
                    u621 0B58                      u701 0D46                      u541 0EDE  
                    u630 0B9C                      u550 0F18                      u710 0F6E  
                    u631 0B98                      u551 0F14                      u711 0F6A  
                    u640 0BE6                      u560 1172                      u720 0F90  
                    u800 06A0                      u641 0BE2                      u561 116E  
                    u721 0F8C                      u801 069C                      u650 0C3A  
                    u570 121C                      u730 0FE6                      u810 06CE  
                    u651 0C36                      u571 1218                      u731 0FE2  
                    u811 06CA                      u580 0AB2                      u660 0C6C  
                    u740 0FF4                      u900 089E                      u820 06DC  
                    u581 0AAE                      u661 0C68                      u741 0FF0  
                    u901 089A                      u821 06D8                      u590 0AE4  
                    u670 0CAA                      u750 118E                      u830 0806  
                    u910 0910                      u591 0AE0                      u671 0CA6  
                    u751 118A                      u831 0802                      u911 090C  
                    u680 0CD4                      u840 0824                      u760 063E  
                    u920 0958                      u681 0CD0                      u841 0820  
                    u761 0638                      u921 0954                      u690 0D02  
                    u850 083E                      u770 0640                      u930 097C  
                    u691 0CFE                      u851 083A                      u931 0978  
                    u860 0858                      u780 0656                      u940 0A20  
                    u861 0854                      u781 0652                      u941 0A1C  
                    u950 10A8                      u870 0866                      u790 0684  
                    u871 0862                      u791 0680                      u960 10D0  
                    u880 0878                      u881 0874                      u970 10E0  
                    u890 0886                      u971 10DC                      u891 0882  
                    u980 107A                      u957 109E                      u981 1076  
                    u990 11C6                      u967 10C6                      u991 11C2  
          main@DispCount 0079                      _abs 1174                      _pad 0F60  
                    wreg 000FE8              LCD_Char@dat 0002                     l1121 128E  
                   l1123 1290                     ?_abs 0013                     l1125 1292  
                   l1301 0BD0                     l1127 12A2                     l1119 128A  
                   l1151 123E                     l1071 1272                     l1303 0BD6  
                   l1311 0C28                     l1153 1244                     l1145 122A  
                   l1073 1274                     l1305 0BE6                     l1321 0C6C  
                   l1313 0C2C                     l1241 0EC4                     l1401 077C  
                   l1155 12A6                     l1147 1232                     l1075 1284  
                   l1067 126C                     l1307 0C06                     l1331 0CD4  
                   l1323 0C8C                     l1315 0C3A                     l1243 0EE2  
                   l1235 0E96                     l1251 113C                     l1411 0824  
                   l1403 0782                     l1149 1238                     l1069 1270  
                   l1501 11D8                     l1341 0D4A                     l1333 0D02  
                   l1325 0CAA                     l1317 0C5A                     l1245 0F18  
                   l1237 0EA8                     l1253 114E                     l1261 1204  
                   l1421 0886                     l1413 083E                     l1405 0788  
                   l1503 11E0                     l1271 0AB2                     l1343 0D6A  
                   l1335 0D22                     l1327 0CB2                     l1319 0C5E  
                   l1239 0EBA                     l1255 1152                     l1263 121C  
                   l1351 0F82                     l1423 088C                     l1431 08C2  
                   l1415 0858                     l1407 07EC                     l1511 10FA  
                   l1505 11E6                     l1281 0B08                     l1273 0AD2  
                   l1337 0D34                     l1329 0CC6                     l1249 1130  
                   l1257 11F4                     l1361 0FC8                     l1353 0F90  
                   l1425 089E                     l1409 0806                     l1417 0866  
                   l1441 0930                     l1513 1102                     l1521 0D90  
                   l1291 0B5C                     l1283 0B14                     l1275 0AD6  
                   l1267 0AA0                     l1339 0D3A                     l1371 118E  
                   l1259 1200                     l1363 0FF4                     l1355 0F9C  
                   l1347 0F60                     l1427 08AA                     l1419 0878  
                   l1443 0934                     l1435 08EC                     l1515 111E  
                   l1507 10E2                     l1531 0DEA                     l1523 0D94  
                   l1293 0B6E                     l1285 0B32                     l1277 0AE4  
                   l1269 0AA4                     l1365 1008                     l1357 0FB0  
                   l1349 0F6E                     l1429 08B2                     l1381 0684  
                   l1373 060E                     l1453 09FC                     l1445 0958  
                   l1437 0910                     l1509 10F2                     l1541 0E36  
                   l1533 0DFC                     l1525 0DB4                     l1295 0B9C  
                   l1287 0B3A                     l1279 0B04                     l1359 0FC4  
                   l1391 06DC                     l1383 0686                     l1375 062E  
                   l1471 0A8C                     l1455 0A20                     l1463 0A4E  
                   l1447 097C                     l1439 091E                     l1543 0E48  
                   l1551 0E7C                     l1535 0E04                     l1527 0DCC  
                   l1519 0D8C                     l1481 10AC                     l1297 0BBC  
                   l1289 0B4E                     l1369 1174                     l1393 06E2  
                   l1385 06A0                     l1377 0656                     l1465 0A5C  
                   l1457 0A2E                     l1449 09C4                     l1545 0E4A  
                   l1537 0E10                     l1529 0DD2                     l1483 10B0  
                   l1299 0BBE                     l1395 06EA                     l1387 06BC  
                   l1379 0676                     l1459 0A42                     l1491 105E  
                   l1547 0E62                     l1539 0E1A                     l1477 1084  
                   l1493 11B6                     l1397 06F4                     l1389 06CE  
                   l1469 0A68                     l1485 1022                     l1549 0E64  
                   l1479 1088                     l1495 11B6                     l1399 06FA  
                   l1487 102A                     l1497 11C6                     l1489 1038  
                   l1499 11CE                     ?_pad 0011                     STR_1 0601  
                   STR_2 0609                     u1000 0E8E                     u1001 0E8A  
                   u1017 0DBE                     u1027 0DDC                     u1037 0E54  
                   u1047 0E6E                     u1057 127A                     u1067 1298  
                   abs@a 0013                     _dbuf 0084                     _main 0D8C  
                   _dtoa 060E                     _prec 007B                     _nout 0080  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0002            _LCD_String_xy 11B4             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 0017         __end_of_LCD_Char 1288  
       __end_of_LCD_Init 124C          __end_of___aodiv 0C28                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0D8C             vfpfcnvrt@fmt 0042  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _flags 007D  
                  _fputc 0E96                    _fputs 1130                    pad@fp 0011  
                  _width 0082                    _putch 12AE                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1130           ?_LCD_String_xy 0005  
        __initialization 124C             __end_of_main 0E96             __end_of_dtoa 08EC  
                 ??_main 006B                   ??_dtoa 0026        __end_of_LCD_Clear 12AE  
          __activetblptr 000002                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
       LCD_String_xy@msg 0006         LCD_String_xy@pos 0005         LCD_String_xy@row 0008  
                 _OSCCON 000FD3             vfprintf@cfmt 0056                ??___aodiv 0011  
              ??___aomod 0011                   clear_0 1252                   isa$std 000001  
                 pad@buf 0013                   dtoa@fp 001C                   _strlen 11F4  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 1084                ??_sprintf 005E                ?_LCD_Char 0001  
             __accesstop 0080  __end_of__initialization 1260                ?_LCD_Init 0001  
        ??_LCD_String_xy 0008            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 0F60            __end_of_fputs 1174            __end_of_putch 12B0  
           ??_LCD_String 0005                  ??_fputc 0005                  ??_fputs 000E  
                ??_putch 0001               __pbssBANK0 0080               ??_LCD_Char 0001  
             ??_LCD_Init 0003       __end_of_LCD_String 10E2                  _CCP1CON 000FBD  
                ?_strlen 0001            LCD_String@msg 0003                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0AA0                  ___aomod 0C28  
              ?_vfprintf 0050             __psmallconst 0600                  __pcinit 124C  
                __ramtop 0600                  __ptext0 0D8C                  __ptext1 10E2  
                __ptext2 1022                  __ptext3 08EC                  __ptext4 060E  
                __ptext5 0F60                  __ptext6 11F4                  __ptext7 1130  
                __ptext8 0E96                  __ptext9 12AE                _LCD_Clear 12A6  
                _sprintf 10E2     end_of_initialization 1260                  fputc@fp 0003  
         LCD_Command@cmd 0002            __Lmediumconst 0000                  fputs@fp 000C  
      __end_of_vfpfcnvrt 0AA0                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0056  
                strlen@a 0003                  strlen@s 0001                _PORTDbits 000F83  
             ?_LCD_Clear 0001               main@buffer 006D            ??_LCD_Command 0001  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
         __end_of_strlen 122A      start_initialization 124C              __end_of_abs 11B4  
            __end_of_pad 1022    __end_of_LCD_String_xy 11F4              vfprintf@fmt 0052  
               ??_strlen 0003      __end_of_LCD_Command 12A6              __pbssCOMRAM 007B  
       ___aodiv@dividend 0001              ??_LCD_Clear 0003                 ?___aodiv 0001  
               ?___aomod 0001         ___aodiv@quotient 0013              __smallconst 0600  
  LCD_String_xy@location 0009                 ?_sprintf 0058                 _LCD_Char 126A  
               _LCD_Init 122A              _LCD_Command 1288                _vfpfcnvrt 08EC  
              main@count 0077                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
               _dtoa$683 002E                 __ptext10 1174                 __ptext11 0C28  
               __ptext12 0AA0                 __ptext13 11B4                 __ptext14 1084  
               __ptext15 126A                 __ptext16 122A                 __ptext17 12A6  
               __ptext18 1288                 isa$xinst 000000                 _vfprintf 1022  
             _LCD_String 1084         ___aomod@dividend 0001                sprintf@ap 005E  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
               sprintf@f 0060                 sprintf@s 0058             ___aodiv@sign 0012  
           ___aomod@sign 0012  
