

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Apr 13 14:11:31 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33  0000                     
    34                           ; Version 2.40
    35                           ; Generated 17/11/2021 GMT
    36                           ; 
    37                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4520 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     _TRISC	set	3988
    70  0000                     _TRISD	set	3989
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATDbits	set	3980
    73  0000                     _LATA	set	3977
    74  0000                     _LATB	set	3978
    75  0000                     _TRISB	set	3987
    76  0000                     _OSCCON	set	4051
    77  0000                     _LATD	set	3980
    78  0000                     _TRISA	set	3986
    79                           
    80                           	psect	smallconst
    81  000600                     __psmallconst:
    82                           	callstack 0
    83  000600  00                 	db	0
    84  000601                     STR_1:
    85  000601  43                 	db	67	;'C'
    86  000602  6F                 	db	111	;'o'
    87  000603  75                 	db	117	;'u'
    88  000604  6E                 	db	110	;'n'
    89  000605  74                 	db	116	;'t'
    90  000606  65                 	db	101	;'e'
    91  000607  72                 	db	114	;'r'
    92  000608  20                 	db	32
    93  000609  53                 	db	83	;'S'
    94  00060A  74                 	db	116	;'t'
    95  00060B  61                 	db	97	;'a'
    96  00060C  72                 	db	114	;'r'
    97  00060D  74                 	db	116	;'t'
    98  00060E  20                 	db	32
    99  00060F  2D                 	db	45
   100  000610  2D                 	db	45
   101  000611  2D                 	db	45
   102  000612  2D                 	db	45
   103  000613  2D                 	db	45
   104  000614  2D                 	db	45
   105  000615  2D                 	db	45
   106  000616  00                 	db	0
   107  000617                     STR_2:
   108  000617  43                 	db	67	;'C'
   109  000618  6F                 	db	111	;'o'
   110  000619  75                 	db	117	;'u'
   111  00061A  6E                 	db	110	;'n'
   112  00061B  74                 	db	116	;'t'
   113  00061C  20                 	db	32
   114  00061D  2D                 	db	45
   115  00061E  00                 	db	0
   116  00061F                     STR_3:
   117  00061F  25                 	db	37
   118  000620  64                 	db	100	;'d'
   119  000621  00                 	db	0
   120  000622  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           ; #config settings
   123                           
   124                           	psect	cinit
   125  00129C                     __pcinit:
   126                           	callstack 0
   127  00129C                     start_initialization:
   128                           	callstack 0
   129  00129C                     __initialization:
   130                           	callstack 0
   131                           
   132                           ; Clear objects allocated to BANK0 (36 bytes)
   133  00129C  EE00  F080         	lfsr	0,__pbssBANK0
   134  0012A0  0E24               	movlw	36
   135  0012A2                     clear_0:
   136  0012A2  6AEE               	clrf	postinc0,c
   137  0012A4  06E8               	decf	wreg,f,c
   138  0012A6  E1FD               	bnz	clear_0
   139                           
   140                           ; Clear objects allocated to COMRAM (4 bytes)
   141  0012A8  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   142  0012AA  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   143  0012AC  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   144  0012AE  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   145  0012B0                     end_of_initialization:
   146                           	callstack 0
   147  0012B0                     __end_of__initialization:
   148                           	callstack 0
   149  0012B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  0012B2  6EF8               	movwf	tblptru,c
   151  0012B4  0100               	movlb	0
   152  0012B6  EFD1  F006         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	bssCOMRAM
   155  00007B                     __pbssCOMRAM:
   156                           	callstack 0
   157  00007B                     _prec:
   158                           	callstack 0
   159  00007B                     	ds	2
   160  00007D                     _flags:
   161                           	callstack 0
   162  00007D                     	ds	2
   163                           
   164                           	psect	bssBANK0
   165  000080                     __pbssBANK0:
   166                           	callstack 0
   167  000080                     _nout:
   168                           	callstack 0
   169  000080                     	ds	2
   170  000082                     _width:
   171                           	callstack 0
   172  000082                     	ds	2
   173  000084                     _dbuf:
   174                           	callstack 0
   175  000084                     	ds	32
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	callstack 0
   180  000001                     ??_lcdcmd:
   181  000001                     ??_lcddata:
   182  000001                     ?_strlen:
   183                           	callstack 0
   184  000001                     ?___aodiv:
   185                           	callstack 0
   186  000001                     ?___aomod:
   187                           	callstack 0
   188  000001                     fputc@c:
   189                           	callstack 0
   190  000001                     strlen@s:
   191                           	callstack 0
   192  000001                     ___aodiv@dividend:
   193                           	callstack 0
   194  000001                     ___aomod@dividend:
   195                           	callstack 0
   196                           
   197                           ; 8 bytes @ 0x0
   198  000001                     	ds	1
   199  000002                     lcdcmd@cmdout:
   200                           	callstack 0
   201  000002                     lcddata@dataout:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x1
   205  000002                     	ds	1
   206  000003                     LCD_Set_Cursor@c:
   207                           	callstack 0
   208  000003                     LCD_Write_String@str:
   209                           	callstack 0
   210  000003                     fputc@fp:
   211                           	callstack 0
   212  000003                     strlen@a:
   213                           	callstack 0
   214                           
   215                           ; 2 bytes @ 0x2
   216  000003                     	ds	1
   217  000004                     LCD_Set_Cursor@r:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x3
   221  000004                     	ds	1
   222  000005                     ??_LCD_Write_String:
   223  000005                     ??_fputc:
   224  000005                     LCD_Set_Cursor@Temp:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x4
   228  000005                     	ds	2
   229  000007                     LCD_Write_String@i:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x6
   233  000007                     	ds	2
   234  000009                     ___aodiv@divisor:
   235                           	callstack 0
   236  000009                     ___aomod@divisor:
   237                           	callstack 0
   238                           
   239                           ; 8 bytes @ 0x8
   240  000009                     	ds	1
   241  00000A                     fputs@s:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x9
   245  00000A                     	ds	2
   246  00000C                     fputs@fp:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0xB
   250  00000C                     	ds	2
   251  00000E                     fputs@c:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0xD
   255  00000E                     	ds	1
   256  00000F                     fputs@i:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0xE
   260  00000F                     	ds	2
   261  000011                     ?_pad:
   262                           	callstack 0
   263  000011                     ___aodiv@counter:
   264                           	callstack 0
   265  000011                     ___aomod@counter:
   266                           	callstack 0
   267  000011                     pad@fp:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0x10
   271  000011                     	ds	1
   272  000012                     ___aodiv@sign:
   273                           	callstack 0
   274  000012                     ___aomod@sign:
   275                           	callstack 0
   276                           
   277                           ; 1 bytes @ 0x11
   278  000012                     	ds	1
   279  000013                     ?_abs:
   280                           	callstack 0
   281  000013                     pad@buf:
   282                           	callstack 0
   283  000013                     abs@a:
   284                           	callstack 0
   285  000013                     ___aodiv@quotient:
   286                           	callstack 0
   287                           
   288                           ; 8 bytes @ 0x12
   289  000013                     	ds	2
   290  000015                     ??_abs:
   291  000015                     pad@p:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x14
   295  000015                     	ds	2
   296  000017                     ??_pad:
   297                           
   298                           ; 1 bytes @ 0x16
   299  000017                     	ds	1
   300  000018                     pad@i:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x17
   304  000018                     	ds	2
   305  00001A                     pad@w:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x19
   309  00001A                     	ds	2
   310  00001C                     ?_dtoa:
   311                           	callstack 0
   312  00001C                     dtoa@fp:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x1B
   316  00001C                     	ds	2
   317  00001E                     dtoa@d:
   318                           	callstack 0
   319                           
   320                           ; 8 bytes @ 0x1D
   321  00001E                     	ds	8
   322  000026                     ??_dtoa:
   323                           
   324                           ; 1 bytes @ 0x25
   325  000026                     	ds	8
   326  00002E                     _dtoa$708:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x2D
   330  00002E                     	ds	2
   331  000030                     dtoa@p:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x2F
   335  000030                     	ds	2
   336  000032                     dtoa@w:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x31
   340  000032                     	ds	2
   341  000034                     dtoa@s:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x33
   345  000034                     	ds	2
   346  000036                     dtoa@n:
   347                           	callstack 0
   348                           
   349                           ; 8 bytes @ 0x35
   350  000036                     	ds	8
   351  00003E                     dtoa@i:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x3D
   355  00003E                     	ds	2
   356  000040                     ?_vfpfcnvrt:
   357                           	callstack 0
   358  000040                     vfpfcnvrt@fp:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x3F
   362  000040                     	ds	2
   363  000042                     vfpfcnvrt@fmt:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x41
   367  000042                     	ds	2
   368  000044                     vfpfcnvrt@ap:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x43
   372  000044                     	ds	2
   373  000046                     ??_vfpfcnvrt:
   374                           
   375                           ; 1 bytes @ 0x45
   376  000046                     	ds	2
   377  000048                     vfpfcnvrt@ll:
   378                           	callstack 0
   379                           
   380                           ; 8 bytes @ 0x47
   381  000048                     	ds	8
   382  000050                     ?_vfprintf:
   383                           	callstack 0
   384  000050                     vfprintf@fp:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x4F
   388  000050                     	ds	2
   389  000052                     vfprintf@fmt:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x51
   393  000052                     	ds	2
   394  000054                     vfprintf@ap:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x53
   398  000054                     	ds	2
   399  000056                     vfprintf@cfmt:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x55
   403  000056                     	ds	2
   404  000058                     ?_sprintf:
   405                           	callstack 0
   406  000058                     sprintf@s:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x57
   410  000058                     	ds	2
   411  00005A                     sprintf@fmt:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x59
   415  00005A                     	ds	4
   416  00005E                     sprintf@ap:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x5D
   420  00005E                     	ds	2
   421  000060                     sprintf@f:
   422                           	callstack 0
   423                           
   424                           ; 11 bytes @ 0x5F
   425  000060                     	ds	11
   426  00006B                     ??_main:
   427                           
   428                           ; 1 bytes @ 0x6A
   429  00006B                     	ds	2
   430  00006D                     main@buffer:
   431                           	callstack 0
   432                           
   433                           ; 10 bytes @ 0x6C
   434  00006D                     	ds	10
   435  000077                     main@count:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x76
   439  000077                     	ds	2
   440  000079                     main@DispCount:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x78
   444  000079                     	ds	2
   445                           
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 84 in file "newmain.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;  buffer         10  108[COMRAM] unsigned char [10]
   456 ;;  DispCount       2  120[COMRAM] unsigned short 
   457 ;;  count           2  118[COMRAM] unsigned short 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   467 ;;      Params:         0       0       0       0       0       0       0
   468 ;;      Locals:        14       0       0       0       0       0       0
   469 ;;      Temps:          2       0       0       0       0       0       0
   470 ;;      Totals:        16       0       0       0       0       0       0
   471 ;;Total ram usage:       16 bytes
   472 ;; Hardware stack levels required when called: 8
   473 ;; This function calls:
   474 ;;		_LCD_Clear
   475 ;;		_LCD_Set_Cursor
   476 ;;		_LCD_Write_String
   477 ;;		_lcd_ini
   478 ;;		_sprintf
   479 ;; This function is called by:
   480 ;;		Startup code after reset
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           	psect	text0
   485  000DA2                     __ptext0:
   486                           	callstack 0
   487  000DA2                     _main:
   488                           	callstack 23
   489  000DA2                     
   490                           ;newmain.c: 86:     OSCCON=0x72;
   491  000DA2  0E72               	movlw	114
   492  000DA4  6ED3               	movwf	211,c	;volatile
   493                           
   494                           ;newmain.c: 87:     TRISB=0x00;
   495  000DA6  0E00               	movlw	0
   496  000DA8  6E93               	movwf	147,c	;volatile
   497                           
   498                           ;newmain.c: 88:     LATB=0x00;
   499  000DAA  0E00               	movlw	0
   500  000DAC  6E8A               	movwf	138,c	;volatile
   501                           
   502                           ;newmain.c: 89:     TRISD=0x00;
   503  000DAE  0E00               	movlw	0
   504  000DB0  6E95               	movwf	149,c	;volatile
   505                           
   506                           ;newmain.c: 90:     LATD=0x00;
   507  000DB2  0E00               	movlw	0
   508  000DB4  6E8C               	movwf	140,c	;volatile
   509                           
   510                           ;newmain.c: 91:     TRISA=0x00;
   511  000DB6  0E00               	movlw	0
   512  000DB8  6E92               	movwf	146,c	;volatile
   513                           
   514                           ;newmain.c: 92:     LATA=0x00;
   515  000DBA  0E00               	movlw	0
   516  000DBC  6E89               	movwf	137,c	;volatile
   517                           
   518                           ;newmain.c: 93:     TRISC=0x00;
   519  000DBE  0E00               	movlw	0
   520  000DC0  6E94               	movwf	148,c	;volatile
   521  000DC2                     
   522                           ;newmain.c: 95:    lcd_ini();
   523  000DC2  EC3E  F009         	call	_lcd_ini	;wreg free
   524  000DC6                     
   525                           ;newmain.c: 96:    LCD_Set_Cursor(1,3);
   526  000DC6  0E03               	movlw	3
   527  000DC8  6E03               	movwf	LCD_Set_Cursor@c^0,c
   528  000DCA  0E01               	movlw	1
   529  000DCC  EC04  F009         	call	_LCD_Set_Cursor
   530  000DD0                     
   531                           ;newmain.c: 97:    LCD_Write_String("Counter Start -------");
   532  000DD0  0E01               	movlw	low STR_1
   533  000DD2  6E03               	movwf	LCD_Write_String@str^0,c
   534  000DD4  0E06               	movlw	high STR_1
   535  000DD6  6E04               	movwf	(LCD_Write_String@str+1)^0,c
   536  000DD8  EC2B  F008         	call	_LCD_Write_String	;wreg free
   537  000DDC                     
   538                           ;newmain.c: 98:    _delay((unsigned long)((2000)*(8000000/4000.0)));
   539  000DDC  0E15               	movlw	21
   540  000DDE  6E6C               	movwf	(??_main+1)^0,c
   541  000DE0  0E4B               	movlw	75
   542  000DE2  6E6B               	movwf	??_main^0,c
   543  000DE4  0EBE               	movlw	190
   544  000DE6                     u1017:
   545  000DE6  2EE8               	decfsz	wreg,f,c
   546  000DE8  D7FE               	bra	u1017
   547  000DEA  2E6B               	decfsz	??_main^0,f,c
   548  000DEC  D7FC               	bra	u1017
   549  000DEE  2E6C               	decfsz	(??_main+1)^0,f,c
   550  000DF0  D7FA               	bra	u1017
   551  000DF2  D000               	nop2	
   552  000DF4                     
   553                           ;newmain.c: 99:    LCD_Clear();
   554  000DF4  EC7B  F009         	call	_LCD_Clear	;wreg free
   555  000DF8                     
   556                           ;newmain.c: 100:    uint16_t count =5000UL;
   557  000DF8  0E13               	movlw	19
   558  000DFA  6E78               	movwf	(main@count+1)^0,c
   559  000DFC  0E88               	movlw	136
   560  000DFE  6E77               	movwf	main@count^0,c
   561  000E00                     
   562                           ;newmain.c: 101:    uint16_t DispCount =0UL;
   563  000E00  0E00               	movlw	0
   564  000E02  6E7A               	movwf	(main@DispCount+1)^0,c
   565  000E04  0E00               	movlw	0
   566  000E06  6E79               	movwf	main@DispCount^0,c
   567  000E08                     
   568                           ;newmain.c: 102:     char buffer[10];;newmain.c: 103:     LCD_Set_Cursor(1,3);
   569  000E08  0E03               	movlw	3
   570  000E0A  6E03               	movwf	LCD_Set_Cursor@c^0,c
   571  000E0C  0E01               	movlw	1
   572  000E0E  EC04  F009         	call	_LCD_Set_Cursor
   573  000E12                     
   574                           ;newmain.c: 104:     LCD_Write_String("Count -");
   575  000E12  0E17               	movlw	low STR_2
   576  000E14  6E03               	movwf	LCD_Write_String@str^0,c
   577  000E16  0E06               	movlw	high STR_2
   578  000E18  6E04               	movwf	(LCD_Write_String@str+1)^0,c
   579  000E1A  EC2B  F008         	call	_LCD_Write_String	;wreg free
   580  000E1E                     
   581                           ;newmain.c: 105:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   582  000E1E  0E0B               	movlw	11
   583  000E20  6E6C               	movwf	(??_main+1)^0,c
   584  000E22  0E26               	movlw	38
   585  000E24  6E6B               	movwf	??_main^0,c
   586  000E26  0E5E               	movlw	94
   587  000E28                     u1027:
   588  000E28  2EE8               	decfsz	wreg,f,c
   589  000E2A  D7FE               	bra	u1027
   590  000E2C  2E6B               	decfsz	??_main^0,f,c
   591  000E2E  D7FC               	bra	u1027
   592  000E30  2E6C               	decfsz	(??_main+1)^0,f,c
   593  000E32  D7FA               	bra	u1027
   594  000E34  EF54  F007         	goto	l1527
   595  000E38                     l1511:
   596                           
   597                           ;newmain.c: 108:         {;newmain.c: 109:             count--;
   598  000E38  0677               	decf	main@count^0,f,c
   599  000E3A  A0D8               	btfss	status,0,c
   600  000E3C  0678               	decf	(main@count+1)^0,f,c
   601                           
   602                           ;newmain.c: 110:             DispCount++;
   603  000E3E  4A79               	infsnz	main@DispCount^0,f,c
   604  000E40  2A7A               	incf	(main@DispCount+1)^0,f,c
   605  000E42                     
   606                           ;newmain.c: 111:             sprintf(buffer,"%d",DispCount);
   607  000E42  0E6D               	movlw	low main@buffer
   608  000E44  6E58               	movwf	sprintf@s^0,c
   609  000E46  0E00               	movlw	high main@buffer
   610  000E48  6E59               	movwf	(sprintf@s+1)^0,c
   611  000E4A  0E1F               	movlw	low STR_3
   612  000E4C  6E5A               	movwf	sprintf@fmt^0,c
   613  000E4E  0E06               	movlw	high STR_3
   614  000E50  6E5B               	movwf	(sprintf@fmt+1)^0,c
   615  000E52  C079  F05C         	movff	main@DispCount,?_sprintf+4
   616  000E56  C07A  F05D         	movff	main@DispCount+1,?_sprintf+5
   617  000E5A  EC9B  F008         	call	_sprintf	;wreg free
   618  000E5E                     
   619                           ;newmain.c: 112:             LCD_Set_Cursor(2,5);
   620  000E5E  0E05               	movlw	5
   621  000E60  6E03               	movwf	LCD_Set_Cursor@c^0,c
   622  000E62  0E02               	movlw	2
   623  000E64  EC04  F009         	call	_LCD_Set_Cursor
   624  000E68                     
   625                           ;newmain.c: 113:             LCD_Write_String(buffer);
   626  000E68  0E6D               	movlw	low main@buffer
   627  000E6A  6E03               	movwf	LCD_Write_String@str^0,c
   628  000E6C  0E00               	movlw	high main@buffer
   629  000E6E  6E04               	movwf	(LCD_Write_String@str+1)^0,c
   630  000E70  EC2B  F008         	call	_LCD_Write_String	;wreg free
   631  000E74                     
   632                           ;newmain.c: 114:             LATDbits.LD2=1;
   633  000E74  848C               	bsf	140,2,c	;volatile
   634  000E76                     
   635                           ;newmain.c: 115:             _delay((unsigned long)((600)*(8000000/4000.0)));
   636  000E76  0E07               	movlw	7
   637  000E78  6E6C               	movwf	(??_main+1)^0,c
   638  000E7A  0E17               	movlw	23
   639  000E7C  6E6B               	movwf	??_main^0,c
   640  000E7E  0E6A               	movlw	106
   641  000E80                     u1037:
   642  000E80  2EE8               	decfsz	wreg,f,c
   643  000E82  D7FE               	bra	u1037
   644  000E84  2E6B               	decfsz	??_main^0,f,c
   645  000E86  D7FC               	bra	u1037
   646  000E88  2E6C               	decfsz	(??_main+1)^0,f,c
   647  000E8A  D7FA               	bra	u1037
   648  000E8C  D000               	nop2	
   649  000E8E                     
   650                           ;newmain.c: 116:             LATDbits.LD2=0;
   651  000E8E  948C               	bcf	140,2,c	;volatile
   652  000E90                     
   653                           ;newmain.c: 117:             _delay((unsigned long)((600)*(8000000/4000.0)));
   654  000E90  0E07               	movlw	7
   655  000E92  6E6C               	movwf	(??_main+1)^0,c
   656  000E94  0E17               	movlw	23
   657  000E96  6E6B               	movwf	??_main^0,c
   658  000E98  0E6A               	movlw	106
   659  000E9A                     u1047:
   660  000E9A  2EE8               	decfsz	wreg,f,c
   661  000E9C  D7FE               	bra	u1047
   662  000E9E  2E6B               	decfsz	??_main^0,f,c
   663  000EA0  D7FC               	bra	u1047
   664  000EA2  2E6C               	decfsz	(??_main+1)^0,f,c
   665  000EA4  D7FA               	bra	u1047
   666  000EA6  D000               	nop2	
   667  000EA8                     l1527:
   668                           
   669                           ;newmain.c: 107:       while(count>0)
   670  000EA8  5077               	movf	main@count^0,w,c
   671  000EAA  1078               	iorwf	(main@count+1)^0,w,c
   672  000EAC  A4D8               	btfss	status,2,c
   673  000EAE  EF5B  F007         	goto	u1001
   674  000EB2  EF5D  F007         	goto	u1000
   675  000EB6                     u1001:
   676  000EB6  EF1C  F007         	goto	l1511
   677  000EBA                     u1000:
   678  000EBA                     
   679                           ;newmain.c: 120:       DispCount=0;
   680  000EBA  0E00               	movlw	0
   681  000EBC  6E7A               	movwf	(main@DispCount+1)^0,c
   682  000EBE  0E00               	movlw	0
   683  000EC0  6E79               	movwf	main@DispCount^0,c
   684  000EC2  EF54  F007         	goto	l1527
   685  000EC6  EF00  F000         	goto	start
   686  000ECA                     __end_of_main:
   687                           	callstack 0
   688                           
   689 ;; *************** function _sprintf *****************
   690 ;; Defined at:
   691 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_sprintf.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  s               2   87[COMRAM] PTR unsigned char 
   694 ;;		 -> main@buffer(10), 
   695 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   696 ;;		 -> STR_3(3), 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  f              11   95[COMRAM] struct _IO_FILE
   699 ;;  ap              2   93[COMRAM] PTR void [1]
   700 ;;		 -> ?_sprintf(2), 
   701 ;;  ret             2    0        int 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  2   87[COMRAM] int 
   704 ;; Registers used:
   705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   711 ;;      Params:         6       0       0       0       0       0       0
   712 ;;      Locals:        13       0       0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0
   714 ;;      Totals:        19       0       0       0       0       0       0
   715 ;;Total ram usage:       19 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; Hardware stack levels required when called: 7
   718 ;; This function calls:
   719 ;;		_vfprintf
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text1
   726  001136                     __ptext1:
   727                           	callstack 0
   728  001136                     _sprintf:
   729                           	callstack 23
   730  001136  0E5C               	movlw	low (?_sprintf+4)
   731  001138  6E5E               	movwf	sprintf@ap^0,c
   732  00113A  0E00               	movlw	high (?_sprintf+4)
   733  00113C  6E5F               	movwf	(sprintf@ap+1)^0,c
   734  00113E  C058  F060         	movff	sprintf@s,sprintf@f
   735  001142  C059  F061         	movff	sprintf@s+1,sprintf@f+1
   736  001146  0E00               	movlw	0
   737  001148  6E64               	movwf	(sprintf@f+4)^0,c
   738  00114A  0E00               	movlw	0
   739  00114C  6E63               	movwf	(sprintf@f+3)^0,c
   740  00114E  0E00               	movlw	0
   741  001150  6E6A               	movwf	(sprintf@f+10)^0,c
   742  001152  0E00               	movlw	0
   743  001154  6E69               	movwf	(sprintf@f+9)^0,c
   744  001156  0E60               	movlw	low sprintf@f
   745  001158  6E50               	movwf	vfprintf@fp^0,c
   746  00115A  0E00               	movlw	high sprintf@f
   747  00115C  6E51               	movwf	(vfprintf@fp+1)^0,c
   748  00115E  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   749  001162  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   750  001166  0E5E               	movlw	low sprintf@ap
   751  001168  6E54               	movwf	vfprintf@ap^0,c
   752  00116A  0E00               	movlw	high sprintf@ap
   753  00116C  6E55               	movwf	(vfprintf@ap+1)^0,c
   754  00116E  EC6A  F008         	call	_vfprintf	;wreg free
   755  001172  5063               	movf	(sprintf@f+3)^0,w,c
   756  001174  2458               	addwf	sprintf@s^0,w,c
   757  001176  6ED9               	movwf	fsr2l,c
   758  001178  5064               	movf	(sprintf@f+4)^0,w,c
   759  00117A  2059               	addwfc	(sprintf@s+1)^0,w,c
   760  00117C  6EDA               	movwf	fsr2h,c
   761  00117E  0E00               	movlw	0
   762  001180  6EDF               	movwf	indf2,c
   763  001182  0012               	return		;funcret
   764  001184                     __end_of_sprintf:
   765                           	callstack 0
   766                           
   767 ;; *************** function _vfprintf *****************
   768 ;; Defined at:
   769 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   772 ;;		 -> sprintf@f(11), 
   773 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   774 ;;		 -> STR_3(3), 
   775 ;;  ap              2   83[COMRAM] PTR PTR void 
   776 ;;		 -> sprintf@ap(2), 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   779 ;;		 -> STR_3(3), 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  2   79[COMRAM] int 
   782 ;; Registers used:
   783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   789 ;;      Params:         6       0       0       0       0       0       0
   790 ;;      Locals:         2       0       0       0       0       0       0
   791 ;;      Temps:          0       0       0       0       0       0       0
   792 ;;      Totals:         8       0       0       0       0       0       0
   793 ;;Total ram usage:        8 bytes
   794 ;; Hardware stack levels used: 1
   795 ;; Hardware stack levels required when called: 6
   796 ;; This function calls:
   797 ;;		_vfpfcnvrt
   798 ;; This function is called by:
   799 ;;		_sprintf
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text2
   804  0010D4                     __ptext2:
   805                           	callstack 0
   806  0010D4                     _vfprintf:
   807                           	callstack 23
   808  0010D4                     
   809                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   810  0010D4  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   811  0010D8  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   812  0010DC                     
   813                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   814  0010DC  0E00               	movlw	0
   815  0010DE  0100               	movlb	0	; () banked
   816  0010E0  6F81               	movwf	(_nout+1)& (0+255),b
   817  0010E2  0E00               	movlw	0
   818  0010E4  6F80               	movwf	_nout& (0+255),b
   819                           
   820                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   821  0010E6  EF88  F008         	goto	l1455
   822  0010EA                     l1453:
   823                           
   824                           ; BSR set to: 0
   825                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   826  0010EA  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   827  0010EE  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   828  0010F2  0E56               	movlw	low vfprintf@cfmt
   829  0010F4  6E42               	movwf	vfpfcnvrt@fmt^0,c
   830  0010F6  0E00               	movlw	high vfprintf@cfmt
   831  0010F8  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   832  0010FA  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   833  0010FE  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   834  001102  EC81  F004         	call	_vfpfcnvrt	;wreg free
   835  001106  5040               	movf	?_vfpfcnvrt^0,w,c
   836  001108  0100               	movlb	0	; () banked
   837  00110A  2780               	addwf	_nout& (0+255),f,b
   838  00110C  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   839  00110E  2381               	addwfc	(_nout+1)& (0+255),f,b
   840  001110                     l1455:
   841                           
   842                           ; BSR set to: 0
   843                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   844  001110  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   845  001114  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   846  001118                     	if	0	;tblptru may be non-zero
   847  001118                     	endif
   848  001118                     	if	0	;tblptru may be non-zero
   849  001118                     	endif
   850  001118  0008               	tblrd		*
   851  00111A  50F5               	movf	tablat,w,c
   852  00111C  0900               	iorlw	0
   853  00111E  A4D8               	btfss	status,2,c
   854  001120  EF94  F008         	goto	u941
   855  001124  EF96  F008         	goto	u940
   856  001128                     u941:
   857  001128  EF75  F008         	goto	l1453
   858  00112C                     u940:
   859  00112C                     
   860                           ; BSR set to: 0
   861                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   862  00112C  C080  F050         	movff	_nout,?_vfprintf
   863  001130  C081  F051         	movff	_nout+1,?_vfprintf+1
   864  001134                     
   865                           ; BSR set to: 0
   866  001134  0012               	return		;funcret
   867  001136                     __end_of_vfprintf:
   868                           	callstack 0
   869                           
   870 ;; *************** function _vfpfcnvrt *****************
   871 ;; Defined at:
   872 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   875 ;;		 -> sprintf@f(11), 
   876 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   877 ;;		 -> vfprintf@cfmt(2), 
   878 ;;  ap              2   67[COMRAM] PTR PTR void 
   879 ;;		 -> sprintf@ap(2), 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  ll              8   71[COMRAM] long long 
   882 ;;  llu             8    0        unsigned long long 
   883 ;;  f               4    0        unsigned long long 
   884 ;;  vp              3    0        PTR void 
   885 ;;  ct              3    0        unsigned char [3]
   886 ;;  cp              3    0        PTR unsigned char 
   887 ;;  i               2    0        int 
   888 ;;  done            2    0        int 
   889 ;;  c               1    0        unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  2   63[COMRAM] int 
   892 ;; Registers used:
   893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   899 ;;      Params:         6       0       0       0       0       0       0
   900 ;;      Locals:         8       0       0       0       0       0       0
   901 ;;      Temps:          2       0       0       0       0       0       0
   902 ;;      Totals:        16       0       0       0       0       0       0
   903 ;;Total ram usage:       16 bytes
   904 ;; Hardware stack levels used: 1
   905 ;; Hardware stack levels required when called: 5
   906 ;; This function calls:
   907 ;;		_dtoa
   908 ;;		_fputc
   909 ;; This function is called by:
   910 ;;		_vfprintf
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text3
   915  000902                     __ptext3:
   916                           	callstack 0
   917  000902                     _vfpfcnvrt:
   918                           	callstack 23
   919  000902                     
   920                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.35\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          5\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   921  000902  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   922  000906  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   923  00090A  CFDE FFF6          	movff	postinc2,tblptrl
   924  00090E  CFDD FFF7          	movff	postdec2,tblptrh
   925  000912                     	if	0	;tblptru may be non-zero
   926  000912                     	endif
   927  000912                     	if	0	;tblptru may be non-zero
   928  000912                     	endif
   929  000912  0008               	tblrd		*
   930  000914  50F5               	movf	tablat,w,c
   931  000916  0A25               	xorlw	37
   932  000918  A4D8               	btfss	status,2,c
   933  00091A  EF91  F004         	goto	u901
   934  00091E  EF93  F004         	goto	u900
   935  000922                     u901:
   936  000922  EF3F  F005         	goto	l1441
   937  000926                     u900:
   938  000926                     
   939                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   940  000926  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   941  00092A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   942  00092E  2ADE               	incf	postinc2,f,c
   943  000930  0E00               	movlw	0
   944  000932  22DD               	addwfc	postdec2,f,c
   945  000934                     
   946                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   947  000934  0E00               	movlw	0
   948  000936  0100               	movlb	0	; () banked
   949  000938  6F83               	movwf	(_width+1)& (0+255),b
   950  00093A  0E00               	movlw	0
   951  00093C  6F82               	movwf	_width& (0+255),b
   952  00093E  C082  F07D         	movff	_width,_flags
   953  000942  C083  F07E         	movff	_width+1,_flags+1
   954  000946                     
   955                           ; BSR set to: 0
   956                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   957  000946  687B               	setf	_prec^0,c
   958  000948  687C               	setf	(_prec+1)^0,c
   959  00094A                     
   960                           ; BSR set to: 0
   961                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   962  00094A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   963  00094E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   964  000952  CFDE FFF6          	movff	postinc2,tblptrl
   965  000956  CFDD FFF7          	movff	postdec2,tblptrh
   966  00095A                     	if	0	;tblptru may be non-zero
   967  00095A                     	endif
   968  00095A                     	if	0	;tblptru may be non-zero
   969  00095A                     	endif
   970  00095A  0008               	tblrd		*
   971  00095C  50F5               	movf	tablat,w,c
   972  00095E  0A64               	xorlw	100
   973  000960  B4D8               	btfsc	status,2,c
   974  000962  EFB5  F004         	goto	u911
   975  000966  EFB7  F004         	goto	u910
   976  00096A                     u911:
   977  00096A  EFC9  F004         	goto	l1419
   978  00096E                     u910:
   979  00096E                     
   980                           ; BSR set to: 0
   981  00096E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   982  000972  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   983  000976  CFDE FFF6          	movff	postinc2,tblptrl
   984  00097A  CFDD FFF7          	movff	postdec2,tblptrh
   985  00097E                     	if	0	;tblptru may be non-zero
   986  00097E                     	endif
   987  00097E                     	if	0	;tblptru may be non-zero
   988  00097E                     	endif
   989  00097E  0008               	tblrd		*
   990  000980  50F5               	movf	tablat,w,c
   991  000982  0A69               	xorlw	105
   992  000984  A4D8               	btfss	status,2,c
   993  000986  EFC7  F004         	goto	u921
   994  00098A  EFC9  F004         	goto	u920
   995  00098E                     u921:
   996  00098E  EF09  F005         	goto	l1425
   997  000992                     u920:
   998  000992                     l1419:
   999                           
  1000                           ; BSR set to: 0
  1001                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1002  000992  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1003  000996  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1004  00099A  2ADE               	incf	postinc2,f,c
  1005  00099C  0E00               	movlw	0
  1006  00099E  22DD               	addwfc	postdec2,f,c
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1009  0009A0  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1010  0009A4  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1011  0009A8  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1012  0009AC  0E02               	movlw	2
  1013  0009AE  26DE               	addwf	postinc2,f,c
  1014  0009B0  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1015  0009B4  0E00               	movlw	0
  1016  0009B6  22DD               	addwfc	postdec2,f,c
  1017  0009B8  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1018  0009BC  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1019  0009C0  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1020  0009C4  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1021  0009C8  0E00               	movlw	0
  1022  0009CA  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1023  0009CC  0EFF               	movlw	-1
  1024  0009CE  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1025  0009D0  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1026  0009D2  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1027  0009D4  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1028  0009D6  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1029  0009D8  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1030  0009DA                     
  1031                           ; BSR set to: 0
  1032                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1033  0009DA  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1034  0009DE  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1035  0009E2  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1036  0009E6  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1037  0009EA  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1038  0009EE  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1039  0009F2  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1040  0009F6  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1041  0009FA  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1042  0009FE  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1043  000A02  EC12  F003         	call	_dtoa	;wreg free
  1044  000A06  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1045  000A0A  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1046  000A0E  EF5A  F005         	goto	l814
  1047  000A12                     l1425:
  1048                           
  1049                           ; BSR set to: 0
  1050                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1051  000A12  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1052  000A16  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1053  000A1A  CFDE FFF6          	movff	postinc2,tblptrl
  1054  000A1E  CFDD FFF7          	movff	postdec2,tblptrh
  1055  000A22                     	if	0	;tblptru may be non-zero
  1056  000A22                     	endif
  1057  000A22                     	if	0	;tblptru may be non-zero
  1058  000A22                     	endif
  1059  000A22  0008               	tblrd		*
  1060  000A24  50F5               	movf	tablat,w,c
  1061  000A26  0A25               	xorlw	37
  1062  000A28  A4D8               	btfss	status,2,c
  1063  000A2A  EF19  F005         	goto	u931
  1064  000A2E  EF1B  F005         	goto	u930
  1065  000A32                     u931:
  1066  000A32  EF32  F005         	goto	l1435
  1067  000A36                     u930:
  1068  000A36                     
  1069                           ; BSR set to: 0
  1070                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1071  000A36  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1072  000A3A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1073  000A3E  2ADE               	incf	postinc2,f,c
  1074  000A40  0E00               	movlw	0
  1075  000A42  22DD               	addwfc	postdec2,f,c
  1076  000A44                     
  1077                           ; BSR set to: 0
  1078                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1079  000A44  0E00               	movlw	0
  1080  000A46  6E02               	movwf	(fputc@c+1)^0,c
  1081  000A48  0E25               	movlw	37
  1082  000A4A  6E01               	movwf	fputc@c^0,c
  1083  000A4C  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1084  000A50  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1085  000A54  EC65  F007         	call	_fputc	;wreg free
  1086  000A58                     l1431:
  1087                           
  1088                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1089  000A58  0E00               	movlw	0
  1090  000A5A  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1091  000A5C  0E01               	movlw	1
  1092  000A5E  6E40               	movwf	?_vfpfcnvrt^0,c
  1093  000A60  EF5A  F005         	goto	l814
  1094  000A64                     l1435:
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1098  000A64  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1099  000A68  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1100  000A6C  2ADE               	incf	postinc2,f,c
  1101  000A6E  0E00               	movlw	0
  1102  000A70  22DD               	addwfc	postdec2,f,c
  1103  000A72                     
  1104                           ; BSR set to: 0
  1105                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1106  000A72  0E00               	movlw	0
  1107  000A74  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1108  000A76  0E00               	movlw	0
  1109  000A78  6E40               	movwf	?_vfpfcnvrt^0,c
  1110  000A7A  EF5A  F005         	goto	l814
  1111  000A7E                     l1441:
  1112                           
  1113                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1114  000A7E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1115  000A82  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1116  000A86  CFDE FFF6          	movff	postinc2,tblptrl
  1117  000A8A  CFDD FFF7          	movff	postdec2,tblptrh
  1118  000A8E                     	if	0	;tblptru may be non-zero
  1119  000A8E                     	endif
  1120  000A8E                     	if	0	;tblptru may be non-zero
  1121  000A8E                     	endif
  1122  000A8E  0008               	tblrd		*
  1123  000A90  50F5               	movf	tablat,w,c
  1124  000A92  6E01               	movwf	fputc@c^0,c
  1125  000A94  6A02               	clrf	(fputc@c+1)^0,c
  1126  000A96  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1127  000A9A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1128  000A9E  EC65  F007         	call	_fputc	;wreg free
  1129  000AA2                     
  1130                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1131  000AA2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1132  000AA6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1133  000AAA  2ADE               	incf	postinc2,f,c
  1134  000AAC  0E00               	movlw	0
  1135  000AAE  22DD               	addwfc	postdec2,f,c
  1136  000AB0  EF2C  F005         	goto	l1431
  1137  000AB4                     l814:
  1138  000AB4  0012               	return		;funcret
  1139  000AB6                     __end_of_vfpfcnvrt:
  1140                           	callstack 0
  1141                           
  1142 ;; *************** function _dtoa *****************
  1143 ;; Defined at:
  1144 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1147 ;;		 -> sprintf@f(11), 
  1148 ;;  d               8   29[COMRAM] long long 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;  n               8   53[COMRAM] long long 
  1151 ;;  i               2   61[COMRAM] int 
  1152 ;;  s               2   51[COMRAM] int 
  1153 ;;  w               2   49[COMRAM] int 
  1154 ;;  p               2   47[COMRAM] int 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  2   27[COMRAM] int 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1164 ;;      Params:        10       0       0       0       0       0       0
  1165 ;;      Locals:        18       0       0       0       0       0       0
  1166 ;;      Temps:          8       0       0       0       0       0       0
  1167 ;;      Totals:        36       0       0       0       0       0       0
  1168 ;;Total ram usage:       36 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 4
  1171 ;; This function calls:
  1172 ;;		___aodiv
  1173 ;;		___aomod
  1174 ;;		_abs
  1175 ;;		_pad
  1176 ;; This function is called by:
  1177 ;;		_vfpfcnvrt
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text4
  1182  000624                     __ptext4:
  1183                           	callstack 0
  1184  000624                     _dtoa:
  1185                           	callstack 23
  1186  000624                     
  1187                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1188  000624  C01E  F036         	movff	dtoa@d,dtoa@n
  1189  000628  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1190  00062C  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1191  000630  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1192  000634  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1193  000638  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1194  00063C  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1195  000640  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1196  000644                     
  1197                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1198  000644  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1199  000646  EF27  F003         	goto	u751
  1200  00064A  EF2A  F003         	goto	u750
  1201  00064E                     u751:
  1202  00064E  0E01               	movlw	1
  1203  000650  EF2B  F003         	goto	u760
  1204  000654                     u750:
  1205  000654  0E00               	movlw	0
  1206  000656                     u760:
  1207  000656  6E34               	movwf	dtoa@s^0,c
  1208  000658  6A35               	clrf	(dtoa@s+1)^0,c
  1209                           
  1210                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1211  00065A  5034               	movf	dtoa@s^0,w,c
  1212  00065C  1035               	iorwf	(dtoa@s+1)^0,w,c
  1213  00065E  B4D8               	btfsc	status,2,c
  1214  000660  EF34  F003         	goto	u771
  1215  000664  EF36  F003         	goto	u770
  1216  000668                     u771:
  1217  000668  EF46  F003         	goto	l1351
  1218  00066C                     u770:
  1219  00066C                     
  1220                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1221  00066C  1E3D               	comf	(dtoa@n+7)^0,f,c
  1222  00066E  1E3C               	comf	(dtoa@n+6)^0,f,c
  1223  000670  1E3B               	comf	(dtoa@n+5)^0,f,c
  1224  000672  1E3A               	comf	(dtoa@n+4)^0,f,c
  1225  000674  1E39               	comf	(dtoa@n+3)^0,f,c
  1226  000676  1E38               	comf	(dtoa@n+2)^0,f,c
  1227  000678  1E37               	comf	(dtoa@n+1)^0,f,c
  1228  00067A  6C36               	negf	dtoa@n^0,c
  1229  00067C  0E00               	movlw	0
  1230  00067E  2237               	addwfc	(dtoa@n+1)^0,f,c
  1231  000680  2238               	addwfc	(dtoa@n+2)^0,f,c
  1232  000682  2239               	addwfc	(dtoa@n+3)^0,f,c
  1233  000684  223A               	addwfc	(dtoa@n+4)^0,f,c
  1234  000686  223B               	addwfc	(dtoa@n+5)^0,f,c
  1235  000688  223C               	addwfc	(dtoa@n+6)^0,f,c
  1236  00068A  223D               	addwfc	(dtoa@n+7)^0,f,c
  1237  00068C                     l1351:
  1238                           
  1239                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1240  00068C  BE7C               	btfsc	(_prec+1)^0,7,c
  1241  00068E  EF4B  F003         	goto	u781
  1242  000692  EF4D  F003         	goto	u780
  1243  000696                     u781:
  1244  000696  EF4E  F003         	goto	l1355
  1245  00069A                     u780:
  1246  00069A                     
  1247                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1248  00069A  927D               	bcf	_flags^0,1,c
  1249  00069C                     l1355:
  1250                           
  1251                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1252  00069C  BE7C               	btfsc	(_prec+1)^0,7,c
  1253  00069E  EF5B  F003         	goto	u790
  1254  0006A2  507C               	movf	(_prec+1)^0,w,c
  1255  0006A4  E106               	bnz	u791
  1256  0006A6  047B               	decf	_prec^0,w,c
  1257  0006A8  B0D8               	btfsc	status,0,c
  1258  0006AA  EF59  F003         	goto	u791
  1259  0006AE  EF5B  F003         	goto	u790
  1260  0006B2                     u791:
  1261  0006B2  EF61  F003         	goto	l787
  1262  0006B6                     u790:
  1263  0006B6  0E00               	movlw	0
  1264  0006B8  6E31               	movwf	(dtoa@p+1)^0,c
  1265  0006BA  0E01               	movlw	1
  1266  0006BC  6E30               	movwf	dtoa@p^0,c
  1267  0006BE  EF65  F003         	goto	l789
  1268  0006C2                     l787:
  1269  0006C2  C07B  F030         	movff	_prec,dtoa@p
  1270  0006C6  C07C  F031         	movff	_prec+1,dtoa@p+1
  1271  0006CA                     l789:
  1272                           
  1273                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1274  0006CA  C082  F032         	movff	_width,dtoa@w
  1275  0006CE  C083  F033         	movff	_width+1,dtoa@w+1
  1276  0006D2                     
  1277                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1278  0006D2  5034               	movf	dtoa@s^0,w,c
  1279  0006D4  1035               	iorwf	(dtoa@s+1)^0,w,c
  1280  0006D6  A4D8               	btfss	status,2,c
  1281  0006D8  EF70  F003         	goto	u801
  1282  0006DC  EF72  F003         	goto	u800
  1283  0006E0                     u801:
  1284  0006E0  EF79  F003         	goto	l1363
  1285  0006E4                     u800:
  1286  0006E4  A47D               	btfss	_flags^0,2,c
  1287  0006E6  EF77  F003         	goto	u811
  1288  0006EA  EF79  F003         	goto	u810
  1289  0006EE                     u811:
  1290  0006EE  EF7C  F003         	goto	l1365
  1291  0006F2                     u810:
  1292  0006F2                     l1363:
  1293                           
  1294                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 306:         --w;
  1295  0006F2  0632               	decf	dtoa@w^0,f,c
  1296  0006F4  A0D8               	btfss	status,0,c
  1297  0006F6  0633               	decf	(dtoa@w+1)^0,f,c
  1298  0006F8                     l1365:
  1299                           
  1300                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1301  0006F8  0E00               	movlw	0
  1302  0006FA  6E3F               	movwf	(dtoa@i+1)^0,c
  1303  0006FC  0E1F               	movlw	31
  1304  0006FE  6E3E               	movwf	dtoa@i^0,c
  1305  000700                     
  1306                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1307  000700  0E00               	movlw	0
  1308  000702  0100               	movlb	0	; () banked
  1309  000704  6FA3               	movwf	(_dbuf+31)& (0+255),b
  1310                           
  1311                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1312  000706  EF01  F004         	goto	l1379
  1313  00070A                     l1369:
  1314                           
  1315                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 313:         --i;
  1316  00070A  063E               	decf	dtoa@i^0,f,c
  1317  00070C  A0D8               	btfss	status,0,c
  1318  00070E  063F               	decf	(dtoa@i+1)^0,f,c
  1319  000710                     
  1320                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1321  000710  0E84               	movlw	low _dbuf
  1322  000712  243E               	addwf	dtoa@i^0,w,c
  1323  000714  6ED9               	movwf	fsr2l,c
  1324  000716  0E00               	movlw	high _dbuf
  1325  000718  203F               	addwfc	(dtoa@i+1)^0,w,c
  1326  00071A  6EDA               	movwf	fsr2h,c
  1327  00071C  C036  F001         	movff	dtoa@n,___aomod@dividend
  1328  000720  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1329  000724  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1330  000728  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1331  00072C  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1332  000730  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1333  000734  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1334  000738  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1335  00073C  0E0A               	movlw	10
  1336  00073E  6E09               	movwf	___aomod@divisor^0,c
  1337  000740  0E00               	movlw	0
  1338  000742  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1339  000744  0E00               	movlw	0
  1340  000746  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1341  000748  0E00               	movlw	0
  1342  00074A  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1343  00074C  0E00               	movlw	0
  1344  00074E  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1345  000750  0E00               	movlw	0
  1346  000752  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1347  000754  0E00               	movlw	0
  1348  000756  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1349  000758  0E00               	movlw	0
  1350  00075A  6E10               	movwf	(___aomod@divisor+7)^0,c
  1351  00075C  EC1F  F006         	call	___aomod	;wreg free
  1352  000760  C001  F026         	movff	?___aomod,??_dtoa
  1353  000764  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1354  000768  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1355  00076C  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1356  000770  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1357  000774  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1358  000778  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1359  00077C  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1360  000780  C026  F013         	movff	??_dtoa,abs@a
  1361  000784  C028  F014         	movff	??_dtoa+2,abs@a+1
  1362  000788  ECE4  F008         	call	_abs	;wreg free
  1363  00078C  5013               	movf	?_abs^0,w,c
  1364  00078E  0F30               	addlw	48
  1365  000790  6EDF               	movwf	indf2,c
  1366  000792                     
  1367                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 315:         --p;
  1368  000792  0630               	decf	dtoa@p^0,f,c
  1369  000794  A0D8               	btfss	status,0,c
  1370  000796  0631               	decf	(dtoa@p+1)^0,f,c
  1371  000798                     
  1372                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 316:         --w;
  1373  000798  0632               	decf	dtoa@w^0,f,c
  1374  00079A  A0D8               	btfss	status,0,c
  1375  00079C  0633               	decf	(dtoa@w+1)^0,f,c
  1376  00079E                     
  1377                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1378  00079E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1379  0007A2  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1380  0007A6  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1381  0007AA  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1382  0007AE  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1383  0007B2  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1384  0007B6  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1385  0007BA  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1386  0007BE  0E0A               	movlw	10
  1387  0007C0  6E09               	movwf	___aodiv@divisor^0,c
  1388  0007C2  0E00               	movlw	0
  1389  0007C4  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1390  0007C6  0E00               	movlw	0
  1391  0007C8  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1392  0007CA  0E00               	movlw	0
  1393  0007CC  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1394  0007CE  0E00               	movlw	0
  1395  0007D0  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1396  0007D2  0E00               	movlw	0
  1397  0007D4  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1398  0007D6  0E00               	movlw	0
  1399  0007D8  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1400  0007DA  0E00               	movlw	0
  1401  0007DC  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1402  0007DE  EC5B  F005         	call	___aodiv	;wreg free
  1403  0007E2  C001  F036         	movff	?___aodiv,dtoa@n
  1404  0007E6  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1405  0007EA  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1406  0007EE  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1407  0007F2  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1408  0007F6  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1409  0007FA  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1410  0007FE  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1411  000802                     l1379:
  1412                           
  1413                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1414  000802  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1415  000804  EF0C  F004         	goto	u821
  1416  000808  503F               	movf	(dtoa@i+1)^0,w,c
  1417  00080A  E108               	bnz	u820
  1418  00080C  043E               	decf	dtoa@i^0,w,c
  1419  00080E  A0D8               	btfss	status,0,c
  1420  000810  EF0C  F004         	goto	u821
  1421  000814  EF0E  F004         	goto	u820
  1422  000818                     u821:
  1423  000818  EF3E  F004         	goto	l1389
  1424  00081C                     u820:
  1425  00081C  5036               	movf	dtoa@n^0,w,c
  1426  00081E  1037               	iorwf	(dtoa@n+1)^0,w,c
  1427  000820  1038               	iorwf	(dtoa@n+2)^0,w,c
  1428  000822  1039               	iorwf	(dtoa@n+3)^0,w,c
  1429  000824  103A               	iorwf	(dtoa@n+4)^0,w,c
  1430  000826  103B               	iorwf	(dtoa@n+5)^0,w,c
  1431  000828  103C               	iorwf	(dtoa@n+6)^0,w,c
  1432  00082A  103D               	iorwf	(dtoa@n+7)^0,w,c
  1433  00082C  A4D8               	btfss	status,2,c
  1434  00082E  EF1B  F004         	goto	u831
  1435  000832  EF1D  F004         	goto	u830
  1436  000836                     u831:
  1437  000836  EF85  F003         	goto	l1369
  1438  00083A                     u830:
  1439  00083A  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1440  00083C  EF2A  F004         	goto	u840
  1441  000840  5031               	movf	(dtoa@p+1)^0,w,c
  1442  000842  E106               	bnz	u841
  1443  000844  0430               	decf	dtoa@p^0,w,c
  1444  000846  B0D8               	btfsc	status,0,c
  1445  000848  EF28  F004         	goto	u841
  1446  00084C  EF2A  F004         	goto	u840
  1447  000850                     u841:
  1448  000850  EF85  F003         	goto	l1369
  1449  000854                     u840:
  1450  000854  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1451  000856  EF35  F004         	goto	u851
  1452  00085A  5033               	movf	(dtoa@w+1)^0,w,c
  1453  00085C  E108               	bnz	u850
  1454  00085E  0432               	decf	dtoa@w^0,w,c
  1455  000860  A0D8               	btfss	status,0,c
  1456  000862  EF35  F004         	goto	u851
  1457  000866  EF37  F004         	goto	u850
  1458  00086A                     u851:
  1459  00086A  EF3E  F004         	goto	l1389
  1460  00086E                     u850:
  1461  00086E  B27D               	btfsc	_flags^0,1,c
  1462  000870  EF3C  F004         	goto	u861
  1463  000874  EF3E  F004         	goto	u860
  1464  000878                     u861:
  1465  000878  EF85  F003         	goto	l1369
  1466  00087C                     u860:
  1467  00087C                     l1389:
  1468                           
  1469                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1470  00087C  5034               	movf	dtoa@s^0,w,c
  1471  00087E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1472  000880  A4D8               	btfss	status,2,c
  1473  000882  EF45  F004         	goto	u871
  1474  000886  EF47  F004         	goto	u870
  1475  00088A                     u871:
  1476  00088A  EF4E  F004         	goto	l1393
  1477  00088E                     u870:
  1478  00088E  A47D               	btfss	_flags^0,2,c
  1479  000890  EF4C  F004         	goto	u881
  1480  000894  EF4E  F004         	goto	u880
  1481  000898                     u881:
  1482  000898  EF6C  F004         	goto	l1403
  1483  00089C                     u880:
  1484  00089C                     l1393:
  1485                           
  1486                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 322:         --i;
  1487  00089C  063E               	decf	dtoa@i^0,f,c
  1488  00089E  A0D8               	btfss	status,0,c
  1489  0008A0  063F               	decf	(dtoa@i+1)^0,f,c
  1490  0008A2                     
  1491                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1492  0008A2  5034               	movf	dtoa@s^0,w,c
  1493  0008A4  1035               	iorwf	(dtoa@s+1)^0,w,c
  1494  0008A6  A4D8               	btfss	status,2,c
  1495  0008A8  EF58  F004         	goto	u891
  1496  0008AC  EF5A  F004         	goto	u890
  1497  0008B0                     u891:
  1498  0008B0  EF60  F004         	goto	l1399
  1499  0008B4                     u890:
  1500  0008B4  0E00               	movlw	0
  1501  0008B6  6E2F               	movwf	(_dtoa$708+1)^0,c
  1502  0008B8  0E2B               	movlw	43
  1503  0008BA  6E2E               	movwf	_dtoa$708^0,c
  1504  0008BC  EF64  F004         	goto	l1401
  1505  0008C0                     l1399:
  1506  0008C0  0E00               	movlw	0
  1507  0008C2  6E2F               	movwf	(_dtoa$708+1)^0,c
  1508  0008C4  0E2D               	movlw	45
  1509  0008C6  6E2E               	movwf	_dtoa$708^0,c
  1510  0008C8                     l1401:
  1511  0008C8  0E84               	movlw	low _dbuf
  1512  0008CA  243E               	addwf	dtoa@i^0,w,c
  1513  0008CC  6ED9               	movwf	fsr2l,c
  1514  0008CE  0E00               	movlw	high _dbuf
  1515  0008D0  203F               	addwfc	(dtoa@i+1)^0,w,c
  1516  0008D2  6EDA               	movwf	fsr2h,c
  1517  0008D4  C02E  FFDF         	movff	_dtoa$708,indf2
  1518  0008D8                     l1403:
  1519                           
  1520                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1521  0008D8  C01C  F011         	movff	dtoa@fp,pad@fp
  1522  0008DC  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1523  0008E0  0E84               	movlw	low _dbuf
  1524  0008E2  243E               	addwf	dtoa@i^0,w,c
  1525  0008E4  6E13               	movwf	pad@buf^0,c
  1526  0008E6  0E00               	movlw	high _dbuf
  1527  0008E8  203F               	addwfc	(dtoa@i+1)^0,w,c
  1528  0008EA  6E14               	movwf	(pad@buf+1)^0,c
  1529  0008EC  C032  F015         	movff	dtoa@w,pad@p
  1530  0008F0  C033  F016         	movff	dtoa@w+1,pad@p+1
  1531  0008F4  ECCA  F007         	call	_pad	;wreg free
  1532  0008F8  C011  F01C         	movff	?_pad,?_dtoa
  1533  0008FC  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1534  000900  0012               	return		;funcret
  1535  000902                     __end_of_dtoa:
  1536                           	callstack 0
  1537                           
  1538 ;; *************** function _pad *****************
  1539 ;; Defined at:
  1540 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1543 ;;		 -> sprintf@f(11), 
  1544 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1545 ;;		 -> dbuf(32), 
  1546 ;;  p               2   20[COMRAM] int 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  w               2   25[COMRAM] int 
  1549 ;;  i               2   23[COMRAM] int 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  2   16[COMRAM] int 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1559 ;;      Params:         6       0       0       0       0       0       0
  1560 ;;      Locals:         4       0       0       0       0       0       0
  1561 ;;      Temps:          1       0       0       0       0       0       0
  1562 ;;      Totals:        11       0       0       0       0       0       0
  1563 ;;Total ram usage:       11 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; Hardware stack levels required when called: 3
  1566 ;; This function calls:
  1567 ;;		_fputc
  1568 ;;		_fputs
  1569 ;;		_strlen
  1570 ;; This function is called by:
  1571 ;;		_dtoa
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text5
  1576  000F94                     __ptext5:
  1577                           	callstack 0
  1578  000F94                     _pad:
  1579                           	callstack 23
  1580  000F94                     
  1581                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1582  000F94  A07D               	btfss	_flags^0,0,c
  1583  000F96  EFCF  F007         	goto	u701
  1584  000F9A  EFD1  F007         	goto	u700
  1585  000F9E                     u701:
  1586  000F9E  EFDB  F007         	goto	l1323
  1587  000FA2                     u700:
  1588  000FA2                     
  1589                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1590  000FA2  C013  F00A         	movff	pad@buf,fputs@s
  1591  000FA6  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1592  000FAA  C011  F00C         	movff	pad@fp,fputs@fp
  1593  000FAE  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1594  000FB2  ECC2  F008         	call	_fputs	;wreg free
  1595  000FB6                     l1323:
  1596                           
  1597                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1598  000FB6  BE16               	btfsc	(pad@p+1)^0,7,c
  1599  000FB8  EFE0  F007         	goto	u711
  1600  000FBC  EFE2  F007         	goto	u710
  1601  000FC0                     u711:
  1602  000FC0  EFE8  F007         	goto	l1327
  1603  000FC4                     u710:
  1604  000FC4  C015  F01A         	movff	pad@p,pad@w
  1605  000FC8  C016  F01B         	movff	pad@p+1,pad@w+1
  1606  000FCC  EFEC  F007         	goto	l776
  1607  000FD0                     l1327:
  1608  000FD0  0E00               	movlw	0
  1609  000FD2  6E1B               	movwf	(pad@w+1)^0,c
  1610  000FD4  0E00               	movlw	0
  1611  000FD6  6E1A               	movwf	pad@w^0,c
  1612  000FD8                     l776:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1615  000FD8  0E00               	movlw	0
  1616  000FDA  6E19               	movwf	(pad@i+1)^0,c
  1617  000FDC  0E00               	movlw	0
  1618  000FDE  6E18               	movwf	pad@i^0,c
  1619                           
  1620                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1621  000FE0  EFFE  F007         	goto	l1333
  1622  000FE4                     l1329:
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1625  000FE4  0E00               	movlw	0
  1626  000FE6  6E02               	movwf	(fputc@c+1)^0,c
  1627  000FE8  0E20               	movlw	32
  1628  000FEA  6E01               	movwf	fputc@c^0,c
  1629  000FEC  C011  F003         	movff	pad@fp,fputc@fp
  1630  000FF0  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1631  000FF4  EC65  F007         	call	_fputc	;wreg free
  1632  000FF8                     
  1633                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1634  000FF8  4A18               	infsnz	pad@i^0,f,c
  1635  000FFA  2A19               	incf	(pad@i+1)^0,f,c
  1636  000FFC                     l1333:
  1637                           
  1638                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1639  000FFC  501A               	movf	pad@w^0,w,c
  1640  000FFE  5C18               	subwf	pad@i^0,w,c
  1641  001000  5019               	movf	(pad@i+1)^0,w,c
  1642  001002  0A80               	xorlw	128
  1643  001004  6E17               	movwf	??_pad^0,c
  1644  001006  501B               	movf	(pad@w+1)^0,w,c
  1645  001008  0A80               	xorlw	128
  1646  00100A  5817               	subwfb	??_pad^0,w,c
  1647  00100C  A0D8               	btfss	status,0,c
  1648  00100E  EF0B  F008         	goto	u721
  1649  001012  EF0D  F008         	goto	u720
  1650  001016                     u721:
  1651  001016  EFF2  F007         	goto	l1329
  1652  00101A                     u720:
  1653  00101A                     
  1654                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1655  00101A  B07D               	btfsc	_flags^0,0,c
  1656  00101C  EF12  F008         	goto	u731
  1657  001020  EF14  F008         	goto	u730
  1658  001024                     u731:
  1659  001024  EF1E  F008         	goto	l1337
  1660  001028                     u730:
  1661  001028                     
  1662                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1663  001028  C013  F00A         	movff	pad@buf,fputs@s
  1664  00102C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1665  001030  C011  F00C         	movff	pad@fp,fputs@fp
  1666  001034  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1667  001038  ECC2  F008         	call	_fputs	;wreg free
  1668  00103C                     l1337:
  1669                           
  1670                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1671  00103C  C013  F001         	movff	pad@buf,strlen@s
  1672  001040  C014  F002         	movff	pad@buf+1,strlen@s+1
  1673  001044  EC23  F009         	call	_strlen	;wreg free
  1674  001048  501A               	movf	pad@w^0,w,c
  1675  00104A  2401               	addwf	?_strlen^0,w,c
  1676  00104C  6E11               	movwf	?_pad^0,c
  1677  00104E  501B               	movf	(pad@w+1)^0,w,c
  1678  001050  2002               	addwfc	(?_strlen+1)^0,w,c
  1679  001052  6E12               	movwf	(?_pad+1)^0,c
  1680  001054  0012               	return		;funcret
  1681  001056                     __end_of_pad:
  1682                           	callstack 0
  1683                           
  1684 ;; *************** function _strlen *****************
  1685 ;; Defined at:
  1686 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\strlen.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1689 ;;		 -> dbuf(32), 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1692 ;;		 -> dbuf(32), 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  2    0[COMRAM] unsigned int 
  1695 ;; Registers used:
  1696 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1702 ;;      Params:         2       0       0       0       0       0       0
  1703 ;;      Locals:         2       0       0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0       0       0
  1705 ;;      Totals:         4       0       0       0       0       0       0
  1706 ;;Total ram usage:        4 bytes
  1707 ;; Hardware stack levels used: 1
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_pad
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text6
  1716  001246                     __ptext6:
  1717                           	callstack 0
  1718  001246                     _strlen:
  1719                           	callstack 25
  1720  001246  C001  F003         	movff	strlen@s,strlen@a
  1721  00124A  C002  F004         	movff	strlen@s+1,strlen@a+1
  1722  00124E  EF2B  F009         	goto	l1233
  1723  001252                     l1231:
  1724  001252  4A01               	infsnz	strlen@s^0,f,c
  1725  001254  2A02               	incf	(strlen@s+1)^0,f,c
  1726  001256                     l1233:
  1727  001256  C001  FFD9         	movff	strlen@s,fsr2l
  1728  00125A  C002  FFDA         	movff	strlen@s+1,fsr2h
  1729  00125E  50DF               	movf	indf2,w,c
  1730  001260  A4D8               	btfss	status,2,c
  1731  001262  EF35  F009         	goto	u561
  1732  001266  EF37  F009         	goto	u560
  1733  00126A                     u561:
  1734  00126A  EF29  F009         	goto	l1231
  1735  00126E                     u560:
  1736  00126E  5003               	movf	strlen@a^0,w,c
  1737  001270  5C01               	subwf	strlen@s^0,w,c
  1738  001272  6E01               	movwf	?_strlen^0,c
  1739  001274  5004               	movf	(strlen@a+1)^0,w,c
  1740  001276  5802               	subwfb	(strlen@s+1)^0,w,c
  1741  001278  6E02               	movwf	(?_strlen+1)^0,c
  1742  00127A  0012               	return		;funcret
  1743  00127C                     __end_of_strlen:
  1744                           	callstack 0
  1745                           
  1746 ;; *************** function _fputs *****************
  1747 ;; Defined at:
  1748 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputs.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1751 ;;		 -> dbuf(32), 
  1752 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1753 ;;		 -> sprintf@f(11), 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  i               2   14[COMRAM] int 
  1756 ;;  c               1   13[COMRAM] unsigned char 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  2    9[COMRAM] int 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1766 ;;      Params:         4       0       0       0       0       0       0
  1767 ;;      Locals:         3       0       0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0
  1769 ;;      Totals:         7       0       0       0       0       0       0
  1770 ;;Total ram usage:        7 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 2
  1773 ;; This function calls:
  1774 ;;		_fputc
  1775 ;; This function is called by:
  1776 ;;		_pad
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text7
  1781  001184                     __ptext7:
  1782                           	callstack 0
  1783  001184                     _fputs:
  1784                           	callstack 23
  1785  001184  0E00               	movlw	0
  1786  001186  6E10               	movwf	(fputs@i+1)^0,c
  1787  001188  0E00               	movlw	0
  1788  00118A  6E0F               	movwf	fputs@i^0,c
  1789  00118C  EFD3  F008         	goto	l1227
  1790  001190                     l1223:
  1791  001190  C00E  F001         	movff	fputs@c,fputc@c
  1792  001194  6A02               	clrf	(fputc@c+1)^0,c
  1793  001196  C00C  F003         	movff	fputs@fp,fputc@fp
  1794  00119A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1795  00119E  EC65  F007         	call	_fputc	;wreg free
  1796  0011A2  4A0F               	infsnz	fputs@i^0,f,c
  1797  0011A4  2A10               	incf	(fputs@i+1)^0,f,c
  1798  0011A6                     l1227:
  1799  0011A6  500F               	movf	fputs@i^0,w,c
  1800  0011A8  240A               	addwf	fputs@s^0,w,c
  1801  0011AA  6ED9               	movwf	fsr2l,c
  1802  0011AC  5010               	movf	(fputs@i+1)^0,w,c
  1803  0011AE  200B               	addwfc	(fputs@s+1)^0,w,c
  1804  0011B0  6EDA               	movwf	fsr2h,c
  1805  0011B2  50DF               	movf	indf2,w,c
  1806  0011B4  6E0E               	movwf	fputs@c^0,c
  1807  0011B6  500E               	movf	fputs@c^0,w,c
  1808  0011B8  A4D8               	btfss	status,2,c
  1809  0011BA  EFE1  F008         	goto	u551
  1810  0011BE  EFE3  F008         	goto	u550
  1811  0011C2                     u551:
  1812  0011C2  EFC8  F008         	goto	l1223
  1813  0011C6                     u550:
  1814  0011C6  0012               	return		;funcret
  1815  0011C8                     __end_of_fputs:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function _fputc *****************
  1819 ;; Defined at:
  1820 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputc.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  c               2    0[COMRAM] int 
  1823 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1824 ;;		 -> sprintf@f(11), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  2    0[COMRAM] int 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1836 ;;      Params:         4       0       0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0
  1838 ;;      Temps:          5       0       0       0       0       0       0
  1839 ;;      Totals:         9       0       0       0       0       0       0
  1840 ;;Total ram usage:        9 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; Hardware stack levels required when called: 1
  1843 ;; This function calls:
  1844 ;;		_putch
  1845 ;; This function is called by:
  1846 ;;		_pad
  1847 ;;		_vfpfcnvrt
  1848 ;;		_fputs
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text8
  1853  000ECA                     __ptext8:
  1854                           	callstack 0
  1855  000ECA                     _fputc:
  1856                           	callstack 26
  1857  000ECA  5003               	movf	fputc@fp^0,w,c
  1858  000ECC  1004               	iorwf	(fputc@fp+1)^0,w,c
  1859  000ECE  B4D8               	btfsc	status,2,c
  1860  000ED0  EF6C  F007         	goto	u511
  1861  000ED4  EF6E  F007         	goto	u510
  1862  000ED8                     u511:
  1863  000ED8  EF77  F007         	goto	l1211
  1864  000EDC                     u510:
  1865  000EDC  5003               	movf	fputc@fp^0,w,c
  1866  000EDE  1004               	iorwf	(fputc@fp+1)^0,w,c
  1867  000EE0  A4D8               	btfss	status,2,c
  1868  000EE2  EF75  F007         	goto	u521
  1869  000EE6  EF77  F007         	goto	u520
  1870  000EEA                     u521:
  1871  000EEA  EF7C  F007         	goto	l1213
  1872  000EEE                     u520:
  1873  000EEE                     l1211:
  1874  000EEE  5001               	movf	fputc@c^0,w,c
  1875  000EF0  EC7F  F009         	call	_putch
  1876  000EF4  EFC9  F007         	goto	l840
  1877  000EF8                     l1213:
  1878  000EF8  EE20 F009          	lfsr	2,9
  1879  000EFC  5003               	movf	fputc@fp^0,w,c
  1880  000EFE  26D9               	addwf	fsr2l,f,c
  1881  000F00  5004               	movf	(fputc@fp+1)^0,w,c
  1882  000F02  22DA               	addwfc	fsr2h,f,c
  1883  000F04  50DE               	movf	postinc2,w,c
  1884  000F06  10DE               	iorwf	postinc2,w,c
  1885  000F08  B4D8               	btfsc	status,2,c
  1886  000F0A  EF89  F007         	goto	u531
  1887  000F0E  EF8B  F007         	goto	u530
  1888  000F12                     u531:
  1889  000F12  EFA6  F007         	goto	l1217
  1890  000F16                     u530:
  1891  000F16  EE20 F009          	lfsr	2,9
  1892  000F1A  5003               	movf	fputc@fp^0,w,c
  1893  000F1C  26D9               	addwf	fsr2l,f,c
  1894  000F1E  5004               	movf	(fputc@fp+1)^0,w,c
  1895  000F20  22DA               	addwfc	fsr2h,f,c
  1896  000F22  EE10 F003          	lfsr	1,3
  1897  000F26  5003               	movf	fputc@fp^0,w,c
  1898  000F28  26E1               	addwf	fsr1l,f,c
  1899  000F2A  5004               	movf	(fputc@fp+1)^0,w,c
  1900  000F2C  22E2               	addwfc	fsr1h,f,c
  1901  000F2E  50DE               	movf	postinc2,w,c
  1902  000F30  5CE6               	subwf	postinc1,w,c
  1903  000F32  50E6               	movf	postinc1,w,c
  1904  000F34  0A80               	xorlw	128
  1905  000F36  6E09               	movwf	(??_fputc+4)^0,c
  1906  000F38  50DE               	movf	postinc2,w,c
  1907  000F3A  0A80               	xorlw	128
  1908  000F3C  5809               	subwfb	(??_fputc+4)^0,w,c
  1909  000F3E  B0D8               	btfsc	status,0,c
  1910  000F40  EFA4  F007         	goto	u541
  1911  000F44  EFA6  F007         	goto	u540
  1912  000F48                     u541:
  1913  000F48  EFC9  F007         	goto	l840
  1914  000F4C                     u540:
  1915  000F4C                     l1217:
  1916  000F4C  EE20 F003          	lfsr	2,3
  1917  000F50  5003               	movf	fputc@fp^0,w,c
  1918  000F52  26D9               	addwf	fsr2l,f,c
  1919  000F54  5004               	movf	(fputc@fp+1)^0,w,c
  1920  000F56  22DA               	addwfc	fsr2h,f,c
  1921  000F58  CFDE F005          	movff	postinc2,??_fputc
  1922  000F5C  CFDD F006          	movff	postdec2,??_fputc+1
  1923  000F60  C003  FFD9         	movff	fputc@fp,fsr2l
  1924  000F64  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1925  000F68  CFDE F007          	movff	postinc2,??_fputc+2
  1926  000F6C  CFDD F008          	movff	postdec2,??_fputc+3
  1927  000F70  5005               	movf	??_fputc^0,w,c
  1928  000F72  2407               	addwf	(??_fputc+2)^0,w,c
  1929  000F74  6ED9               	movwf	fsr2l,c
  1930  000F76  5006               	movf	(??_fputc+1)^0,w,c
  1931  000F78  2008               	addwfc	(??_fputc+3)^0,w,c
  1932  000F7A  6EDA               	movwf	fsr2h,c
  1933  000F7C  C001  FFDF         	movff	fputc@c,indf2
  1934  000F80  EE20 F003          	lfsr	2,3
  1935  000F84  5003               	movf	fputc@fp^0,w,c
  1936  000F86  26D9               	addwf	fsr2l,f,c
  1937  000F88  5004               	movf	(fputc@fp+1)^0,w,c
  1938  000F8A  22DA               	addwfc	fsr2h,f,c
  1939  000F8C  2ADE               	incf	postinc2,f,c
  1940  000F8E  0E00               	movlw	0
  1941  000F90  22DD               	addwfc	postdec2,f,c
  1942  000F92                     l840:
  1943  000F92  0012               	return		;funcret
  1944  000F94                     __end_of_fputc:
  1945                           	callstack 0
  1946                           
  1947 ;; *************** function _putch *****************
  1948 ;; Defined at:
  1949 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\putch.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  c               1    wreg     unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  c               1    0[COMRAM] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1963 ;;      Params:         0       0       0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0
  1965 ;;      Temps:          0       0       0       0       0       0       0
  1966 ;;      Totals:         0       0       0       0       0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_fputc
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text9
  1977  0012FE                     __ptext9:
  1978                           	callstack 0
  1979  0012FE                     _putch:
  1980                           	callstack 26
  1981  0012FE  0012               	return		;funcret
  1982  001300                     __end_of_putch:
  1983                           	callstack 0
  1984                           
  1985 ;; *************** function _abs *****************
  1986 ;; Defined at:
  1987 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\abs.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  a               2   18[COMRAM] int 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  2   18[COMRAM] int 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2001 ;;      Params:         2       0       0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0
  2003 ;;      Temps:          2       0       0       0       0       0       0
  2004 ;;      Totals:         4       0       0       0       0       0       0
  2005 ;;Total ram usage:        4 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_dtoa
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text10
  2015  0011C8                     __ptext10:
  2016                           	callstack 0
  2017  0011C8                     _abs:
  2018                           	callstack 26
  2019  0011C8  BE14               	btfsc	(abs@a+1)^0,7,c
  2020  0011CA  EFF1  F008         	goto	u740
  2021  0011CE  5014               	movf	(abs@a+1)^0,w,c
  2022  0011D0  E106               	bnz	u741
  2023  0011D2  0413               	decf	abs@a^0,w,c
  2024  0011D4  B0D8               	btfsc	status,0,c
  2025  0011D6  EFEF  F008         	goto	u741
  2026  0011DA  EFF1  F008         	goto	u740
  2027  0011DE                     u741:
  2028  0011DE  EFFF  F008         	goto	l825
  2029  0011E2                     u740:
  2030  0011E2  C013  F015         	movff	abs@a,??_abs
  2031  0011E6  C014  F016         	movff	abs@a+1,??_abs+1
  2032  0011EA  1E15               	comf	??_abs^0,f,c
  2033  0011EC  1E16               	comf	(??_abs+1)^0,f,c
  2034  0011EE  4A15               	infsnz	??_abs^0,f,c
  2035  0011F0  2A16               	incf	(??_abs+1)^0,f,c
  2036  0011F2  C015  F013         	movff	??_abs,?_abs
  2037  0011F6  C016  F014         	movff	??_abs+1,?_abs+1
  2038  0011FA  EF03  F009         	goto	l828
  2039  0011FE                     l825:
  2040  0011FE  C013  F013         	movff	abs@a,?_abs
  2041  001202  C014  F014         	movff	abs@a+1,?_abs+1
  2042  001206                     l828:
  2043  001206  0012               	return		;funcret
  2044  001208                     __end_of_abs:
  2045                           	callstack 0
  2046                           
  2047 ;; *************** function ___aomod *****************
  2048 ;; Defined at:
  2049 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aomod.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  dividend        8    0[COMRAM] long long 
  2052 ;;  divisor         8    8[COMRAM] long long 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  sign            1   17[COMRAM] unsigned char 
  2055 ;;  counter         1   16[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  8    0[COMRAM] long long 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2065 ;;      Params:        16       0       0       0       0       0       0
  2066 ;;      Locals:         2       0       0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0
  2068 ;;      Totals:        18       0       0       0       0       0       0
  2069 ;;Total ram usage:       18 bytes
  2070 ;; Hardware stack levels used: 1
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_dtoa
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text11
  2079  000C3E                     __ptext11:
  2080                           	callstack 0
  2081  000C3E                     ___aomod:
  2082                           	callstack 26
  2083  000C3E  0E00               	movlw	0
  2084  000C40  6E12               	movwf	___aomod@sign^0,c
  2085  000C42  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2086  000C44  EF28  F006         	goto	u640
  2087  000C48  EF26  F006         	goto	u641
  2088  000C4C                     u641:
  2089  000C4C  EF3A  F006         	goto	l1291
  2090  000C50                     u640:
  2091  000C50  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2092  000C52  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2093  000C54  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2094  000C56  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2095  000C58  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2096  000C5A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2097  000C5C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2098  000C5E  6C01               	negf	___aomod@dividend^0,c
  2099  000C60  0E00               	movlw	0
  2100  000C62  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2101  000C64  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2102  000C66  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2103  000C68  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2104  000C6A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2105  000C6C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2106  000C6E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2107  000C70  0E01               	movlw	1
  2108  000C72  6E12               	movwf	___aomod@sign^0,c
  2109  000C74                     l1291:
  2110  000C74  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2111  000C76  EF41  F006         	goto	u650
  2112  000C7A  EF3F  F006         	goto	u651
  2113  000C7E                     u651:
  2114  000C7E  EF51  F006         	goto	l1295
  2115  000C82                     u650:
  2116  000C82  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2117  000C84  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2118  000C86  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2119  000C88  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2120  000C8A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2121  000C8C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2122  000C8E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2123  000C90  6C09               	negf	___aomod@divisor^0,c
  2124  000C92  0E00               	movlw	0
  2125  000C94  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2126  000C96  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2127  000C98  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2128  000C9A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2129  000C9C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2130  000C9E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2131  000CA0  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2132  000CA2                     l1295:
  2133  000CA2  5009               	movf	___aomod@divisor^0,w,c
  2134  000CA4  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2135  000CA6  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2136  000CA8  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2137  000CAA  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2138  000CAC  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2139  000CAE  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2140  000CB0  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2141  000CB2  B4D8               	btfsc	status,2,c
  2142  000CB4  EF5E  F006         	goto	u661
  2143  000CB8  EF60  F006         	goto	u660
  2144  000CBC                     u661:
  2145  000CBC  EFA8  F006         	goto	l1311
  2146  000CC0                     u660:
  2147  000CC0  0E01               	movlw	1
  2148  000CC2  6E11               	movwf	___aomod@counter^0,c
  2149  000CC4  EF6E  F006         	goto	l1301
  2150  000CC8                     l1299:
  2151  000CC8  90D8               	bcf	status,0,c
  2152  000CCA  3609               	rlcf	___aomod@divisor^0,f,c
  2153  000CCC  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2154  000CCE  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2155  000CD0  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2156  000CD2  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2157  000CD4  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2158  000CD6  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2159  000CD8  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2160  000CDA  2A11               	incf	___aomod@counter^0,f,c
  2161  000CDC                     l1301:
  2162  000CDC  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2163  000CDE  EF73  F006         	goto	u671
  2164  000CE2  EF75  F006         	goto	u670
  2165  000CE6                     u671:
  2166  000CE6  EF64  F006         	goto	l1299
  2167  000CEA                     u670:
  2168  000CEA                     l1303:
  2169  000CEA  5009               	movf	___aomod@divisor^0,w,c
  2170  000CEC  5C01               	subwf	___aomod@dividend^0,w,c
  2171  000CEE  500A               	movf	(___aomod@divisor+1)^0,w,c
  2172  000CF0  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2173  000CF2  500B               	movf	(___aomod@divisor+2)^0,w,c
  2174  000CF4  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2175  000CF6  500C               	movf	(___aomod@divisor+3)^0,w,c
  2176  000CF8  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2177  000CFA  500D               	movf	(___aomod@divisor+4)^0,w,c
  2178  000CFC  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2179  000CFE  500E               	movf	(___aomod@divisor+5)^0,w,c
  2180  000D00  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2181  000D02  500F               	movf	(___aomod@divisor+6)^0,w,c
  2182  000D04  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2183  000D06  5010               	movf	(___aomod@divisor+7)^0,w,c
  2184  000D08  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2185  000D0A  A0D8               	btfss	status,0,c
  2186  000D0C  EF8A  F006         	goto	u681
  2187  000D10  EF8C  F006         	goto	u680
  2188  000D14                     u681:
  2189  000D14  EF9C  F006         	goto	l1307
  2190  000D18                     u680:
  2191  000D18  5009               	movf	___aomod@divisor^0,w,c
  2192  000D1A  5E01               	subwf	___aomod@dividend^0,f,c
  2193  000D1C  500A               	movf	(___aomod@divisor+1)^0,w,c
  2194  000D1E  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2195  000D20  500B               	movf	(___aomod@divisor+2)^0,w,c
  2196  000D22  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2197  000D24  500C               	movf	(___aomod@divisor+3)^0,w,c
  2198  000D26  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2199  000D28  500D               	movf	(___aomod@divisor+4)^0,w,c
  2200  000D2A  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2201  000D2C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2202  000D2E  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2203  000D30  500F               	movf	(___aomod@divisor+6)^0,w,c
  2204  000D32  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2205  000D34  5010               	movf	(___aomod@divisor+7)^0,w,c
  2206  000D36  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2207  000D38                     l1307:
  2208  000D38  90D8               	bcf	status,0,c
  2209  000D3A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2210  000D3C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2211  000D3E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2212  000D40  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2213  000D42  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2214  000D44  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2215  000D46  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2216  000D48  3209               	rrcf	___aomod@divisor^0,f,c
  2217  000D4A  2E11               	decfsz	___aomod@counter^0,f,c
  2218  000D4C  EF75  F006         	goto	l1303
  2219  000D50                     l1311:
  2220  000D50  5012               	movf	___aomod@sign^0,w,c
  2221  000D52  B4D8               	btfsc	status,2,c
  2222  000D54  EFAE  F006         	goto	u691
  2223  000D58  EFB0  F006         	goto	u690
  2224  000D5C                     u691:
  2225  000D5C  EFC0  F006         	goto	l1315
  2226  000D60                     u690:
  2227  000D60  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2228  000D62  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2229  000D64  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2230  000D66  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2231  000D68  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2232  000D6A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2233  000D6C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2234  000D6E  6C01               	negf	___aomod@dividend^0,c
  2235  000D70  0E00               	movlw	0
  2236  000D72  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2237  000D74  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2238  000D76  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2239  000D78  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2240  000D7A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2241  000D7C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2242  000D7E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2243  000D80                     l1315:
  2244  000D80  C001  F001         	movff	___aomod@dividend,?___aomod
  2245  000D84  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2246  000D88  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2247  000D8C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2248  000D90  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2249  000D94  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2250  000D98  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2251  000D9C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2252  000DA0  0012               	return		;funcret
  2253  000DA2                     __end_of___aomod:
  2254                           	callstack 0
  2255                           
  2256 ;; *************** function ___aodiv *****************
  2257 ;; Defined at:
  2258 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aodiv.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  dividend        8    0[COMRAM] long long 
  2261 ;;  divisor         8    8[COMRAM] long long 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  quotient        8   18[COMRAM] long long 
  2264 ;;  sign            1   17[COMRAM] unsigned char 
  2265 ;;  counter         1   16[COMRAM] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  8    0[COMRAM] long long 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2275 ;;      Params:        16       0       0       0       0       0       0
  2276 ;;      Locals:        10       0       0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0
  2278 ;;      Totals:        26       0       0       0       0       0       0
  2279 ;;Total ram usage:       26 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_dtoa
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text12
  2289  000AB6                     __ptext12:
  2290                           	callstack 0
  2291  000AB6                     ___aodiv:
  2292                           	callstack 26
  2293  000AB6  0E00               	movlw	0
  2294  000AB8  6E12               	movwf	___aodiv@sign^0,c
  2295  000ABA  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2296  000ABC  EF64  F005         	goto	u570
  2297  000AC0  EF62  F005         	goto	u571
  2298  000AC4                     u571:
  2299  000AC4  EF76  F005         	goto	l1247
  2300  000AC8                     u570:
  2301  000AC8  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2302  000ACA  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2303  000ACC  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2304  000ACE  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2305  000AD0  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2306  000AD2  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2307  000AD4  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2308  000AD6  6C09               	negf	___aodiv@divisor^0,c
  2309  000AD8  0E00               	movlw	0
  2310  000ADA  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2311  000ADC  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2312  000ADE  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2313  000AE0  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2314  000AE2  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2315  000AE4  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2316  000AE6  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2317  000AE8  0E01               	movlw	1
  2318  000AEA  6E12               	movwf	___aodiv@sign^0,c
  2319  000AEC                     l1247:
  2320  000AEC  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2321  000AEE  EF7D  F005         	goto	u580
  2322  000AF2  EF7B  F005         	goto	u581
  2323  000AF6                     u581:
  2324  000AF6  EF8F  F005         	goto	l1253
  2325  000AFA                     u580:
  2326  000AFA  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2327  000AFC  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2328  000AFE  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2329  000B00  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2330  000B02  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2331  000B04  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2332  000B06  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2333  000B08  6C01               	negf	___aodiv@dividend^0,c
  2334  000B0A  0E00               	movlw	0
  2335  000B0C  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2336  000B0E  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2337  000B10  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2338  000B12  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2339  000B14  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2340  000B16  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2341  000B18  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2342  000B1A  0E01               	movlw	1
  2343  000B1C  1A12               	xorwf	___aodiv@sign^0,f,c
  2344  000B1E                     l1253:
  2345  000B1E  EE20  F013         	lfsr	2,___aodiv@quotient
  2346  000B22  0E07               	movlw	7
  2347  000B24                     u591:
  2348  000B24  6ADE               	clrf	postinc2,c
  2349  000B26  06E8               	decf	wreg,f,c
  2350  000B28  E2FD               	bc	u591
  2351  000B2A  5009               	movf	___aodiv@divisor^0,w,c
  2352  000B2C  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2353  000B2E  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2354  000B30  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2355  000B32  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2356  000B34  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2357  000B36  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2358  000B38  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2359  000B3A  B4D8               	btfsc	status,2,c
  2360  000B3C  EFA2  F005         	goto	u601
  2361  000B40  EFA4  F005         	goto	u600
  2362  000B44                     u601:
  2363  000B44  EFF6  F005         	goto	l1275
  2364  000B48                     u600:
  2365  000B48  0E01               	movlw	1
  2366  000B4A  6E11               	movwf	___aodiv@counter^0,c
  2367  000B4C  EFB2  F005         	goto	l1261
  2368  000B50                     l1259:
  2369  000B50  90D8               	bcf	status,0,c
  2370  000B52  3609               	rlcf	___aodiv@divisor^0,f,c
  2371  000B54  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2372  000B56  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2373  000B58  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2374  000B5A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2375  000B5C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2376  000B5E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2377  000B60  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2378  000B62  2A11               	incf	___aodiv@counter^0,f,c
  2379  000B64                     l1261:
  2380  000B64  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2381  000B66  EFB7  F005         	goto	u611
  2382  000B6A  EFB9  F005         	goto	u610
  2383  000B6E                     u611:
  2384  000B6E  EFA8  F005         	goto	l1259
  2385  000B72                     u610:
  2386  000B72                     l1263:
  2387  000B72  90D8               	bcf	status,0,c
  2388  000B74  3613               	rlcf	___aodiv@quotient^0,f,c
  2389  000B76  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2390  000B78  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2391  000B7A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2392  000B7C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2393  000B7E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2394  000B80  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2395  000B82  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2396  000B84  5009               	movf	___aodiv@divisor^0,w,c
  2397  000B86  5C01               	subwf	___aodiv@dividend^0,w,c
  2398  000B88  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2399  000B8A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2400  000B8C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2401  000B8E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2402  000B90  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2403  000B92  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2404  000B94  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2405  000B96  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2406  000B98  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2407  000B9A  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2408  000B9C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2409  000B9E  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2410  000BA0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2411  000BA2  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2412  000BA4  A0D8               	btfss	status,0,c
  2413  000BA6  EFD7  F005         	goto	u621
  2414  000BAA  EFD9  F005         	goto	u620
  2415  000BAE                     u621:
  2416  000BAE  EFEA  F005         	goto	l1271
  2417  000BB2                     u620:
  2418  000BB2  5009               	movf	___aodiv@divisor^0,w,c
  2419  000BB4  5E01               	subwf	___aodiv@dividend^0,f,c
  2420  000BB6  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2421  000BB8  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2422  000BBA  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2423  000BBC  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2424  000BBE  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2425  000BC0  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2426  000BC2  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2427  000BC4  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2428  000BC6  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2429  000BC8  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2430  000BCA  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2431  000BCC  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2432  000BCE  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2433  000BD0  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2434  000BD2  8013               	bsf	___aodiv@quotient^0,0,c
  2435  000BD4                     l1271:
  2436  000BD4  90D8               	bcf	status,0,c
  2437  000BD6  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2438  000BD8  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2439  000BDA  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2440  000BDC  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2441  000BDE  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2442  000BE0  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2443  000BE2  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2444  000BE4  3209               	rrcf	___aodiv@divisor^0,f,c
  2445  000BE6  2E11               	decfsz	___aodiv@counter^0,f,c
  2446  000BE8  EFB9  F005         	goto	l1263
  2447  000BEC                     l1275:
  2448  000BEC  5012               	movf	___aodiv@sign^0,w,c
  2449  000BEE  B4D8               	btfsc	status,2,c
  2450  000BF0  EFFC  F005         	goto	u631
  2451  000BF4  EFFE  F005         	goto	u630
  2452  000BF8                     u631:
  2453  000BF8  EF0E  F006         	goto	l1279
  2454  000BFC                     u630:
  2455  000BFC  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2456  000BFE  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2457  000C00  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2458  000C02  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2459  000C04  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2460  000C06  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2461  000C08  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2462  000C0A  6C13               	negf	___aodiv@quotient^0,c
  2463  000C0C  0E00               	movlw	0
  2464  000C0E  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2465  000C10  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2466  000C12  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2467  000C14  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2468  000C16  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2469  000C18  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2470  000C1A  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2471  000C1C                     l1279:
  2472  000C1C  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2473  000C20  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2474  000C24  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2475  000C28  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2476  000C2C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2477  000C30  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2478  000C34  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2479  000C38  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2480  000C3C  0012               	return		;funcret
  2481  000C3E                     __end_of___aodiv:
  2482                           	callstack 0
  2483                           
  2484 ;; *************** function _lcd_ini *****************
  2485 ;; Defined at:
  2486 ;;		line 128 in file "newmain.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2500 ;;      Params:         0       0       0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0
  2503 ;;      Totals:         0       0       0       0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used: 1
  2506 ;; Hardware stack levels required when called: 1
  2507 ;; This function calls:
  2508 ;;		_lcdcmd
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text13
  2515  00127C                     __ptext13:
  2516                           	callstack 0
  2517  00127C                     _lcd_ini:
  2518                           	callstack 29
  2519  00127C                     
  2520                           ;newmain.c: 130:  lcdcmd(0x38);
  2521  00127C  0E38               	movlw	56
  2522  00127E  EC6C  F009         	call	_lcdcmd
  2523                           
  2524                           ;newmain.c: 131:  lcdcmd(0x0C);
  2525  001282  0E0C               	movlw	12
  2526  001284  EC6C  F009         	call	_lcdcmd
  2527                           
  2528                           ;newmain.c: 132:  lcdcmd(0x01);
  2529  001288  0E01               	movlw	1
  2530  00128A  EC6C  F009         	call	_lcdcmd
  2531                           
  2532                           ;newmain.c: 133:  lcdcmd(0x06);
  2533  00128E  0E06               	movlw	6
  2534  001290  EC6C  F009         	call	_lcdcmd
  2535                           
  2536                           ;newmain.c: 134:  lcdcmd(0x80);
  2537  001294  0E80               	movlw	128
  2538  001296  EC6C  F009         	call	_lcdcmd
  2539  00129A  0012               	return		;funcret
  2540  00129C                     __end_of_lcd_ini:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function _LCD_Write_String *****************
  2544 ;; Defined at:
  2545 ;;		line 156 in file "newmain.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  str             2    2[COMRAM] PTR unsigned char 
  2548 ;;		 -> main@buffer(10), STR_2(8), STR_1(22), 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  i               2    6[COMRAM] int 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2560 ;;      Params:         2       0       0       0       0       0       0
  2561 ;;      Locals:         2       0       0       0       0       0       0
  2562 ;;      Temps:          2       0       0       0       0       0       0
  2563 ;;      Totals:         6       0       0       0       0       0       0
  2564 ;;Total ram usage:        6 bytes
  2565 ;; Hardware stack levels used: 1
  2566 ;; Hardware stack levels required when called: 1
  2567 ;; This function calls:
  2568 ;;		_lcddata
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text14
  2575  001056                     __ptext14:
  2576                           	callstack 0
  2577  001056                     _LCD_Write_String:
  2578                           	callstack 29
  2579  001056                     
  2580                           ;newmain.c: 156: void LCD_Write_String(char *str);newmain.c: 157: {;newmain.c: 158:   in
      +                          t i;;newmain.c: 159:   for(i=0;str[i]!='\0';i++)
  2581  001056  0E00               	movlw	0
  2582  001058  6E08               	movwf	(LCD_Write_String@i+1)^0,c
  2583  00105A  0E00               	movlw	0
  2584  00105C  6E07               	movwf	LCD_Write_String@i^0,c
  2585  00105E  EF4B  F008         	goto	l1475
  2586  001062                     l1471:
  2587                           
  2588                           ;newmain.c: 160:     lcddata(str[i]);
  2589  001062  5007               	movf	LCD_Write_String@i^0,w,c
  2590  001064  2403               	addwf	LCD_Write_String@str^0,w,c
  2591  001066  6E05               	movwf	??_LCD_Write_String^0,c
  2592  001068  5008               	movf	(LCD_Write_String@i+1)^0,w,c
  2593  00106A  2004               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2594  00106C  6E06               	movwf	(??_LCD_Write_String+1)^0,c
  2595  00106E  C005  FFF6         	movff	??_LCD_Write_String,tblptrl
  2596  001072  C006  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2597  001076  6AF8               	clrf	tblptru,c
  2598  001078  0E05               	movlw	(high __ramtop+-1)
  2599  00107A  64F7               	cpfsgt	tblptrh,c
  2600  00107C  D003               	bra	u977
  2601  00107E  0008               	tblrd		*
  2602  001080  50F5               	movf	tablat,w,c
  2603  001082  D005               	bra	u970
  2604  001084                     u977:
  2605  001084  CFF6 FFE1          	movff	tblptrl,fsr1l
  2606  001088  CFF7 FFE2          	movff	tblptrh,fsr1h
  2607  00108C  50E7               	movf	indf1,w,c
  2608  00108E                     u970:
  2609  00108E  EC5D  F009         	call	_lcddata
  2610  001092  4A07               	infsnz	LCD_Write_String@i^0,f,c
  2611  001094  2A08               	incf	(LCD_Write_String@i+1)^0,f,c
  2612  001096                     l1475:
  2613  001096  5007               	movf	LCD_Write_String@i^0,w,c
  2614  001098  2403               	addwf	LCD_Write_String@str^0,w,c
  2615  00109A  6E05               	movwf	??_LCD_Write_String^0,c
  2616  00109C  5008               	movf	(LCD_Write_String@i+1)^0,w,c
  2617  00109E  2004               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2618  0010A0  6E06               	movwf	(??_LCD_Write_String+1)^0,c
  2619  0010A2  C005  FFF6         	movff	??_LCD_Write_String,tblptrl
  2620  0010A6  C006  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2621  0010AA  6AF8               	clrf	tblptru,c
  2622  0010AC  0E05               	movlw	(high __ramtop+-1)
  2623  0010AE  64F7               	cpfsgt	tblptrh,c
  2624  0010B0  D003               	bra	u987
  2625  0010B2  0008               	tblrd		*
  2626  0010B4  50F5               	movf	tablat,w,c
  2627  0010B6  D005               	bra	u980
  2628  0010B8                     u987:
  2629  0010B8  CFF6 FFE1          	movff	tblptrl,fsr1l
  2630  0010BC  CFF7 FFE2          	movff	tblptrh,fsr1h
  2631  0010C0  50E7               	movf	indf1,w,c
  2632  0010C2                     u980:
  2633  0010C2  0900               	iorlw	0
  2634  0010C4  A4D8               	btfss	status,2,c
  2635  0010C6  EF67  F008         	goto	u991
  2636  0010CA  EF69  F008         	goto	u990
  2637  0010CE                     u991:
  2638  0010CE  EF31  F008         	goto	l1471
  2639  0010D2                     u990:
  2640  0010D2  0012               	return		;funcret
  2641  0010D4                     __end_of_LCD_Write_String:
  2642                           	callstack 0
  2643                           
  2644 ;; *************** function _lcddata *****************
  2645 ;; Defined at:
  2646 ;;		line 146 in file "newmain.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  dataout         1    wreg     unsigned char 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  dataout         1    1[COMRAM] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2660 ;;      Params:         0       0       0       0       0       0       0
  2661 ;;      Locals:         1       0       0       0       0       0       0
  2662 ;;      Temps:          1       0       0       0       0       0       0
  2663 ;;      Totals:         2       0       0       0       0       0       0
  2664 ;;Total ram usage:        2 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; This function calls:
  2667 ;;		Nothing
  2668 ;; This function is called by:
  2669 ;;		_LCD_Write_String
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text15
  2674  0012BA                     __ptext15:
  2675                           	callstack 0
  2676  0012BA                     _lcddata:
  2677                           	callstack 29
  2678                           
  2679                           ;incstack = 0
  2680                           ;lcddata@dataout stored from wreg
  2681  0012BA  6E02               	movwf	lcddata@dataout^0,c
  2682  0012BC                     
  2683                           ;newmain.c: 146: void lcddata(unsigned char dataout);newmain.c: 147: {;newmain.c: 148:  
      +                          LATB=dataout;
  2684  0012BC  C002  FF8A         	movff	lcddata@dataout,3978	;volatile
  2685  0012C0                     
  2686                           ;newmain.c: 149:  LATAbits.LA1=1;
  2687  0012C0  8289               	bsf	137,1,c	;volatile
  2688  0012C2                     
  2689                           ;newmain.c: 151:  LATAbits.LA2=1;
  2690  0012C2  8489               	bsf	137,2,c	;volatile
  2691  0012C4                     
  2692                           ;newmain.c: 152:   _delay((unsigned long)((6)*(8000000/4000.0)));
  2693  0012C4  0E10               	movlw	16
  2694  0012C6  6E01               	movwf	??_lcddata^0,c
  2695  0012C8  0E94               	movlw	148
  2696  0012CA                     u1057:
  2697  0012CA  2EE8               	decfsz	wreg,f,c
  2698  0012CC  D7FE               	bra	u1057
  2699  0012CE  2E01               	decfsz	??_lcddata^0,f,c
  2700  0012D0  D7FC               	bra	u1057
  2701  0012D2  D000               	nop2	
  2702  0012D4                     
  2703                           ;newmain.c: 153:  LATAbits.LA2=0;
  2704  0012D4  9489               	bcf	137,2,c	;volatile
  2705  0012D6  0012               	return		;funcret
  2706  0012D8                     __end_of_lcddata:
  2707                           	callstack 0
  2708                           
  2709 ;; *************** function _LCD_Set_Cursor *****************
  2710 ;; Defined at:
  2711 ;;		line 162 in file "newmain.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  r               1    wreg     unsigned char 
  2714 ;;  c               1    2[COMRAM] unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  r               1    3[COMRAM] unsigned char 
  2717 ;;  Temp            1    4[COMRAM] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2727 ;;      Params:         1       0       0       0       0       0       0
  2728 ;;      Locals:         2       0       0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0
  2730 ;;      Totals:         3       0       0       0       0       0       0
  2731 ;;Total ram usage:        3 bytes
  2732 ;; Hardware stack levels used: 1
  2733 ;; Hardware stack levels required when called: 1
  2734 ;; This function calls:
  2735 ;;		_lcdcmd
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text16
  2742  001208                     __ptext16:
  2743                           	callstack 0
  2744  001208                     _LCD_Set_Cursor:
  2745                           	callstack 29
  2746                           
  2747                           ;incstack = 0
  2748                           ;LCD_Set_Cursor@r stored from wreg
  2749  001208  6E04               	movwf	LCD_Set_Cursor@r^0,c
  2750  00120A                     
  2751                           ;newmain.c: 162: void LCD_Set_Cursor(unsigned char r, unsigned char c);newmain.c: 163: {
      +                          ;newmain.c: 164:   unsigned char Temp;;newmain.c: 165:   if(r == 1)
  2752  00120A  0404               	decf	LCD_Set_Cursor@r^0,w,c
  2753  00120C  A4D8               	btfss	status,2,c
  2754  00120E  EF0B  F009         	goto	u951
  2755  001212  EF0D  F009         	goto	u950
  2756  001216                     u951:
  2757  001216  EF13  F009         	goto	l1463
  2758  00121A                     u950:
  2759  00121A                     
  2760                           ;newmain.c: 166:   {;newmain.c: 167:     Temp = 0x80 + c - 1;
  2761  00121A  5003               	movf	LCD_Set_Cursor@c^0,w,c
  2762  00121C  0F7F               	addlw	127
  2763  00121E  6E05               	movwf	LCD_Set_Cursor@Temp^0,c
  2764  001220                     
  2765                           ;newmain.c: 168:     lcdcmd(Temp);
  2766  001220  5005               	movf	LCD_Set_Cursor@Temp^0,w,c
  2767  001222  EC6C  F009         	call	_lcdcmd
  2768  001226                     l1463:
  2769                           
  2770                           ;newmain.c: 170:   if(r == 2)
  2771  001226  0E02               	movlw	2
  2772  001228  1804               	xorwf	LCD_Set_Cursor@r^0,w,c
  2773  00122A  A4D8               	btfss	status,2,c
  2774  00122C  EF1A  F009         	goto	u961
  2775  001230  EF1C  F009         	goto	u960
  2776  001234                     u961:
  2777  001234  EF22  F009         	goto	l68
  2778  001238                     u960:
  2779  001238                     
  2780                           ;newmain.c: 171:   {;newmain.c: 172:     Temp = 0xC0 + c - 1;
  2781  001238  5003               	movf	LCD_Set_Cursor@c^0,w,c
  2782  00123A  0FBF               	addlw	191
  2783  00123C  6E05               	movwf	LCD_Set_Cursor@Temp^0,c
  2784  00123E                     
  2785                           ;newmain.c: 173:     lcdcmd(Temp);
  2786  00123E  5005               	movf	LCD_Set_Cursor@Temp^0,w,c
  2787  001240  EC6C  F009         	call	_lcdcmd
  2788  001244                     l68:
  2789  001244  0012               	return		;funcret
  2790  001246                     __end_of_LCD_Set_Cursor:
  2791                           	callstack 0
  2792                           
  2793 ;; *************** function _LCD_Clear *****************
  2794 ;; Defined at:
  2795 ;;		line 123 in file "newmain.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         0       0       0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0
  2812 ;;      Totals:         0       0       0       0       0       0       0
  2813 ;;Total ram usage:        0 bytes
  2814 ;; Hardware stack levels used: 1
  2815 ;; Hardware stack levels required when called: 1
  2816 ;; This function calls:
  2817 ;;		_lcdcmd
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text17
  2824  0012F6                     __ptext17:
  2825                           	callstack 0
  2826  0012F6                     _LCD_Clear:
  2827                           	callstack 29
  2828  0012F6                     
  2829                           ;newmain.c: 125:   lcdcmd(0x01);
  2830  0012F6  0E01               	movlw	1
  2831  0012F8  EC6C  F009         	call	_lcdcmd
  2832  0012FC  0012               	return		;funcret
  2833  0012FE                     __end_of_LCD_Clear:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _lcdcmd *****************
  2837 ;; Defined at:
  2838 ;;		line 137 in file "newmain.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  cmdout          1    wreg     unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  cmdout          1    1[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2852 ;;      Params:         0       0       0       0       0       0       0
  2853 ;;      Locals:         1       0       0       0       0       0       0
  2854 ;;      Temps:          1       0       0       0       0       0       0
  2855 ;;      Totals:         2       0       0       0       0       0       0
  2856 ;;Total ram usage:        2 bytes
  2857 ;; Hardware stack levels used: 1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_LCD_Clear
  2862 ;;		_lcd_ini
  2863 ;;		_LCD_Set_Cursor
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text18
  2868  0012D8                     __ptext18:
  2869                           	callstack 0
  2870  0012D8                     _lcdcmd:
  2871                           	callstack 29
  2872                           
  2873                           ;incstack = 0
  2874                           ;lcdcmd@cmdout stored from wreg
  2875  0012D8  6E02               	movwf	lcdcmd@cmdout^0,c
  2876  0012DA                     
  2877                           ;newmain.c: 137: void lcdcmd(unsigned char cmdout);newmain.c: 138: {;newmain.c: 139:  LA
      +                          TB=cmdout;
  2878  0012DA  C002  FF8A         	movff	lcdcmd@cmdout,3978	;volatile
  2879  0012DE                     
  2880                           ;newmain.c: 140:  LATAbits.LA1=0;
  2881  0012DE  9289               	bcf	137,1,c	;volatile
  2882  0012E0                     
  2883                           ;newmain.c: 141:  LATAbits.LA2=1;
  2884  0012E0  8489               	bsf	137,2,c	;volatile
  2885  0012E2                     
  2886                           ;newmain.c: 142:   _delay((unsigned long)((6)*(8000000/4000.0)));
  2887  0012E2  0E10               	movlw	16
  2888  0012E4  6E01               	movwf	??_lcdcmd^0,c
  2889  0012E6  0E94               	movlw	148
  2890  0012E8                     u1067:
  2891  0012E8  2EE8               	decfsz	wreg,f,c
  2892  0012EA  D7FE               	bra	u1067
  2893  0012EC  2E01               	decfsz	??_lcdcmd^0,f,c
  2894  0012EE  D7FC               	bra	u1067
  2895  0012F0  D000               	nop2	
  2896  0012F2                     
  2897                           ;newmain.c: 143:  LATAbits.LA2=0;
  2898  0012F2  9489               	bcf	137,2,c	;volatile
  2899  0012F4  0012               	return		;funcret
  2900  0012F6                     __end_of_lcdcmd:
  2901                           	callstack 0
  2902                           
  2903                           	psect	rparam
  2904  0000                     
  2905                           	psect	idloc
  2906                           
  2907                           ;Config register IDLOC0 @ 0x200000
  2908                           ;	unspecified, using default values
  2909  200000                     	org	2097152
  2910  200000  FF                 	db	255
  2911                           
  2912                           ;Config register IDLOC1 @ 0x200001
  2913                           ;	unspecified, using default values
  2914  200001                     	org	2097153
  2915  200001  FF                 	db	255
  2916                           
  2917                           ;Config register IDLOC2 @ 0x200002
  2918                           ;	unspecified, using default values
  2919  200002                     	org	2097154
  2920  200002  FF                 	db	255
  2921                           
  2922                           ;Config register IDLOC3 @ 0x200003
  2923                           ;	unspecified, using default values
  2924  200003                     	org	2097155
  2925  200003  FF                 	db	255
  2926                           
  2927                           ;Config register IDLOC4 @ 0x200004
  2928                           ;	unspecified, using default values
  2929  200004                     	org	2097156
  2930  200004  FF                 	db	255
  2931                           
  2932                           ;Config register IDLOC5 @ 0x200005
  2933                           ;	unspecified, using default values
  2934  200005                     	org	2097157
  2935  200005  FF                 	db	255
  2936                           
  2937                           ;Config register IDLOC6 @ 0x200006
  2938                           ;	unspecified, using default values
  2939  200006                     	org	2097158
  2940  200006  FF                 	db	255
  2941                           
  2942                           ;Config register IDLOC7 @ 0x200007
  2943                           ;	unspecified, using default values
  2944  200007                     	org	2097159
  2945  200007  FF                 	db	255
  2946                           
  2947                           	psect	config
  2948                           
  2949                           ; Padding undefined space
  2950  300000                     	org	3145728
  2951  300000  FF                 	db	255
  2952                           
  2953                           ;Config register CONFIG1H @ 0x300001
  2954                           ;	Oscillator Selection bits
  2955                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  2956                           ;	Fail-Safe Clock Monitor Enable bit
  2957                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2958                           ;	Internal/External Oscillator Switchover bit
  2959                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2960  300001                     	org	3145729
  2961  300001  08                 	db	8
  2962                           
  2963                           ;Config register CONFIG2L @ 0x300002
  2964                           ;	Power-up Timer Enable bit
  2965                           ;	PWRT = OFF, PWRT disabled
  2966                           ;	Brown-out Reset Enable bits
  2967                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2968                           ;	Brown Out Reset Voltage bits
  2969                           ;	BORV = 3, Minimum setting
  2970  300002                     	org	3145730
  2971  300002  1F                 	db	31
  2972                           
  2973                           ;Config register CONFIG2H @ 0x300003
  2974                           ;	Watchdog Timer Enable bit
  2975                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2976                           ;	Watchdog Timer Postscale Select bits
  2977                           ;	WDTPS = 32768, 1:32768
  2978  300003                     	org	3145731
  2979  300003  1E                 	db	30
  2980                           
  2981                           ; Padding undefined space
  2982  300004                     	org	3145732
  2983  300004  FF                 	db	255
  2984                           
  2985                           ;Config register CONFIG3H @ 0x300005
  2986                           ;	CCP2 MUX bit
  2987                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2988                           ;	PORTB A/D Enable bit
  2989                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2990                           ;	Low-Power Timer1 Oscillator Enable bit
  2991                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2992                           ;	MCLR Pin Enable bit
  2993                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2994  300005                     	org	3145733
  2995  300005  81                 	db	129
  2996                           
  2997                           ;Config register CONFIG4L @ 0x300006
  2998                           ;	Stack Full/Underflow Reset Enable bit
  2999                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  3000                           ;	Single-Supply ICSP Enable bit
  3001                           ;	LVP = OFF, Single-Supply ICSP disabled
  3002                           ;	Extended Instruction Set Enable bit
  3003                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3004                           ;	Background Debugger Enable bit
  3005                           ;	DEBUG = 0x1, unprogrammed default
  3006  300006                     	org	3145734
  3007  300006  80                 	db	128
  3008                           
  3009                           ; Padding undefined space
  3010  300007                     	org	3145735
  3011  300007  FF                 	db	255
  3012                           
  3013                           ;Config register CONFIG5L @ 0x300008
  3014                           ;	Code Protection bit
  3015                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3016                           ;	Code Protection bit
  3017                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3018                           ;	Code Protection bit
  3019                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3020                           ;	Code Protection bit
  3021                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3022  300008                     	org	3145736
  3023  300008  0F                 	db	15
  3024                           
  3025                           ;Config register CONFIG5H @ 0x300009
  3026                           ;	Boot Block Code Protection bit
  3027                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3028                           ;	Data EEPROM Code Protection bit
  3029                           ;	CPD = OFF, Data EEPROM not code-protected
  3030  300009                     	org	3145737
  3031  300009  C0                 	db	192
  3032                           
  3033                           ;Config register CONFIG6L @ 0x30000A
  3034                           ;	Write Protection bit
  3035                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3036                           ;	Write Protection bit
  3037                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3038                           ;	Write Protection bit
  3039                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3040                           ;	Write Protection bit
  3041                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3042  30000A                     	org	3145738
  3043  30000A  0F                 	db	15
  3044                           
  3045                           ;Config register CONFIG6H @ 0x30000B
  3046                           ;	Configuration Register Write Protection bit
  3047                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3048                           ;	Boot Block Write Protection bit
  3049                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3050                           ;	Data EEPROM Write Protection bit
  3051                           ;	WRTD = OFF, Data EEPROM not write-protected
  3052  30000B                     	org	3145739
  3053  30000B  E0                 	db	224
  3054                           
  3055                           ;Config register CONFIG7L @ 0x30000C
  3056                           ;	Table Read Protection bit
  3057                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3058                           ;	Table Read Protection bit
  3059                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3060                           ;	Table Read Protection bit
  3061                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3062                           ;	Table Read Protection bit
  3063                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3064  30000C                     	org	3145740
  3065  30000C  0F                 	db	15
  3066                           
  3067                           ;Config register CONFIG7H @ 0x30000D
  3068                           ;	Boot Block Table Read Protection bit
  3069                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3070  30000D                     	org	3145741
  3071  30000D  40                 	db	64
  3072                           tosu	equ	0xFFF
  3073                           tosh	equ	0xFFE
  3074                           tosl	equ	0xFFD
  3075                           stkptr	equ	0xFFC
  3076                           pclatu	equ	0xFFB
  3077                           pclath	equ	0xFFA
  3078                           pcl	equ	0xFF9
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           prodh	equ	0xFF4
  3084                           prodl	equ	0xFF3
  3085                           indf0	equ	0xFEF
  3086                           postinc0	equ	0xFEE
  3087                           postdec0	equ	0xFED
  3088                           preinc0	equ	0xFEC
  3089                           plusw0	equ	0xFEB
  3090                           fsr0h	equ	0xFEA
  3091                           fsr0l	equ	0xFE9
  3092                           wreg	equ	0xFE8
  3093                           indf1	equ	0xFE7
  3094                           postinc1	equ	0xFE6
  3095                           postdec1	equ	0xFE5
  3096                           preinc1	equ	0xFE4
  3097                           plusw1	equ	0xFE3
  3098                           fsr1h	equ	0xFE2
  3099                           fsr1l	equ	0xFE1
  3100                           bsr	equ	0xFE0
  3101                           indf2	equ	0xFDF
  3102                           postinc2	equ	0xFDE
  3103                           postdec2	equ	0xFDD
  3104                           preinc2	equ	0xFDC
  3105                           plusw2	equ	0xFDB
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8

Data Sizes:
    Strings     33
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     126
    BANK0           128      0      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@buffer(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S626$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S626$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 22
		 -> main@buffer(COMRAM[10]), STR_2(CODE[8]), STR_1(CODE[22]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _lcd_ini->_lcdcmd
    _LCD_Write_String->_lcddata
    _LCD_Set_Cursor->_lcdcmd
    _LCD_Clear->_lcdcmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    7295
                                            106 COMRAM    16    16      0
                          _LCD_Clear
                     _LCD_Set_Cursor
                   _LCD_Write_String
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    6456
                                             87 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              0     0      0      15
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     6     4      2     333
                                              2 COMRAM     6     4      2
                            _lcddata
 ---------------------------------------------------------------------------------
 (2) _lcddata                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       3     2      1     377
                                              2 COMRAM     3     2      1
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      15
                             _lcdcmd
 ---------------------------------------------------------------------------------
 (2) _lcdcmd                                               2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _lcdcmd
   _LCD_Set_Cursor
     _lcdcmd
   _LCD_Write_String
     _lcddata
   _lcd_ini
     _lcdcmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      24       5       28.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7E       1       99.2%
BITBIGSFRlhh        3D      0       0      17        0.0%
BITBIGSFRh          2C      0       0      16        0.0%
BITBIGSFRlll         9      0       0      20        0.0%
BITBIGSFRllhh        5      0       0      18        0.0%
BITBIGSFRllhl        1      0       0      19        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      21        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Apr 13 14:11:31 2022

                      l51 129A                        l54 12F4                        l63 10D2  
                      l48 12FC                        l57 12D6                        l68 1244  
                     l185 0C3C                       l198 0DA0                       l820 112C  
                     l821 1134                       l814 0AB4                       l807 0900  
                     l840 0F92                       l825 11FE                       l851 12FE  
                     l828 1206                       l781 1054                       l749 1182  
                     l848 11C6                       l776 0FD8                       l857 127A  
                     l779 101A                       l787 06C2                       l789 06CA  
                     u510 0EDC                       u511 0ED8                       u600 0B48  
                     u520 0EEE                       u601 0B44                       u521 0EEA  
                     u610 0B72                       u530 0F16                       u611 0B6E  
                     u531 0F12                       u620 0BB2                       u540 0F4C  
                     u700 0FA2                       u621 0BAE                       u541 0F48  
                     u701 0F9E                       u630 0BFC                       u550 11C6  
                     u710 0FC4                       u631 0BF8                       u551 11C2  
                     u711 0FC0                       u640 0C50                       u560 126E  
                     u720 101A                       u800 06E4                       u641 0C4C  
                     u561 126A                       u721 1016                       u801 06E0  
                     u570 0AC8                       u650 0C82                       u730 1028  
                     u810 06F2                       u571 0AC4                       u651 0C7E  
                     u731 1024                       u811 06EE                       u580 0AFA  
                     u660 0CC0                       u740 11E2                       u820 081C  
                     u900 0926                       u581 0AF6                       u661 0CBC  
                     u741 11DE                       u821 0818                       u901 0922  
                     u670 0CEA                       u830 083A                       u750 0654  
                     u910 096E                       u591 0B24                       u671 0CE6  
                     u831 0836                       u751 064E                       u911 096A  
                     u680 0D18                       u840 0854                       u760 0656  
                     u920 0992                       u681 0D14                       u841 0850  
                     u921 098E                       u690 0D60                       u850 086E  
                     u770 066C                       u930 0A36                       u691 0D5C  
                     u851 086A                       u771 0668                       u931 0A32  
                     u860 087C                       u780 069A                       u940 112C  
                     u861 0878                       u781 0696                       u941 1128  
                     u950 121A                       u870 088E                       u790 06B6  
                     u951 1216                       u871 088A                       u791 06B2  
                     u960 1238                       u880 089C                       u961 1234  
                     u881 0898                       u970 108E                       u890 08B4  
                     u891 08B0                       u980 10C2                       u990 10D2  
                     u991 10CE                       u977 1084                       u987 10B8  
           main@DispCount 0079                       _abs 11C8                       _pad 0F94  
                     wreg 000FE8            _LCD_Set_Cursor 1208                      l1101 12DA  
                    l1103 12DE                      l1111 12BC                      l1105 12E0  
                    l1113 12C0                      l1107 12E2                      l1115 12C2  
                    l1211 0EEE                      ?_abs 0013                      l1109 12F2  
                    l1117 12C4                      l1301 0CDC                      l1213 0EF8  
                    l1221 1184                      l1151 12F6                      l1119 12D4  
                    l1303 0CEA                      l1311 0D50                      l1215 0F16  
                    l1207 0ECA                      l1223 1190                      l1231 1252  
                    l1129 127C                      l1241 0ABA                      l1313 0D60  
                    l1305 0D18                      l1217 0F4C                      l1209 0EDC  
                    l1225 11A2                      l1233 1256                      l1321 0FA2  
                    l1401 08C8                      l1251 0B1A                      l1243 0AC8  
                    l1315 0D80                      l1307 0D38                      l1227 11A6  
                    l1235 126E                      l1331 0FF8                      l1323 0FB6  
                    l1403 08D8                      l1411 0934                      l1261 0B64  
                    l1253 0B1E                      l1245 0AE8                      l1309 0D4A  
                    l1341 11C8                      l1229 1246                      l1333 0FFC  
                    l1325 0FC4                      l1421 09DA                      l1413 0946  
                    l1501 0DF8                      l1271 0BD4                      l1263 0B72  
                    l1255 0B2A                      l1247 0AEC                      l1239 0AB6  
                    l1343 11E2                      l1335 1028                      l1327 0FD0  
                    l1319 0F94                      l1351 068C                      l1431 0A58  
                    l1415 094A                      l1407 0902                      l1511 0E38  
                    l1503 0E00                      l1273 0BE6                      l1265 0B84  
                    l1257 0B48                      l1249 0AFA                      l1337 103C  
                    l1329 0FE4                      l1361 06E4                      l1353 069A  
                    l1345 0624                      l1425 0A12                      l1417 096E  
                    l1409 0926                      l1441 0A7E                      l1521 0E76  
                    l1513 0E42                      l1505 0E08                      l1267 0BB2  
                    l1259 0B50                      l1275 0BEC                      l1291 0C74  
                    l1283 0C3E                      l1371 0710                      l1363 06F2  
                    l1355 069C                      l1347 0644                      l1443 0AA2  
                    l1427 0A36                      l1435 0A64                      l1419 0992  
                    l1451 10DC                      l1523 0E8E                      l1515 0E5E  
                    l1507 0E12                      l1461 1220                      l1277 0BFC  
                    l1269 0BD2                      l1293 0C82                      l1285 0C42  
                    l1381 081C                      l1373 0792                      l1365 06F8  
                    l1357 06B6                      l1349 066C                      l1437 0A72  
                    l1429 0A44                      l1453 10EA                      l1525 0E90  
                    l1517 0E68                      l1509 0E1E                      l1463 1226  
                    l1471 1062                      l1279 0C1C                      l1295 0CA2  
                    l1287 0C50                      l1391 088E                      l1383 083A  
                    l1375 0798                      l1367 0700                      l1359 06D2  
                    l1455 1110                      l1519 0E74                      l1527 0EA8  
                    l1465 1238                      l1457 120A                      l1473 1092  
                    l1297 0CC0                      l1289 0C70                      l1393 089C  
                    l1385 0854                      l1377 079E                      l1369 070A  
                    l1449 10D4                      l1481 114E                      l1529 0EBA  
                    l1467 123E                      l1459 121A                      l1475 1096  
                    l1299 0CC8                      l1395 08A2                      l1387 086E  
                    l1379 0802                      l1483 1156                      l1491 0DC2  
                    l1469 1056                      l1397 08B4                      l1389 087C  
                    l1485 1172                      l1477 1136                      l1493 0DC6  
                    l1399 08C0                      l1479 1146                      l1495 0DD0  
                    l1497 0DDC                      l1489 0DA2                      l1499 0DF4  
     LCD_Write_String@str 0003                      ?_pad 0011                      STR_1 0601  
                    STR_2 0617                      STR_3 061F                      u1000 0EBA  
                    u1001 0EB6                      u1017 0DE6                      u1027 0E28  
            lcdcmd@cmdout 0002                      u1037 0E80                      u1047 0E9A  
                    u1057 12CA                      u1067 12E8                      _LATA 000F89  
                    _LATB 000F8A                      _LATD 000F8C         ?_LCD_Write_String 0003  
                    abs@a 0013                      _dbuf 0084                      _main 0DA2  
                    _dtoa 0624                      _prec 007B                      _nout 0080  
                    pad@i 0018                      pad@p 0015                      fsr1h 000FE2  
                    fsr2h 000FDA                      indf1 000FE7                      indf2 000FDF  
                    fsr1l 000FE1                      pad@w 001A                      fsr2l 000FD9  
                    start 0000        ??_LCD_Write_String 0005              ___param_bank 000000  
                   ??_abs 0015                     ??_pad 0017           __end_of___aodiv 0C3E  
                   ?_main 0001                     ?_dtoa 001C           __end_of___aomod 0DA2  
            vfpfcnvrt@fmt 0042                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISC 000F94                     _TRISD 000F95    __end_of_LCD_Set_Cursor 1246  
         __end_of_lcd_ini 129C           __end_of_lcddata 12D8                     _flags 007D  
                   _fputc 0ECA                     _fputs 1184                     pad@fp 0011  
                   _width 0082                     _putch 12FE                     dtoa@d 001E  
                   dtoa@i 003E                     dtoa@n 0036                     dtoa@p 0030  
                   dtoa@s 0034                     dtoa@w 0032                     tablat 000FF5  
                   status 000FD8           __end_of_sprintf 1184           __initialization 129C  
            __end_of_main 0ECA              __end_of_dtoa 0902                    ??_main 006B  
                  ??_dtoa 0026         __end_of_LCD_Clear 12FE             __activetblptr 000002  
         ?_LCD_Set_Cursor 0003                    ?_fputc 0001                    ?_fputs 000A  
                  ?_putch 0001                    _OSCCON 000FD3            lcddata@dataout 0002  
            vfprintf@cfmt 0056                 ??___aodiv 0011                 ??___aomod 0011  
                  _lcdcmd 12D8                    clear_0 12A2                    isa$std 000001  
                  pad@buf 0013                    dtoa@fp 001C                 ??_lcd_ini 0003  
               ??_lcddata 0001                    _strlen 1246                    fputc@c 0001  
                  fputs@c 000E                    fputs@i 000F                    fputs@s 000A  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    putch@c 0001          __end_of_vfprintf 1136  
               ??_sprintf 005E           LCD_Set_Cursor@c 0003           LCD_Set_Cursor@r 0004  
              __accesstop 0080   __end_of__initialization 12B0             ___rparam_used 000001  
          __pcstackCOMRAM 0001             __end_of_fputc 0F94             __end_of_fputs 11C8  
           __end_of_putch 1300                   ??_fputc 0005                   ??_fputs 000E  
                 ??_putch 0001                __pbssBANK0 0080                   ?_lcdcmd 0001  
                 ?_strlen 0001                   __Hparam 0000                   __Lparam 0000  
                 ___aodiv 0AB6                   ___aomod 0C3E                 ?_vfprintf 0050  
            __psmallconst 0600                   __pcinit 129C                   __ramtop 0600  
        ??_LCD_Set_Cursor 0004                   __ptext0 0DA2                   __ptext1 1136  
                 __ptext2 10D4                   __ptext3 0902                   __ptext4 0624  
                 __ptext5 0F94                   __ptext6 1246                   __ptext7 1184  
                 __ptext8 0ECA                   __ptext9 12FE                   _lcd_ini 127C  
                 _lcddata 12BA                 _LCD_Clear 12F6                   _sprintf 1136  
    end_of_initialization 12B0                   fputc@fp 0003             __Lmediumconst 0000  
                 fputs@fp 000C         __end_of_vfpfcnvrt 0AB6                   postdec2 000FDD  
                 postinc0 000FEE                   postinc1 000FE6                   postinc2 000FDE  
              ??_vfprintf 0056                   strlen@a 0003                   strlen@s 0001  
              ?_LCD_Clear 0001         LCD_Write_String@i 0007                main@buffer 006D  
             vfpfcnvrt@ap 0044               vfpfcnvrt@fp 0040               vfpfcnvrt@ll 0048  
        _LCD_Write_String 1056            __end_of_lcdcmd 12F6            __end_of_strlen 127C  
     start_initialization 129C               __end_of_abs 1208               __end_of_pad 1056  
             vfprintf@fmt 0052                  ??_lcdcmd 0001                  ??_strlen 0003  
             __pbssCOMRAM 007B          ___aodiv@dividend 0001               ??_LCD_Clear 0003  
                ?___aodiv 0001                  ?___aomod 0001          ___aodiv@quotient 0013  
                ?_lcd_ini 0001                  ?_lcddata 0001               __smallconst 0600  
                ?_sprintf 0058                  _LATAbits 000F89                  _LATDbits 000F8C  
               _vfpfcnvrt 0902                 main@count 0077  __end_of_LCD_Write_String 10D4  
                __Hrparam 0000                vfprintf@ap 0054                  __Lrparam 0000  
              vfprintf@fp 0050                ?_vfpfcnvrt 0040           ___aodiv@divisor 0009  
         ___aodiv@counter 0011                sprintf@fmt 005A                  _dtoa$708 002E  
                __ptext10 11C8                  __ptext11 0C3E                  __ptext12 0AB6  
                __ptext13 127C                  __ptext14 1056                  __ptext15 12BA  
                __ptext16 1208                  __ptext17 12F6                  __ptext18 12D8  
                isa$xinst 000000                  _vfprintf 10D4          ___aomod@dividend 0001  
               sprintf@ap 005E        LCD_Set_Cursor@Temp 0005           ___aomod@divisor 0009  
             ??_vfpfcnvrt 0046           ___aomod@counter 0011                  sprintf@f 0060  
                sprintf@s 0058              ___aodiv@sign 0012              ___aomod@sign 0012  
